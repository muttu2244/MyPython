from ctypes import *
STRING = c_char_p


NS_CAPTURE_DETAIL_INFO = 8195 # Variable c_int
L3_CAPTURE_DETAIL_INFO = NS_CAPTURE_DETAIL_INFO # alias
WAN_DS1_533_TO_655_BUILDOUT = 6 # Variable c_int
FR_DS1_533_TO_655_BUILDOUT = WAN_DS1_533_TO_655_BUILDOUT # alias
NS_DEFINE_MULTI_TCP_IPV6_STREAM = 4260 # Variable c_int
L3_DEFINE_MULTI_TCP_IPV6_STREAM = NS_DEFINE_MULTI_TCP_IPV6_STREAM # alias
CM_LAN_3100 = 28 # Variable c_int
CM_LAN_6100 = CM_LAN_3100 # alias
NS_AGGR_RAW_TAGS_INFO = 12550 # Variable c_int
FR_AGGR_RAW_TAGS_INFO = NS_AGGR_RAW_TAGS_INFO # alias
L3_CAPTURE_STOP = 8213 # Variable c_int
WN_CAPTURE_STOP = L3_CAPTURE_STOP # alias
NS_HIST_LATENCY_INFO = 12291 # Variable c_int
L3_HIST_LATENCY_INFO = NS_HIST_LATENCY_INFO # alias
NS_DEFINE_UDPDHCP_STREAM = 4101 # Variable c_int
L3_DEFINE_UDPDHCP_STREAM = NS_DEFINE_UDPDHCP_STREAM # alias
NS_MOD_IPX_STREAMS = 4227 # Variable c_int
L3_MOD_IPX_STREAMS = NS_MOD_IPX_STREAMS # alias
NS_IP_STREAM_INFO = 5394 # Variable c_int
FR_IP_STREAM_INFO = NS_IP_STREAM_INFO # alias
NS_CAPTURE_BAD_TYPE = 8210 # Variable c_int
L3_CAPTURE_BAD_TYPE = NS_CAPTURE_BAD_TYPE # alias
NS_DEFINE_MULTI_STREAM_EXTENSION = 4195 # Variable c_int
L3_DEFINE_MULTI_STREAM_EXTENSION = NS_DEFINE_MULTI_STREAM_EXTENSION # alias
NS_ETHERNET_MODE_ON = 34049 # Variable c_int
L3_ETHERNET_MODE_ON = NS_ETHERNET_MODE_ON # alias
CM_L3_6705 = 10 # Variable c_int
CM_L3_7505 = CM_L3_6705 # alias
NS_AGGR_MC_LATENCY_PER_STREAM_INFO = 12553 # Variable c_int
FR_AGGR_MC_LATENCY_PER_STREAM_INFO = NS_AGGR_MC_LATENCY_PER_STREAM_INFO # alias
NS_CAPTURE_PACKET_DATA_INFO = 8194 # Variable c_int
L3_CAPTURE_PACKET_DATA_INFO = NS_CAPTURE_PACKET_DATA_INFO # alias
NS_TX_ADDRESS = 5889 # Variable c_int
L3_TX_ADDRESS = NS_TX_ADDRESS # alias
L3_CAPTURE_START = 8214 # Variable c_int
WN_CAPTURE_START = L3_CAPTURE_START # alias
NS_DELETE_STREAM = 6145 # Variable c_int
L3_DELETE_STREAM = NS_DELETE_STREAM # alias
NS_ARP_ONE_STREAM = 6148 # Variable c_int
L3_ARP_ONE_STREAM = NS_ARP_ONE_STREAM # alias
NS_HIST_LATENCY_DISTRIBUTION_INFO = 12293 # Variable c_int
L3_HIST_LATENCY_DISTRIBUTION_INFO = NS_HIST_LATENCY_DISTRIBUTION_INFO # alias
WAN_DS1_399_TO_533_BUILDOUT = 5 # Variable c_int
FR_DS1_399_TO_533_BUILDOUT = WAN_DS1_399_TO_533_BUILDOUT # alias
WAN_DS1_E1_EXCESS_ZEROS_ALARM = 64 # Variable c_int
FR_DS1_E1_EXCESS_ZEROS_ALARM = WAN_DS1_E1_EXCESS_ZEROS_ALARM # alias
NS_MOD_UDP_STREAM_VLAN = 4136 # Variable c_int
L3_MOD_UDP_STREAM_VLAN = NS_MOD_UDP_STREAM_VLAN # alias
NS_DEFINE_MULTI_IP_STREAM = 4114 # Variable c_int
FR_DEFINE_MULTI_IP_STREAM = NS_DEFINE_MULTI_IP_STREAM # alias
NS_IPX_STREAM_INFO = 5395 # Variable c_int
FR_IPX_STREAM_INFO = NS_IPX_STREAM_INFO # alias
NS_HIST_RAW_TAGS_INFO = 12294 # Variable c_int
FR_HIST_RAW_TAGS_INFO = NS_HIST_RAW_TAGS_INFO # alias
NS_DEFINE_MULTI_STREAM_BINDING = 5897 # Variable c_int
L3_DEFINE_MULTI_STREAM_BINDING = NS_DEFINE_MULTI_STREAM_BINDING # alias
ATM_MAX_ARRAY_DIM = 2048 # Variable c_int
ATM_MAX_STREAMS = ATM_MAX_ARRAY_DIM # alias
NS_AGGR_LATENCY_PER_STREAM_INFO = 12548 # Variable c_int
FR_AGGR_LATENCY_PER_STREAM_INFO = NS_AGGR_LATENCY_PER_STREAM_INFO # alias
STREAM_PROTOCOL_UDP_VLAN = 7 # Variable c_int
L3_STREAM_UDP_VLAN = STREAM_PROTOCOL_UDP_VLAN # alias
WN_CAPTURE_DETAIL_INFO = L3_CAPTURE_DETAIL_INFO # alias
NS_HIST_SUMMARY_INFO = 12544 # Variable c_int
NS_AGGREGATE_INFO = NS_HIST_SUMMARY_INFO # alias
FR_AGGREGATE_INFO = NS_AGGREGATE_INFO # alias
MAX_SLOTS_HD = 32 # Variable c_int
MAX_MAX_SLOTS = MAX_SLOTS_HD # alias
NS_DEFINE_TCP_STREAM = 4104 # Variable c_int
L3_DEFINE_TCP_STREAM = NS_DEFINE_TCP_STREAM # alias
NS_MOD_IPV6_STREAM_VLAN = 4278 # Variable c_int
L3_MOD_IPV6_STREAM_VLAN = NS_MOD_IPV6_STREAM_VLAN # alias
WAN_DS1_E1_B8ZS_ALARM = 32 # Variable c_int
FR_DS1_E1_B8ZS_ALARM = WAN_DS1_E1_B8ZS_ALARM # alias
NS_MOD_UDP_STREAMS_VLAN = 4235 # Variable c_int
L3_MOD_UDP_STREAMS_VLAN = NS_MOD_UDP_STREAMS_VLAN # alias
NS_HIST_V2_LATENCY_PER_STREAM_INFO = 12296 # Variable c_int
FR_HIST_V2_LATENCY_PER_STREAM_INFO = NS_HIST_V2_LATENCY_PER_STREAM_INFO # alias
NS_ARP_UNRESOLVED = 6147 # Variable c_int
L3_ARP_UNRESOLVED = NS_ARP_UNRESOLVED # alias
NS_MOD_STREAMS_ARRAY = 4176 # Variable c_int
L3_MOD_STREAMS_ARRAY = NS_MOD_STREAMS_ARRAY # alias
NS_DEFINE_MULTI_SMART_TCP_STREAM = 4181 # Variable c_int
L3_DEFINE_MULTI_SMART_TCP_STREAM = NS_DEFINE_MULTI_SMART_TCP_STREAM # alias
NS_DEFINE_802_3_STREAM = 4097 # Variable c_int
FR_DEFINE_802_3_STREAM = NS_DEFINE_802_3_STREAM # alias
NS_AGGR_LATENCY_INFO = 12547 # Variable c_int
FR_AGGR_LATENCY_INFO = NS_AGGR_LATENCY_INFO # alias
STREAM_PROTOCOL_UDPDHCP = 99 # Variable c_int
L3_STREAM_UDPDHCP = STREAM_PROTOCOL_UDPDHCP # alias
WN_CAPTURE_DATA_INFO = L3_CAPTURE_PACKET_DATA_INFO # alias
NS_DEFINE_UDP_STREAM_VLAN = 4103 # Variable c_int
L3_DEFINE_UDP_STREAM_VLAN = NS_DEFINE_UDP_STREAM_VLAN # alias
NS_HIST_LATENCY = 12802 # Variable c_int
L3_HIST_LATENCY = NS_HIST_LATENCY # alias
NS_DEFINE_TCP_IPV6_STREAM_VLAN = 4273 # Variable c_int
L3_DEFINE_TCP_IPV6_STREAM_VLAN = NS_DEFINE_TCP_IPV6_STREAM_VLAN # alias
NS_MOD_IPV6_STREAM = 4262 # Variable c_int
L3_MOD_IPV6_STREAM = NS_MOD_IPV6_STREAM # alias
NS_MOD_UDP_STREAMS = 4228 # Variable c_int
L3_MOD_UDP_STREAMS = NS_MOD_UDP_STREAMS # alias
NS_DEFINE_IP_STREAM_VLAN = 4105 # Variable c_int
L3_DEFINE_IP_STREAM_VLAN = NS_DEFINE_IP_STREAM_VLAN # alias
NS_HIST_V2_LATENCY_PER_STREAM = 12807 # Variable c_int
FR_HIST_V2_LATENCY_PER_STREAM = NS_HIST_V2_LATENCY_PER_STREAM # alias
NS_USB_SET_POWER = 32771 # Variable c_int
L3_USB_SET_POWER = NS_USB_SET_POWER # alias
NS_ARP_TIMES_INFO = 6144 # Variable c_int
L3_ARP_TIMES_INFO = NS_ARP_TIMES_INFO # alias
NS_DEFINE_MULTI_SMARTBITS_STREAM = 4112 # Variable c_int
L3_DEFINE_MULTI_SMARTBITS_STREAM = NS_DEFINE_MULTI_SMARTBITS_STREAM # alias
WAN_E1_HDB3_ENCODING = 1 # Variable c_int
ATM_E1_HDB3_ENCODING = WAN_E1_HDB3_ENCODING # alias
NS_AGGR_LATENCY_DISTRIBUTION_INFO = 12549 # Variable c_int
FR_AGGR_LATENCY_DISTRIBUTION_INFO = NS_AGGR_LATENCY_DISTRIBUTION_INFO # alias
STREAM_PROTOCOL_UDP = 4 # Variable c_int
L3_STREAM_UDP = STREAM_PROTOCOL_UDP # alias
NS_DEFINE_STREAM_BINDING = 5894 # Variable c_int
L3_DEFINE_STREAM_BINDING = NS_DEFINE_STREAM_BINDING # alias
NS_HIST_JITTER_COMBO_INFO = 12298 # Variable c_int
L3_HIST_JITTER_COMBO_INFO = NS_HIST_JITTER_COMBO_INFO # alias
WAN_DS1_D4_LINE_FRAMING = 0 # Variable c_int
FR_DS1_D4_LINE_FRAMING = WAN_DS1_D4_LINE_FRAMING # alias
NS_MOD_UDP_STREAM = 4148 # Variable c_int
L3_MOD_UDP_STREAM = NS_MOD_UDP_STREAM # alias
NS_HIST_V2_LATENCY_INFO = 12295 # Variable c_int
FR_HIST_V2_LATENCY_INFO = NS_HIST_V2_LATENCY_INFO # alias
NS_TX_IPV6_ADDRESS_INFO = 5892 # Variable c_int
L3_TX_IPV6_ADDRESS_INFO = NS_TX_IPV6_ADDRESS_INFO # alias
NS_DEFINE_MULTI_SMARTBITS_128_STREAM = 4211 # Variable c_int
L3_DEFINE_MULTI_SMARTBITS_128_STREAM = NS_DEFINE_MULTI_SMARTBITS_128_STREAM # alias
WAN_E1_BUILDOUT = 20 # Variable c_int
ATM_E1_BUILDOUT = WAN_E1_BUILDOUT # alias
NS_TX_ADDRESS_INFO = 5888 # Variable c_int
L3_TX_ADDRESS_INFO = NS_TX_ADDRESS_INFO # alias
NS_STREAM_TRANSMIT_MODE_INFO = 28933 # Variable c_int
L3_STREAM_TRANSMIT_MODE_INFO = NS_STREAM_TRANSMIT_MODE_INFO # alias
NS_HIST_JITTER_COMBO = 12819 # Variable c_int
L3_HIST_JITTER_COMBO = NS_HIST_JITTER_COMBO # alias
NS_DEFINE_STREAM_MPLS = 4203 # Variable c_int
L3_DEFINE_STREAM_MPLS = NS_DEFINE_STREAM_MPLS # alias
NS_MOD_ICMP_STREAMS = 4231 # Variable c_int
L3_MOD_ICMP_STREAMS = NS_MOD_ICMP_STREAMS # alias
WAN_DS1_B8ZS_ENCODING = 1 # Variable c_int
FR_DS1_B8ZS_ENCODING = WAN_DS1_B8ZS_ENCODING # alias
NS_MOD_UDP_IPV6_STREAM_VLAN = 4280 # Variable c_int
L3_MOD_UDP_IPV6_STREAM_VLAN = NS_MOD_UDP_IPV6_STREAM_VLAN # alias
NS_HIST_V2_LATENCY_DISTRIBUTION = 12818 # Variable c_int
FR_HIST_V2_LATENCY_DISTRIBUTION = NS_HIST_V2_LATENCY_DISTRIBUTION # alias
NS_AGGR_V2_LATENCY_PER_STREAM_INFO = 12552 # Variable c_int
L3_AGGR_V2_LATENCY_PER_STREAM_INFO = NS_AGGR_V2_LATENCY_PER_STREAM_INFO # alias
NS_DEFINE_MULTI_RTP_STREAM_VLAN = 4201 # Variable c_int
L3_DEFINE_MULTI_RTP_STREAM_VLAN = NS_DEFINE_MULTI_RTP_STREAM_VLAN # alias
NS_802_3_STREAM_INFO = 5393 # Variable c_int
FR_802_3_STREAM_INFO = NS_802_3_STREAM_INFO # alias
NS_STREAM_TRANSMIT_MODE = 28932 # Variable c_int
L3_STREAM_TRANSMIT_MODE = NS_STREAM_TRANSMIT_MODE # alias
NS_DEFINE_RTP_STREAM_VLAN = 4200 # Variable c_int
L3_DEFINE_RTP_STREAM_VLAN = NS_DEFINE_RTP_STREAM_VLAN # alias
NS_DEFINE_UDP_IPV6_STREAM = 4258 # Variable c_int
L3_DEFINE_UDP_IPV6_STREAM = NS_DEFINE_UDP_IPV6_STREAM # alias
NS_HIST_ACTIVE_TEST_PREP = 12880 # Variable c_int
L3_HIST_ACTIVE_TEST_PREP = NS_HIST_ACTIVE_TEST_PREP # alias
NS_DEFINE_STREAM_EXTENSION = 4194 # Variable c_int
L3_DEFINE_STREAM_EXTENSION = NS_DEFINE_STREAM_EXTENSION # alias
NS_MOD_ICMP_STREAM = 4193 # Variable c_int
L3_MOD_ICMP_STREAM = NS_MOD_ICMP_STREAM # alias
STREAM_PROTOCOL_TCP_VLAN = 10 # Variable c_int
L3_STREAM_TCP_VLAN = STREAM_PROTOCOL_TCP_VLAN # alias
WAN_DS1_AMI_ENCODING = 0 # Variable c_int
FR_DS1_AMI_ENCODING = WAN_DS1_AMI_ENCODING # alias
NS_MOD_UDP_IPV6_STREAM = 4264 # Variable c_int
L3_MOD_UDP_IPV6_STREAM = NS_MOD_UDP_IPV6_STREAM # alias
PVCAD_INACTIVE = 1
WAN_DS3_LONG_BUILDOUT = 1 # Variable c_int
ATM_DS3_LONG_BUILDOUT = WAN_DS3_LONG_BUILDOUT # alias
VLAN_PRI_7 = 7 # Variable c_int
VLAN_PRI_HIGHEST = VLAN_PRI_7 # alias
NS_MOD_ICMP_IPV6_STREAM_VLAN = 4296 # Variable c_int
L3_MOD_ICMP_IPV6_STREAM_VLAN = NS_MOD_ICMP_IPV6_STREAM_VLAN # alias
NS_MOD_UDPDHCP_STREAMS = 4233 # Variable c_int
L3_MOD_UDPDHCP_STREAMS = NS_MOD_UDPDHCP_STREAMS # alias
NS_HIST_LATENCY_DISTRIBUTION = 12804 # Variable c_int
FR_HIST_LATENCY_DISTRIBUTION = NS_HIST_LATENCY_DISTRIBUTION # alias
NS_AGGR_SEQUENCE_INFO = 12546 # Variable c_int
L3_AGGR_SEQUENCE_INFO = NS_AGGR_SEQUENCE_INFO # alias
FR_STREAM_UDPDHCP = STREAM_PROTOCOL_UDPDHCP # alias
STREAM_PROTOCOL_TCP = 11 # Variable c_int
L3_STREAM_TCP = STREAM_PROTOCOL_TCP # alias
CT_FC = 12 # Variable c_int
CT_MAX_CARD_TYPE = CT_FC # alias
UNI_TMR_TICKS_PER_SEC = 100 # Variable c_int
UNI_TMR_TICK_RESOLUTION = UNI_TMR_TICKS_PER_SEC # alias
NS_HIST_ACTIVE_TEST_EXPRESS_INFO = 12368 # Variable c_int
L3_HIST_ACTIVE_TEST_EXPRESS_INFO = NS_HIST_ACTIVE_TEST_EXPRESS_INFO # alias
NS_MOD_ICMP_IPV6_STREAM = 4293 # Variable c_int
L3_MOD_ICMP_IPV6_STREAM = NS_MOD_ICMP_IPV6_STREAM # alias
NS_MOD_UDPDHCP_STREAM = 4149 # Variable c_int
L3_MOD_UDPDHCP_STREAM = NS_MOD_UDPDHCP_STREAM # alias
NS_HIST_START = 12800 # Variable c_int
FR_HIST_START = NS_HIST_START # alias
L3_AGGR_RAW_TAGS_INFO = NS_AGGR_RAW_TAGS_INFO # alias
L3_DEFINE_MULTI_IP_STREAM = NS_DEFINE_MULTI_IP_STREAM # alias
WAN_DS1_N22X5_DB_BUILDOUT = 9 # Variable c_int
ATM_DS1_N22X5_DB_BUILDOUT = WAN_DS1_N22X5_DB_BUILDOUT # alias
FC_LINK_SPEED_1GIG = 0 # Variable c_int
FC_LINK_COST_1000 = FC_LINK_SPEED_1GIG # alias
STREAM_PROTOCOL_SMART_TCP = 8 # Variable c_int
L3_STREAM_SMART_TCP = STREAM_PROTOCOL_SMART_TCP # alias
WAN_DS1_133_TO_266_BUILDOUT = 3 # Variable c_int
FR_DS1_133_TO_266_BUILDOUT = WAN_DS1_133_TO_266_BUILDOUT # alias
TCP_GET_URL_DISTRIBUTION = 28829 # Variable c_int
TCP_GET_URI_DISTRIBUTION = TCP_GET_URL_DISTRIBUTION # alias
NS_GROUP_SET_GROUP = 28929 # Variable c_int
L3_GROUP_SET_GROUP = NS_GROUP_SET_GROUP # alias
NS_DEFINE_SMART_TCP_STREAM = 4182 # Variable c_int
L3_DEFINE_SMART_TCP_STREAM = NS_DEFINE_SMART_TCP_STREAM # alias
NS_MOD_TCP_STREAM_VLAN = 4179 # Variable c_int
L3_MOD_TCP_STREAM_VLAN = NS_MOD_TCP_STREAM_VLAN # alias
NS_HIST_SEQUENCE_INFO = 12290 # Variable c_int
FR_HIST_SEQUENCE_INFO = NS_HIST_SEQUENCE_INFO # alias
NS_HIST_V2_LATENCY = 12806 # Variable c_int
FR_HIST_V2_LATENCY = NS_HIST_V2_LATENCY # alias
L3_AGGR_MC_LATENCY_PER_STREAM_INFO = NS_AGGR_MC_LATENCY_PER_STREAM_INFO # alias
NS_DEFINE_MULTI_IPX_STREAM = 4115 # Variable c_int
L3_DEFINE_MULTI_IPX_STREAM = NS_DEFINE_MULTI_IPX_STREAM # alias
CM_LAN_3300A = 49 # Variable c_int
CM_LAN_6300A = CM_LAN_3300A # alias
FC_LINK_SPEED_10GIG = 2 # Variable c_int
FC_LINK_COST_100 = FC_LINK_SPEED_10GIG # alias
STREAM_PROTOCOL_SMARTBITS = 0 # Variable c_int
L3_STREAM_SMARTBITS = STREAM_PROTOCOL_SMARTBITS # alias
WAN_DS1_0_TO_133_BUILDOUT = 2 # Variable c_int
FR_DS1_0_TO_133_BUILDOUT = WAN_DS1_0_TO_133_BUILDOUT # alias
SSCOP_TMR_TICKS_PER_SEC = 100 # Variable c_int
SSCOP_TMR_TICK_RESOLUTION = SSCOP_TMR_TICKS_PER_SEC # alias
NS_GROUP_DELETE_GROUP = 28928 # Variable c_int
L3_GROUP_DELETE_GROUP = NS_GROUP_DELETE_GROUP # alias
NS_DEFINE_SMARTBITS_STREAM = 4096 # Variable c_int
L3_DEFINE_SMARTBITS_STREAM = NS_DEFINE_SMARTBITS_STREAM # alias
NS_MOD_802_3_STREAM = 4145 # Variable c_int
L3_MOD_802_3_STREAM = NS_MOD_802_3_STREAM # alias
WAN_DS1_266_TO_399_BUILDOUT = 4 # Variable c_int
ATM_DS1_266_TO_399_BUILDOUT = WAN_DS1_266_TO_399_BUILDOUT # alias
NS_MOD_TCP_STREAMS_VLAN = 4236 # Variable c_int
L3_MOD_TCP_STREAMS_VLAN = NS_MOD_TCP_STREAMS_VLAN # alias
NS_HIST_SEQUENCE = 12801 # Variable c_int
FR_HIST_SEQUENCE = NS_HIST_SEQUENCE # alias
L3_AGGR_LATENCY_PER_STREAM_INFO = NS_AGGR_LATENCY_PER_STREAM_INFO # alias
NS_DEFINE_MULTI_IPV6_STREAM_VLAN = 4275 # Variable c_int
L3_DEFINE_MULTI_IPV6_STREAM_VLAN = NS_DEFINE_MULTI_IPV6_STREAM_VLAN # alias
WAN_DS1_ESF_LINE_FRAMING = 1 # Variable c_int
ATM_DS1_ESF_LINE_FRAMING = WAN_DS1_ESF_LINE_FRAMING # alias
ETMF_TOTAL_LENGTH = 10 # Variable c_int
ETMF_MAX = ETMF_TOTAL_LENGTH # alias
STREAM_PROTOCOL_RTP_VLAN = 14 # Variable c_int
L3_STREAM_RTP_VLAN = STREAM_PROTOCOL_RTP_VLAN # alias
PPP_CONFIG = 20993 # Variable c_int
PPP_SET_CONFIG = PPP_CONFIG # alias
L3_HIST_V2_LATENCY_INFO = NS_HIST_V2_LATENCY_INFO # alias
NS_DEFINE_SMARTBITS_128_STREAM = 4210 # Variable c_int
L3_DEFINE_SMARTBITS_128_STREAM = NS_DEFINE_SMARTBITS_128_STREAM # alias
L3_HIST_V2_LATENCY_PER_STREAM_INFO = NS_HIST_V2_LATENCY_PER_STREAM_INFO # alias
NS_MOD_TCP_STREAMS = 4229 # Variable c_int
L3_MOD_TCP_STREAMS = NS_MOD_TCP_STREAMS # alias
NS_MOD_VFD = 4207 # Variable c_int
L3_MOD_VFD = NS_MOD_VFD # alias
L3_AGGR_LATENCY_INFO = NS_AGGR_LATENCY_INFO # alias
NS_DEFINE_MULTI_IPV6_STREAM = 4259 # Variable c_int
L3_DEFINE_MULTI_IPV6_STREAM = NS_DEFINE_MULTI_IPV6_STREAM # alias
NS_MOD_V2_STREAMS_ARRAY = 39518 # Variable c_int
L3_MOD_V2_STREAMS_ARRAY = NS_MOD_V2_STREAMS_ARRAY # alias
WAN_DS1_E1_YELLOW_ALARM = 8 # Variable c_int
ATM_DS1_E1_YELLOW_ALARM = WAN_DS1_E1_YELLOW_ALARM # alias
VLAN_PRI_0 = 0 # Variable c_int
ETH_VLAN_PRI_LOWEST = VLAN_PRI_0 # alias
STREAM_PROTOCOL_RTP = 13 # Variable c_int
L3_STREAM_RTP = STREAM_PROTOCOL_RTP # alias
ATM_DS1_133_TO_266_BUILDOUT = WAN_DS1_133_TO_266_BUILDOUT # alias
FR_DEFINE_SMARTBITS_STREAM = NS_DEFINE_SMARTBITS_STREAM # alias
L3_AGGREGATE_INFO = NS_AGGREGATE_INFO # alias
LINE_UP = 0 # Variable c_int
PORT_UP = LINE_UP # alias
NS_ENABLE_TAGS_ALL_STREAMS = 6151 # Variable c_int
L3_ENABLE_TAGS_ALL_STREAMS = NS_ENABLE_TAGS_ALL_STREAMS # alias
STREAM_PROTOCOL_ICMP = 9 # Variable c_int
L3_STREAM_ICMP = STREAM_PROTOCOL_ICMP # alias
NS_HIST_RAW_TAGS = 12805 # Variable c_int
FR_HIST_RAW_TAGS = NS_HIST_RAW_TAGS # alias
L3_AGGR_LATENCY_DISTRIBUTION_INFO = NS_AGGR_LATENCY_DISTRIBUTION_INFO # alias
NS_START_ARPS = 16384 # Variable c_int
L3_START_ARPS = NS_START_ARPS # alias
NS_DEFINE_MULTI_ICMP_STREAM_VLAN = 4289 # Variable c_int
L3_DEFINE_MULTI_ICMP_STREAM_VLAN = NS_DEFINE_MULTI_ICMP_STREAM_VLAN # alias
ATM_DS1_E1_B8ZS_ALARM = WAN_DS1_E1_B8ZS_ALARM # alias
NS_RNDIS_MODE_ON = 34048 # Variable c_int
L3_RNDIS_MODE_ON = NS_RNDIS_MODE_ON # alias
WAN_DS1_E1_SEV_ERROR_FRAME_ALARM = 1024 # Variable c_int
ATM_DS1_E1_SEV_ERROR_FRAME_ALARM = WAN_DS1_E1_SEV_ERROR_FRAME_ALARM # alias
FR_E1_BUILDOUT = WAN_E1_BUILDOUT # alias
LINE_DOWN = 1 # Variable c_int
PORT_DOWN = LINE_DOWN # alias
NS_ENABLE_TAG = 6153 # Variable c_int
L3_ENABLE_TAG = NS_ENABLE_TAG # alias
WAN_DS3_SHORT_BUILDOUT = 0 # Variable c_int
ATM_DS3_SHORT_BUILDOUT = WAN_DS3_SHORT_BUILDOUT # alias
NS_DEFINE_RTP_STREAM = 4197 # Variable c_int
L3_DEFINE_RTP_STREAM = NS_DEFINE_RTP_STREAM # alias
NS_MOD_TCP_STREAM = 4152 # Variable c_int
L3_MOD_TCP_STREAM = NS_MOD_TCP_STREAM # alias
NS_MOD_TCP_IPV6_STREAM_VLAN = 4279 # Variable c_int
L3_MOD_TCP_IPV6_STREAM_VLAN = NS_MOD_TCP_IPV6_STREAM_VLAN # alias
NS_MOD_STREAMS_DELTA = 4160 # Variable c_int
L3_MOD_STREAMS_DELTA = NS_MOD_STREAMS_DELTA # alias
NS_HIST_MULTICAST_LATENCY = 12809 # Variable c_int
FR_HIST_MULTICAST_LATENCY = NS_HIST_MULTICAST_LATENCY # alias
NS_MOD_SMART_TCP_STREAM_VLAN = 4215 # Variable c_int
L3_MOD_SMART_TCP_STREAM_VLAN = NS_MOD_SMART_TCP_STREAM_VLAN # alias
NS_MOD_SMART_TCP_STREAMS = 4230 # Variable c_int
L3_MOD_SMART_TCP_STREAMS = NS_MOD_SMART_TCP_STREAMS # alias
NS_DEFINE_MULTI_ICMP_STREAM = 4192 # Variable c_int
L3_DEFINE_MULTI_ICMP_STREAM = NS_DEFINE_MULTI_ICMP_STREAM # alias
WAN_DS1_E1_PLCP_YELLOW_ALARM = 512 # Variable c_int
ATM_DS1_E1_PLCP_YELLOW_ALARM = WAN_DS1_E1_PLCP_YELLOW_ALARM # alias
STREAM_PROTOCOL_IP_VLAN = 6 # Variable c_int
L3_STREAM_IP_VLAN = STREAM_PROTOCOL_IP_VLAN # alias
FR_DEFINE_MULTI_SMARTBITS_STREAM = NS_DEFINE_MULTI_SMARTBITS_STREAM # alias
WAN_DS1_N15_DB_BUILDOUT = 8 # Variable c_int
ATM_DS1_N15_DB_BUILDOUT = WAN_DS1_N15_DB_BUILDOUT # alias
LINE_DISABLED = 2 # Variable c_int
PORT_DISABLED = LINE_DISABLED # alias
NS_MOD_IPX_STREAM = 4147 # Variable c_int
L3_MOD_IPX_STREAM = NS_MOD_IPX_STREAM # alias
FR_DS1_ESF_LINE_FRAMING = WAN_DS1_ESF_LINE_FRAMING # alias
NS_DEFINE_MULTI_VFD = 4206 # Variable c_int
L3_DEFINE_MULTI_VFD = NS_DEFINE_MULTI_VFD # alias
FR_DS1_E1_YELLOW_ALARM = WAN_DS1_E1_YELLOW_ALARM # alias
NS_MOD_TCP_IPV6_STREAM = 4263 # Variable c_int
L3_MOD_TCP_IPV6_STREAM = NS_MOD_TCP_IPV6_STREAM # alias
L3_HIST_V2_LATENCY_PER_STREAM = NS_HIST_V2_LATENCY_PER_STREAM # alias
ILMI_TMR_TICKS_PER_SEC = 100 # Variable c_int
ILMI_TMR_TICK_RESOLUTION = ILMI_TMR_TICKS_PER_SEC # alias
NS_DEFINE_MULTI_ICMP_IPV6_STREAM_VLAN = 4295 # Variable c_int
L3_DEFINE_MULTI_ICMP_IPV6_STREAM_VLAN = NS_DEFINE_MULTI_ICMP_IPV6_STREAM_VLAN # alias
CM_XFP_3731A = 76 # Variable c_int
CT_MAX_CARD_MODELS = CM_XFP_3731A # alias
NS_HIST_LATENCY_PRECISION = 12808 # Variable c_int
L3_HIST_LATENCY_PRECISION = NS_HIST_LATENCY_PRECISION # alias
WAN_DS1_E1_LOCD_ALARM = 1 # Variable c_int
FR_DS1_E1_LOCD_ALARM = WAN_DS1_E1_LOCD_ALARM # alias
NS_DISABLE_TAG = 6154 # Variable c_int
L3_DISABLE_TAG = NS_DISABLE_TAG # alias
L3_HIST_LATENCY_DISTRIBUTION = NS_HIST_LATENCY_DISTRIBUTION # alias
NS_DEFINE_MULTI_UDP_STREAM_VLAN = 4128 # Variable c_int
L3_DEFINE_MULTI_UDP_STREAM_VLAN = NS_DEFINE_MULTI_UDP_STREAM_VLAN # alias
L3_HIST_V2_LATENCY = NS_HIST_V2_LATENCY # alias
NS_DHCP_V2_HOST_INFO = 34580 # Variable c_int
L3_DHCP_V2_HOST_INFO = NS_DHCP_V2_HOST_INFO # alias
NS_DHCP_PORT_SESSION_INFO = 34577 # Variable c_int
L3_DHCP_PORT_SESSION_INFO = NS_DHCP_PORT_SESSION_INFO # alias
NS_DEFINE_MULTI_UDP_STREAM = 4116 # Variable c_int
L3_DEFINE_MULTI_UDP_STREAM = NS_DEFINE_MULTI_UDP_STREAM # alias
NS_DHCP_CONFIG = 34570 # Variable c_int
L3_DHCP_CONFIG = NS_DHCP_CONFIG # alias
NS_HIST_V1_LATENCY_PER_STREAM_INFO = 12304 # Variable c_int
L3_HIST_V1_LATENCY_PER_STREAM_INFO = NS_HIST_V1_LATENCY_PER_STREAM_INFO # alias
NS_MOD_STREAM_BINDING = 5895 # Variable c_int
L3_MOD_STREAM_BINDING = NS_MOD_STREAM_BINDING # alias
NS_DEFINE_UDP_STREAM = 4100 # Variable c_int
L3_DEFINE_UDP_STREAM = NS_DEFINE_UDP_STREAM # alias
STREAM_PROTOCOL_IPX = 3 # Variable c_int
L3_STREAM_IPX = STREAM_PROTOCOL_IPX # alias
FR_HIST_LATENCY_PRECISION = NS_HIST_LATENCY_PRECISION # alias
# GIG_PHY_LOOP_MONITOR_PHY = PHY_LOOP_REMOTE_XCVR # alias
FR_DS1_266_TO_399_BUILDOUT = WAN_DS1_266_TO_399_BUILDOUT # alias
NS_DEFINE_MULTI_802_3_STREAM = 4113 # Variable c_int
L3_DEFINE_MULTI_802_3_STREAM = NS_DEFINE_MULTI_802_3_STREAM # alias
WAN_DS1_E1_OOF_ALARM = 2 # Variable c_int
ATM_DS1_E1_OOF_ALARM = WAN_DS1_E1_OOF_ALARM # alias
FR_DEFINE_MULTI_UDP_STREAM = NS_DEFINE_MULTI_UDP_STREAM # alias
CT_FILTER_MODE_NONE = 0 # Variable c_int
CT_DEFAULT_CAPTURE_FILTER_MODE = CT_FILTER_MODE_NONE # alias
FR_DEFINE_MULTI_IPX_STREAM = NS_DEFINE_MULTI_IPX_STREAM # alias
NS_DEFINE_MULTI_ARP_STREAM = 4118 # Variable c_int
FR_DEFINE_MULTI_ARP_STREAM = NS_DEFINE_MULTI_ARP_STREAM # alias
FR_CRC4_ENABLE_LINE_FRAMING = WAN_DS1_ESF_LINE_FRAMING # alias
FR_CRC4_DISABLE_LINE_FRAMING = WAN_DS1_D4_LINE_FRAMING # alias
NS_DEFINE_MULTI_UDP_IPV6_STREAM_VLAN = 4277 # Variable c_int
L3_DEFINE_MULTI_UDP_IPV6_STREAM_VLAN = NS_DEFINE_MULTI_UDP_IPV6_STREAM_VLAN # alias
NS_HIST_V1_LATENCY_PER_STREAM = 12817 # Variable c_int
L3_HIST_V1_LATENCY_PER_STREAM = NS_HIST_V1_LATENCY_PER_STREAM # alias
FR_AGGR_SEQUENCE_INFO = NS_AGGR_SEQUENCE_INFO # alias
FR_HIST_LATENCY_INFO = NS_HIST_LATENCY_INFO # alias
WAN_DS1_E1_AIS_ALARM = 16 # Variable c_int
ATM_DS1_E1_AIS_ALARM = WAN_DS1_E1_AIS_ALARM # alias
NS_UDP_STREAM_INFO = 5396 # Variable c_int
FR_UDP_STREAM_INFO = NS_UDP_STREAM_INFO # alias
NS_DEFINE_MPLS = 4208 # Variable c_int
L3_DEFINE_MPLS = NS_DEFINE_MPLS # alias
CONTINUOUS_PACKET_MODE = 0 # Variable c_int
FIRST_TRANSMIT_MODE = CONTINUOUS_PACKET_MODE # alias
FC_LINK_SPEED_2GIG = 1 # Variable c_int
FC_LINK_COST_500 = FC_LINK_SPEED_2GIG # alias
WAN_DS1_E1_LOS_ALARM = 4 # Variable c_int
ATM_DS1_E1_LOS_ALARM = WAN_DS1_E1_LOS_ALARM # alias
CM_POS_3505A = 41 # Variable c_int
CM_POS_6505A = CM_POS_3505A # alias
ETH_VLAN_PRI_HIGHEST = VLAN_PRI_7 # alias
FR_DEFINE_MULTI_802_3_STREAM = NS_DEFINE_MULTI_802_3_STREAM # alias
CT_TRAFFIC_DIRECTION_TXRX = 3 # Variable c_int
CT_DEFAULT_DIRECTION = CT_TRAFFIC_DIRECTION_TXRX # alias
MII_CTRL_SPEED = 8192 # Variable c_int
MII_CTRL_SPEED_LSB = MII_CTRL_SPEED # alias
NS_DHCP_STREAM_COUNT_INFO = 34569 # Variable c_int
L3_DHCP_STREAM_COUNT_INFO = NS_DHCP_STREAM_COUNT_INFO # alias
CM_POS_3500A = 30 # Variable c_int
CM_POS_6500A = CM_POS_3500A # alias
NS_DEFINE_MULTI_UDP_IPV6_STREAM = 4261 # Variable c_int
L3_DEFINE_MULTI_UDP_IPV6_STREAM = NS_DEFINE_MULTI_UDP_IPV6_STREAM # alias
CM_LAN_3310A = 50 # Variable c_int
CM_LAN_6310A = CM_LAN_3310A # alias
NS_HIST_TCP_CONNECTION = 12820 # Variable c_int
L3_HIST_TCP_CONNECTION = NS_HIST_TCP_CONNECTION # alias
CM_LAN_3302A = 63 # Variable c_int
CM_LAN_6302A = CM_LAN_3302A # alias
FR_DS1_N15_DB_BUILDOUT = WAN_DS1_N15_DB_BUILDOUT # alias
FR_HIST_LATENCY_DISTRIBUTION_INFO = NS_HIST_LATENCY_DISTRIBUTION_INFO # alias
STREAM_PROTOCOL_ICMP_VLAN = 29 # Variable c_int
L3_STREAM_ICMP_VLAN = STREAM_PROTOCOL_ICMP_VLAN # alias
CM_LAN_3101A = 40 # Variable c_int
CM_LAN_6101A = CM_LAN_3101A # alias
FR_TX_ADDRESS_INFO = NS_TX_ADDRESS_INFO # alias
CM_LAN_3101 = 40 # Variable c_int
CM_LAN_6101 = CM_LAN_3101 # alias
ATM_MAX_CONNECTIONS = ATM_MAX_ARRAY_DIM # alias
ATM_DS1_E1_LOCD_ALARM = WAN_DS1_E1_LOCD_ALARM # alias
CM_POS_3504A = 48 # Variable c_int
CM_POS_6504A = CM_POS_3504A # alias
WAN_DS1_N7X5_DB_BUILDOUT = 7 # Variable c_int
ATM_DS1_N7X5_DB_BUILDOUT = WAN_DS1_N7X5_DB_BUILDOUT # alias
NS_DEFINE_IP_STREAM = 4098 # Variable c_int
FR_DEFINE_IP_STREAM = NS_DEFINE_IP_STREAM # alias
STREAM_PROTOCOL_IP = 2 # Variable c_int
L3_STREAM_IP = STREAM_PROTOCOL_IP # alias
WAN_DS1_E1_PLCP_OOF_ALARM = 128 # Variable c_int
ATM_DS1_E1_PLCP_OOF_ALARM = WAN_DS1_E1_PLCP_OOF_ALARM # alias
WAN_DS1_E1_PLCP_LOF_ALARM = 256 # Variable c_int
ATM_DS1_E1_PLCP_LOF_ALARM = WAN_DS1_E1_PLCP_LOF_ALARM # alias
NS_DEFINE_TCP_STREAM_VLAN = 4177 # Variable c_int
L3_DEFINE_TCP_STREAM_VLAN = NS_DEFINE_TCP_STREAM_VLAN # alias
NS_DHCP_STATS_INFO = 34564 # Variable c_int
L3_DHCP_STATS_INFO = NS_DHCP_STATS_INFO # alias
NS_DEFINE_MULTI_UDPDHCP_STREAM = 4117 # Variable c_int
L3_DEFINE_MULTI_UDPDHCP_STREAM = NS_DEFINE_MULTI_UDPDHCP_STREAM # alias
L3_HIST_SUMMARY_INFO = NS_HIST_SUMMARY_INFO # alias
NS_MOD_ICMP_STREAM_VLAN = 4290 # Variable c_int
L3_MOD_ICMP_STREAM_VLAN = NS_MOD_ICMP_STREAM_VLAN # alias
ATM_DS1_D4_LINE_FRAMING = WAN_DS1_D4_LINE_FRAMING # alias
L3_DEFINE_IP_STREAM = NS_DEFINE_IP_STREAM # alias
ATM_DS1_E1_EXCESS_ZEROS_ALARM = WAN_DS1_E1_EXCESS_ZEROS_ALARM # alias
CM_POS_3502A = 35 # Variable c_int
CM_POS_6502A = CM_POS_3502A # alias
NS_DEFINE_IPX_STREAM = 4099 # Variable c_int
FR_DEFINE_IPX_STREAM = NS_DEFINE_IPX_STREAM # alias
NS_HIST_LATENCY_PER_STREAM_INFO_32 = NS_HIST_V1_LATENCY_PER_STREAM_INFO # alias
MAX_PORTS_HD = 16 # Variable c_int
MAX_MAX_PORTS = MAX_PORTS_HD # alias
NS_DEFINE_SMART_TCP_STREAM_VLAN = 4240 # Variable c_int
L3_DEFINE_SMART_TCP_STREAM_VLAN = NS_DEFINE_SMART_TCP_STREAM_VLAN # alias
NS_DHCP_STATE = 34568 # Variable c_int
L3_DHCP_STATE = NS_DHCP_STATE # alias
NS_DEFINE_MULTI_TCP_STREAM_VLAN = 4178 # Variable c_int
L3_DEFINE_MULTI_TCP_STREAM_VLAN = NS_DEFINE_MULTI_TCP_STREAM_VLAN # alias
L3_HIST_START = NS_HIST_START # alias
NS_STREAM_GROUP_DELETE = 28931 # Variable c_int
L3_STREAM_GROUP_DELETE = NS_STREAM_GROUP_DELETE # alias
FR_STREAM_UDP = STREAM_PROTOCOL_UDP # alias
L3_DEFINE_IPX_STREAM = NS_DEFINE_IPX_STREAM # alias
CM_POS_3500B = 36 # Variable c_int
CM_POS_6500B = CM_POS_3500B # alias
ETDP_FULLCUSTOM = 17 # Variable c_int
MAX_DATA_PATTERN = ETDP_FULLCUSTOM # alias
NS_DEFINE_ARP_STREAM = 4102 # Variable c_int
FR_DEFINE_ARP_STREAM = NS_DEFINE_ARP_STREAM # alias
NS_DHCP_RESTART_ALL = 34579 # Variable c_int
L3_DHCP_RESTART_ALL = NS_DHCP_RESTART_ALL # alias
NS_HIST_SEQUENCE_PREP = 12881 # Variable c_int
L3_HIST_SEQUENCE_PREP = NS_HIST_SEQUENCE_PREP # alias
L3_HIST_V2_LATENCY_DISTRIBUTION = NS_HIST_V2_LATENCY_DISTRIBUTION # alias
NS_DEFINE_MULTI_TCP_IPV6_STREAM_VLAN = 4276 # Variable c_int
L3_DEFINE_MULTI_TCP_IPV6_STREAM_VLAN = NS_DEFINE_MULTI_TCP_IPV6_STREAM_VLAN # alias
NS_MOD_SMART_TCP_STREAM = 4180 # Variable c_int
L3_MOD_SMART_TCP_STREAM = NS_MOD_SMART_TCP_STREAM # alias
NS_HIST_ACTIVE_TEST_INFO = 12288 # Variable c_int
FR_HIST_ACTIVE_TEST_INFO = NS_HIST_ACTIVE_TEST_INFO # alias
NS_STREAM_GROUP_DEFINE = 28930 # Variable c_int
L3_STREAM_GROUP_DEFINE = NS_STREAM_GROUP_DEFINE # alias
FR_STREAM_SMARTBITS = STREAM_PROTOCOL_SMARTBITS # alias
NS_DEFINE_MULTI_IP_STREAM_VLAN = 4121 # Variable c_int
L3_DEFINE_MULTI_IP_STREAM_VLAN = NS_DEFINE_MULTI_IP_STREAM_VLAN # alias
NS_DEFINE_IPV6_STREAM_VLAN = 4272 # Variable c_int
L3_DEFINE_IPV6_STREAM_VLAN = NS_DEFINE_IPV6_STREAM_VLAN # alias
NS_MOD_STREAM_EXTENSION = 4196 # Variable c_int
L3_MOD_STREAM_EXTENSION = NS_MOD_STREAM_EXTENSION # alias
NS_DEFINE_ICMP_STREAM_VLAN = 4288 # Variable c_int
L3_DEFINE_ICMP_STREAM_VLAN = NS_DEFINE_ICMP_STREAM_VLAN # alias
NS_DHCP_RESTART = 34578 # Variable c_int
L3_DHCP_RESTART = NS_DHCP_RESTART # alias
NS_DEFINE_ICMP_STREAM = 4185 # Variable c_int
L3_DEFINE_ICMP_STREAM = NS_DEFINE_ICMP_STREAM # alias
L3_HIST_SEQUENCE_INFO = NS_HIST_SEQUENCE_INFO # alias
NS_MOD_SMARTBITS_STREAMS = 4224 # Variable c_int
L3_MOD_SMARTBITS_STREAMS = NS_MOD_SMARTBITS_STREAMS # alias
FR_E1_HDB3_ENCODING = WAN_E1_HDB3_ENCODING # alias
NS_CAPTURE_OFF_TYPE = 8208 # Variable c_int
L3_CAPTURE_OFF_TYPE = NS_CAPTURE_OFF_TYPE # alias
NS_STREAM_BINDING_INFO = 5896 # Variable c_int
L3_STREAM_BINDING_INFO = NS_STREAM_BINDING_INFO # alias
NS_DEFINE_MULTI_ICMP_IPV6_STREAM = 4292 # Variable c_int
L3_DEFINE_MULTI_ICMP_IPV6_STREAM = NS_DEFINE_MULTI_ICMP_IPV6_STREAM # alias
NS_CAPTURE_ALL_TYPE = 8209 # Variable c_int
L3_CAPTURE_ALL_TYPE = NS_CAPTURE_ALL_TYPE # alias
NS_DEFINE_IPV6_STREAM = 4256 # Variable c_int
L3_DEFINE_IPV6_STREAM = NS_DEFINE_IPV6_STREAM # alias
NS_AGGR_V2_LATENCY_INFO = 12551 # Variable c_int
L3_AGGR_V2_LATENCY_INFO = NS_AGGR_V2_LATENCY_INFO # alias
CM_LAN_3311A = 47 # Variable c_int
CM_LAN_6311A = CM_LAN_3311A # alias
FR_STREAM_IPX = STREAM_PROTOCOL_IPX # alias
NS_STREAM_COUNT_INFO = 5376 # Variable c_int
FR_DEFINED_STREAM_COUNT_INFO = NS_STREAM_COUNT_INFO # alias
GIG_STRUC_CAP_DATA_INFO = 36868 # Variable c_int
GIG_STRUC_CAP_DATA = GIG_STRUC_CAP_DATA_INFO # alias
ECHO_MODE = 4 # Variable c_int
LAST_TRANSMIT_MODE = ECHO_MODE # alias
NS_DHCP_RENEW = 34575 # Variable c_int
L3_DHCP_RENEW = NS_DHCP_RENEW # alias
NS_HIST_SEQUENCE_EXPRESS_INFO = 12370 # Variable c_int
L3_HIST_SEQUENCE_EXPRESS_INFO = NS_HIST_SEQUENCE_EXPRESS_INFO # alias
STREAM_PROTOCOL_8023 = 1 # Variable c_int
FR_STREAM_8023 = STREAM_PROTOCOL_8023 # alias
NS_MOD_SMARTBITS_STREAM = 4144 # Variable c_int
L3_MOD_SMARTBITS_STREAM = NS_MOD_SMARTBITS_STREAM # alias
L3_STREAM_8023 = STREAM_PROTOCOL_8023 # alias
FR_STREAM_IP = STREAM_PROTOCOL_IP # alias
NS_MOD_ARP_STREAM = 4150 # Variable c_int
FR_MOD_ARP_STREAM = NS_MOD_ARP_STREAM # alias
FR_MOD_802_3_STREAM = NS_MOD_802_3_STREAM # alias
FR_HIST_SUMMARY_INFO = NS_HIST_SUMMARY_INFO # alias
ATM_DS1_AMI_ENCODING = WAN_DS1_AMI_ENCODING # alias
NS_VOICE_TEST_SETUP = 4204 # Variable c_int
L3_VOICE_TEST_SETUP = NS_VOICE_TEST_SETUP # alias
NS_HIST_LATENCY_PER_STREAM_INFO = 12292 # Variable c_int
FR_HIST_LATENCY_PER_STREAM_INFO = NS_HIST_LATENCY_PER_STREAM_INFO # alias
NS_DHCP_RELEASE_ADDRESS_ALL = 34563 # Variable c_int
L3_DHCP_RELEASE_ADDRESS_ALL = NS_DHCP_RELEASE_ADDRESS_ALL # alias
NS_HIST_LATENCY_PER_STREAM = 12803 # Variable c_int
FR_HIST_LATENCY_PER_STREAM = NS_HIST_LATENCY_PER_STREAM # alias
L3_HIST_SEQUENCE = NS_HIST_SEQUENCE # alias
FR_HIST_LATENCY = NS_HIST_LATENCY # alias
NS_MOD_SMARTBITS_128_STREAM = 4153 # Variable c_int
L3_MOD_SMARTBITS_128_STREAM = NS_MOD_SMARTBITS_128_STREAM # alias
WAN_E1_AMI_ENCODING = 0 # Variable c_int
FR_E1_AMI_ENCODING = WAN_E1_AMI_ENCODING # alias
NS_STOP_ARPS = 34571 # Variable c_int
L3_STOP_ARPS = NS_STOP_ARPS # alias
NS_DUP_STREAM = 4129 # Variable c_int
FR_DUP_STREAM = NS_DUP_STREAM # alias
NS_DHCP_RELEASE_ADDRESS = 34562 # Variable c_int
L3_DHCP_RELEASE_ADDRESS = NS_DHCP_RELEASE_ADDRESS # alias
L3_HIST_RAW_TAGS_INFO = NS_HIST_RAW_TAGS_INFO # alias
NS_MOD_802_3_STREAMS = 4225 # Variable c_int
L3_MOD_802_3_STREAMS = NS_MOD_802_3_STREAMS # alias
NS_MOD_RTP_STREAM_VLAN = 4202 # Variable c_int
L3_MOD_RTP_STREAM_VLAN = NS_MOD_RTP_STREAM_VLAN # alias
NS_SMARTBITS_STREAM_INFO = 5384 # Variable c_int
FR_SMARTBITS_STREAM_INFO = NS_SMARTBITS_STREAM_INFO # alias
NS_DEFINE_ICMP_IPV6_STREAM_VLAN = 4294 # Variable c_int
L3_DEFINE_ICMP_IPV6_STREAM_VLAN = NS_DEFINE_ICMP_IPV6_STREAM_VLAN # alias
CM_LAN_3301A = 42 # Variable c_int
CM_LAN_6301A = CM_LAN_3301A # alias
NS_CAPTURE_PACKET_INFO = 8193 # Variable c_int
FR_CAPTURE_PACKET_INFO = NS_CAPTURE_PACKET_INFO # alias
NS_DEFINE_TCP_IPV6_STREAM = 4257 # Variable c_int
L3_DEFINE_TCP_IPV6_STREAM = NS_DEFINE_TCP_IPV6_STREAM # alias
NS_V2_STREAM_INFO = 5456 # Variable c_int
L3_V2_STREAM_INFO = NS_V2_STREAM_INFO # alias
L3_HIST_RAW_TAGS = NS_HIST_RAW_TAGS # alias
ATM_DS1_B8ZS_ENCODING = WAN_DS1_B8ZS_ENCODING # alias
SOCK_PORT = 2
NS_MOD_RTP_STREAMS_VLAN = 4237 # Variable c_int
L3_MOD_RTP_STREAMS_VLAN = NS_MOD_RTP_STREAMS_VLAN # alias
FR_DS1_N7X5_DB_BUILDOUT = WAN_DS1_N7X5_DB_BUILDOUT # alias
NS_SET_STREAM_STATE = 6146 # Variable c_int
L3_SET_STREAM_STATE = NS_SET_STREAM_STATE # alias
PVCAD_RUNNING = 3
FR_MOD_UDP_STREAM = NS_MOD_UDP_STREAM # alias
NS_DEFINE_ICMP_IPV6_STREAM = 4291 # Variable c_int
L3_DEFINE_ICMP_IPV6_STREAM = NS_DEFINE_ICMP_IPV6_STREAM # alias
L3_HIST_ACTIVE_TEST_INFO = NS_HIST_ACTIVE_TEST_INFO # alias
NS_USB_GET_USB_INFO = 32770 # Variable c_int
L3_USB_GET_USB_INFO = NS_USB_GET_USB_INFO # alias
FR_CAPTURE_PACKET_DATA_INFO = NS_CAPTURE_PACKET_DATA_INFO # alias
NS_DHCP_PORT_COUNTER_INFO = 34576 # Variable c_int
L3_DHCP_PORT_COUNTER_INFO = NS_DHCP_PORT_COUNTER_INFO # alias
L3_HIST_MULTICAST_LATENCY = NS_HIST_MULTICAST_LATENCY # alias
COMM_PORT = 1
NS_MOD_RTP_STREAMS = 4232 # Variable c_int
L3_MOD_RTP_STREAMS = NS_MOD_RTP_STREAMS # alias
FR_DS1_N22X5_DB_BUILDOUT = WAN_DS1_N22X5_DB_BUILDOUT # alias
NS_SET_START_STREAM = 6149 # Variable c_int
L3_SET_START_STREAM = NS_SET_START_STREAM # alias
PVCAD_CHECKING_VCCS = 2
FR_MOD_STREAMS_DELTA = NS_MOD_STREAMS_DELTA # alias
FR_PVC_RET_ADMIN_STATUS = 3 # Variable c_int
WN_PVC_RET_ADMIN_STATUS = FR_PVC_RET_ADMIN_STATUS # alias
L3_DEFINE_802_3_STREAM = NS_DEFINE_802_3_STREAM # alias
L3_CAPTURE_COUNT_INFO = 39329 # Variable c_int
WN_CAPTURE_COUNT_INFO = L3_CAPTURE_COUNT_INFO # alias
L3_CAPTURE_SETUP = 4183 # Variable c_int
WN_CAPTURE_CFG = L3_CAPTURE_SETUP # alias
CM_LAN_3201B = 38 # Variable c_int
CM_LAN_6201B = CM_LAN_3201B # alias
VLAN_PRI_LOWEST = VLAN_PRI_0 # alias
NS_CAPTURE_COUNT_INFO = 39330 # Variable c_int
FR_CAPTURE_COUNT_INFO = NS_CAPTURE_COUNT_INFO # alias
NS_USB_MODE_ON = 32768 # Variable c_int
L3_USB_MODE_ON = NS_USB_MODE_ON # alias
NS_DISABLE_TAGS_ALL_STREAMS = 6152 # Variable c_int
L3_DISABLE_TAGS_ALL_STREAMS = NS_DISABLE_TAGS_ALL_STREAMS # alias
NS_DHCP_HOST_INFO = 34565 # Variable c_int
L3_DHCP_HOST_INFO = NS_DHCP_HOST_INFO # alias
NS_HIST_LATENCY_PER_STREAM_32 = NS_HIST_V1_LATENCY_PER_STREAM # alias
ATM_DS1_533_TO_655_BUILDOUT = WAN_DS1_533_TO_655_BUILDOUT # alias
NS_HIST_MC_LATENCY_PER_STREAM_INFO = 12297 # Variable c_int
L3_HIST_MC_LATENCY_PER_STREAM_INFO = NS_HIST_MC_LATENCY_PER_STREAM_INFO # alias
MAX_HUBS_HD = 4 # Variable c_int
MAX_MAX_HUBS = MAX_HUBS_HD # alias
INVALID_LINK_PORT = 0
NS_MOD_RTP_STREAM = 4199 # Variable c_int
L3_MOD_RTP_STREAM = NS_MOD_RTP_STREAM # alias
NS_SET_ARP_GAP = 6150 # Variable c_int
L3_SET_ARP_GAP = NS_SET_ARP_GAP # alias
NS_VFD_INFO = 5457 # Variable c_int
L3_VFD_INFO = NS_VFD_INFO # alias
FR_MOD_STREAMS_ARRAY = NS_MOD_STREAMS_ARRAY # alias
L3_DEFINED_STREAM_COUNT_INFO = NS_STREAM_COUNT_INFO # alias
NS_DHCP_V2_EXTENDED_HOST_INFO = 34581 # Variable c_int
L3_DHCP_V2_EXTENDED_HOST_INFO = NS_DHCP_V2_EXTENDED_HOST_INFO # alias
NS_TX_IPV6_ADDRESS = 5890 # Variable c_int
L3_TX_IPV6_ADDRESS = NS_TX_IPV6_ADDRESS # alias
CM_LAN_3201A = 32 # Variable c_int
CM_LAN_6201A = CM_LAN_3201A # alias
ATM_DS1_0_TO_133_BUILDOUT = WAN_DS1_0_TO_133_BUILDOUT # alias
FR_ARP_TIMES_INFO = NS_ARP_TIMES_INFO # alias
NS_USB_MODE_OFF = 32769 # Variable c_int
L3_USB_MODE_OFF = NS_USB_MODE_OFF # alias
L3_STREAM_INFO = 5392 # Variable c_int
WN_STREAM_CFG_INFO = L3_STREAM_INFO # alias
NS_DHCP_GET_ADDRESS_ALL = 34561 # Variable c_int
L3_DHCP_GET_ADDRESS_ALL = NS_DHCP_GET_ADDRESS_ALL # alias
STREAM_PROTOCOL_PPP = 12 # Variable c_int
L3_STREAM_PPP = STREAM_PROTOCOL_PPP # alias
FR_DS1_E1_AIS_ALARM = WAN_DS1_E1_AIS_ALARM # alias
NS_MOD_MPLS = 4209 # Variable c_int
L3_MOD_MPLS = NS_MOD_MPLS # alias
NS_RTP_COUNTER_INFO = 5401 # Variable c_int
L3_RTP_COUNTER_INFO = NS_RTP_COUNTER_INFO # alias
PVCAD_DOWN = 0
FR_MOD_SMARTBITS_STREAM = NS_MOD_SMARTBITS_STREAM # alias
NS_CAPTURE_TRIGGERS_TYPE = 8212 # Variable c_int
L3_CAPTURE_TRIGGERS_TYPE = NS_CAPTURE_TRIGGERS_TYPE # alias
CM_LAN_3200 = 27 # Variable c_int
CM_LAN_6200 = CM_LAN_3200 # alias
NS_ARP_STREAM_INFO = 5398 # Variable c_int
FR_ARP_STREAM_INFO = NS_ARP_STREAM_INFO # alias
NS_DEFINE_MULTI_RTP_STREAM = 4198 # Variable c_int
L3_DEFINE_MULTI_RTP_STREAM = NS_DEFINE_MULTI_RTP_STREAM # alias
NS_DHCP_GET_ADDRESS = 34560 # Variable c_int
L3_DHCP_GET_ADDRESS = NS_DHCP_GET_ADDRESS # alias
L3_HIST_LATENCY_PER_STREAM_INFO_32 = NS_HIST_LATENCY_PER_STREAM_INFO_32 # alias
NS_MOD_IP_STREAM_VLAN = 4137 # Variable c_int
L3_MOD_IP_STREAM_VLAN = NS_MOD_IP_STREAM_VLAN # alias
NS_MOD_IP_STREAM = 4146 # Variable c_int
FR_MOD_IP_STREAM = NS_MOD_IP_STREAM # alias
NS_CAPTURE_SPECIAL_TYPE = 8211 # Variable c_int
L3_CAPTURE_SPECIAL_TYPE = NS_CAPTURE_SPECIAL_TYPE # alias
CM_LAN_3101B = 68 # Variable c_int
CM_LAN_6101B = CM_LAN_3101B # alias
FR_AGGR_V2_LATENCY_PER_STREAM_INFO = NS_AGGR_V2_LATENCY_PER_STREAM_INFO # alias
NS_TX_IPV6_PROTOCOL = 5891 # Variable c_int
L3_TX_IPV6_PROTOCOL = NS_TX_IPV6_PROTOCOL # alias
FR_PVC_RET_CONF_STATUS = 2 # Variable c_int
WN_PVC_RET_CONF_STATUS = FR_PVC_RET_CONF_STATUS # alias
NS_DHCP_EXTENDED_HOST_INFO = 34566 # Variable c_int
L3_DHCP_EXTENDED_HOST_INFO = NS_DHCP_EXTENDED_HOST_INFO # alias
L3_HIST_LATENCY_PER_STREAM_INFO = NS_HIST_LATENCY_PER_STREAM_INFO # alias
NS_MOD_IP_STREAMS_VLAN = 4234 # Variable c_int
L3_MOD_IP_STREAMS_VLAN = NS_MOD_IP_STREAMS_VLAN # alias
FR_PVC_STATUS_BITMAP_LEN = 128 # Variable c_int
WN_PVC_STATUS_BITMAP_LEN = FR_PVC_STATUS_BITMAP_LEN # alias
FR_DS1_E1_SEV_ERROR_FRAME_ALARM = WAN_DS1_E1_SEV_ERROR_FRAME_ALARM # alias
NS_STREAM_EXTENSION_INFO = 1824 # Variable c_int
L3_READ_STREAM_EXTENSION = NS_STREAM_EXTENSION_INFO # alias
FR_MOD_IPX_STREAM = NS_MOD_IPX_STREAM # alias
NS_DEFINE_MULTI_TCP_STREAM = 4120 # Variable c_int
L3_DEFINE_MULTI_TCP_STREAM = NS_DEFINE_MULTI_TCP_STREAM # alias
FR_AGGR_V2_LATENCY_INFO = NS_AGGR_V2_LATENCY_INFO # alias
NS_DHCP_ACTION = 34567 # Variable c_int
L3_DHCP_ACTION = NS_DHCP_ACTION # alias
NS_DHCP_CONFIG_INFO = 34574 # Variable c_int
L3_DHCP_CONFIG_INFO = NS_DHCP_CONFIG_INFO # alias
L3_HIST_LATENCY_PER_STREAM_32 = NS_HIST_LATENCY_PER_STREAM_32 # alias
NS_MOD_IP_STREAMS = 4226 # Variable c_int
L3_MOD_IP_STREAMS = NS_MOD_IP_STREAMS # alias
FR_DS1_E1_OOF_ALARM = WAN_DS1_E1_OOF_ALARM # alias
NS_MULTICAST_COUNTER_INFO = 12816 # Variable c_int
L3_MULTICAST_COUNTER_INFO = NS_MULTICAST_COUNTER_INFO # alias
NS_DEFINE_VFD = 4205 # Variable c_int
L3_DEFINE_VFD = NS_DEFINE_VFD # alias
FR_DEFINE_UDP_STREAM = NS_DEFINE_UDP_STREAM # alias
NS_DEFINE_UDP_IPV6_STREAM_VLAN = 4274 # Variable c_int
L3_DEFINE_UDP_IPV6_STREAM_VLAN = NS_DEFINE_UDP_IPV6_STREAM_VLAN # alias
FR_PVC_RET_ACTIVE_STATUS = 1 # Variable c_int
WN_PVC_RET_ACTIVE_STATUS = FR_PVC_RET_ACTIVE_STATUS # alias
ATM_DS1_399_TO_533_BUILDOUT = WAN_DS1_399_TO_533_BUILDOUT # alias
L3_HIST_LATENCY_PER_STREAM = NS_HIST_LATENCY_PER_STREAM # alias
L3_MOD_IP_STREAM = NS_MOD_IP_STREAM # alias
FR_DS1_E1_LOS_ALARM = WAN_DS1_E1_LOS_ALARM # alias
MAX_AGENT_LEN = 128 # Variable c_int
ETMAXCOM = 512 # Variable c_int
FR_NRZI_ENCODE = 2 # Variable c_int
GIG_PHY_LOOP_LOCAL_PCS = 9 # Variable c_int
NS_STREAM_MULTI_CONFIG = 39523 # Variable c_int
POS_LOOPBACK_MODE_MONITOR_PHY = 5 # Variable c_int
L3_STREAM_128_INFO = 4213 # Variable c_int
CAPTURE_ERRS_RXTRIG = 65535 # Variable c_int
SOCKET_RECONNECT_FAIL = -1004 # Variable c_int
ATM2_SAR_FPGA_VERSION = 2 # Variable c_int
PPP_OE_PEER_IPV6_ADDR = 35 # Variable c_int
INVALID_ICMP_CODE = 4 # Variable c_int
ACTIVE_HUB_NOT_INITIALIZED = -11 # Variable c_int
WN_CHAN_ATTR_MOD_CFG = 6053 # Variable c_int
ETH_PHY_LINK_PARTNER_REMOTE_FAULT = 4194304 # Variable c_int
DOT1X_SUPPLICANT_RETRY_COUNT = 9 # Variable c_int
ATM_CONN_MODIFY = 701 # Variable c_int
XENPAK_OPTICAL_SC_TYPE = 1 # Variable c_int
ATM_E3_PLCP_LINE_CELL_RATE = 72000 # Variable c_long
ATM_LOOP_TIMED_CLOCK = 1 # Variable c_int
PPP_STATUS_PEER_IFACE_ID = 20 # Variable c_int
ATTRIB_SPEED_622MB = 24 # Variable c_int
RESET_STACK = 2147483648L # Variable c_uint
ATM_COMP2_ONLY = 1 # Variable c_int
FRAME_LLC_CONTROL = 5 # Variable c_int
NS_EN_RUNTIME_TOTAL_LATENCY_INDEX = 0 # Variable c_int
GIG_STRUC_MAC_CONFIG = 36926 # Variable c_int
FR_VFD_INCREASING = 2 # Variable c_int
XENPAK_NVR_FIBER_TYPE = 29 # Variable c_int
CAUSE_LOC_NET_BEYOND = 7 # Variable c_int
FC_FSPF_CONFIG = 13648 # Variable c_int
TR_SPEED_4MBITS = 0 # Variable c_int
SYNC_GPS_MASTER = 1 # Variable c_int
L3_DHCP_STATE_REBOOT = 3 # Variable c_int
SMB_STD_ERR_COLLISION = 1024 # Variable c_long
NS_CAPTURE_START = 39335 # Variable c_int
FC_MOD_STREAM = 13602 # Variable c_int
CT_NOT_PRESENT = 0 # Variable c_int
ETDP_F0F0 = 5 # Variable c_int
ROUTER_DISCOVERY_COMPLETED = 2 # Variable c_int
FR_GROUP_STEP_CMD = 102 # Variable c_int
PET_WARN = 4 # Variable c_int
FRAME_FRAGMENTS_OFFSET = 60 # Variable c_int
LOGFILE_SIZE_512 = 512 # Variable c_int
NS_EN_RUNTIME_MIN_LATENCY = 2 # Variable c_int
AT_PATH_SIGNAL_LABEL_PPP = 22 # Variable c_int
XFP_CDR_LOOPBACK_MODE_SUPPORTED = 1 # Variable c_int
PPP_DEL_ALL = 21011 # Variable c_int
WN_PVC_FRM_LEN_DFLT = 1600 # Variable c_int
C_DISABLE = 0 # Variable c_int
ATM_CALL_PARAM_CALL_LENGTH_RND_DELTA = 17 # Variable c_int
WN_PVC_MOD_CFG = 6084 # Variable c_int
ATM_CONNECTIONEX = 200 # Variable c_int
NS_MULTI_IPV4_PING_REQUESTS_RX = 42 # Variable c_int
NS_WIS_SECTION_LOF_ALARM = 4 # Variable c_int
ATM_FEATURES_PER_PORT_BURST = 4 # Variable c_int
L3_IGMP_JOIN_LEAVE_TIMESTAMP_INFO = 28712 # Variable c_int
FST_PROTOCOL_PARAMETERS = 1289 # Variable c_int
HTLED_TX_PAUSE = 1024 # Variable c_long
CA_CAN_CAPTURE = 524288 # Variable c_long
FR_PVC_DELETE_ALL = 4 # Variable c_int
FR_CARD_CPE = 0 # Variable c_int
TCP_HTTP_STOP_VERIFICATION = 28769 # Variable c_int
NS_EN_RUNTIME_TOTAL_FRAMES = 8 # Variable c_int
ETH_VLAN_CFI_RIF_ABSENT = 0 # Variable c_int
ATM_SSCOP = 709 # Variable c_int
PPP_MAX_TERMINATE = 5 # Variable c_int
CA_HAS_DEBUG_MONITOR = 65536 # Variable c_long
POS_SPEED_OC192 = 16 # Variable c_int
CONTROLLER_SMB2000 = 3 # Variable c_int
WN_TRIG_COMP1_AND_COMP2 = 3 # Variable c_int
FR_ETSTAT_TRIGLED = 8 # Variable c_int
XENPAK_NVR_TRANSCEIVER_TYPE = 11 # Variable c_int
WN_DS1_E1_AIS_ALARM = 16 # Variable c_int
XENPAK_OPTICAL_MU_TYPE = 4 # Variable c_int
MPLS_LSP_NOT_INITIALIZED = 1 # Variable c_int
USE_EUI_64 = 0 # Variable c_int
IGMPV3_FORCE_IGMPV2_LEAVES = 128 # Variable c_int
ETBNC_MAX = 27 # Variable c_int
NS_MULTI_RX_BYTES = 5 # Variable c_int
XFP_IDENTIFIER_X2 = 10 # Variable c_int
ATM_B_BC_TYPE_NONE = 0 # Variable c_int
CONTROLLER_SMB1000 = 2 # Variable c_int
CAUSE_ACCESS_INF_DISC = 43 # Variable c_int
NS_PMC_FLASH_MEM_TEST_INFO = 26119 # Variable c_int
TCP_CLEAR_STREAM = 28771 # Variable c_int
MAX_URL = 20 # Variable c_int
L4MS_FIELD_TCP_LENGTH = 27 # Variable c_int
MAX_URI = 20 # Variable c_int
HIST_COMBO_PER_STREAM_INFO = 1 # Variable c_int
L3_USB_OFF = 1 # Variable c_int
TCP_ARP_ALL = 28690 # Variable c_int
NS_ALTERNATE_KEY_HASH_CONFIG_INFO = 39425 # Variable c_int
ATM_MAX_PORT_BURST_SIZE = 4294967295L # Variable c_uint
STREAM_PROTOCOL_TCP_PPPOAOE = 28 # Variable c_int
CAUSE_MSG_INV_OR_NOT_AVAIL = 97 # Variable c_int
PORT_READY_TO_TEST = 512 # Variable c_int
NS_MULTI_RX_TRIGGER = 7 # Variable c_int
PPP_NCPS_STARTING = 1 # Variable c_int
PET_SIG_STATE_CHANGE = 4096 # Variable c_int
MAX_TFOM_LIMIT = 9 # Variable c_int
PPP_CHAPMD5 = 5 # Variable c_int
TR_MAC_RXCONGESTED = 32768 # Variable c_long
WN_DS3_CHANNELIZED = 0 # Variable c_int
FRAME_WINDOW_SIZE = 79 # Variable c_int
FR_IP_SUBNET_DEREG = 26 # Variable c_int
WN_LMI_DEL_ALL = 6015 # Variable c_int
PPP_STATUS_PPPOE_DEST_MAC = 17 # Variable c_int
PORT_TYPE_NOT_REGISTERED = 21 # Variable c_int
NS_HIST_V3_LATENCY_DISTRIBUTION_INFO = 12300 # Variable c_int
HUB_GROUP_INDEPENDENT_ACTION = 1 # Variable c_int
NS_MULTI_COUNTER_INFO = 39467 # Variable c_int
ATM2_TXD_FPGA_VERSION = 4 # Variable c_int
MII_AN_REMOTE_FAULT = 8192 # Variable c_int
WN_LMI_COPY_CFG = 6011 # Variable c_int
AT_RX_CT_PROTOCOL_AAL5 = 259 # Variable c_int
PPP_STATUS_STREAM_INDEX = 0 # Variable c_int
FAMILY_SMB6000C = 4 # Variable c_int
AT_CELL_SCRAMBLING_PAYLOAD = 2 # Variable c_int
NS_WIS_INTERNAL_TX_CLOCK = 0 # Variable c_int
XFP_TRANSCEIVER_S_64_3a = 16 # Variable c_int
XFP_TRANSCEIVER_S_64_3b = 8 # Variable c_int
LOGFILE_CLOSE = 2 # Variable c_int
FR_T1E1_LINE = 113 # Variable c_int
FR_E1_120_OHM_HIRL = 4 # Variable c_int
ATM_DROP_ERRORED_CELLS = 0 # Variable c_int
TCP_FLAG_PSH = 8 # Variable c_int
CT_FASTX = 3 # Variable c_int
LOGFILE_CREATE_OVERWRITE_ON_FULL = 1 # Variable c_int
TRFC_PCF_BEACON = 2 # Variable c_int
POS_SONET_PAYLOAD_CONFIG = 24854 # Variable c_int
NS_VFD_DECR = 2 # Variable c_int
MAX_MOD_SUPPLICANT_ARRAY = 20000 # Variable c_int
NS_IGMP_VLAN_TIMESTAMP_INFO = 28714 # Variable c_int
ATM_LED_STATE_SAAL_UP = 1024 # Variable c_int
ERROR_SMARTCARD_INIT_FAILED = -25 # Variable c_int
IGMPV3_EXCLUDE_FILTER_MODE = 1 # Variable c_int
NS_ALTERNATE_KEY_HASH_CONFIG = 39404 # Variable c_int
WN_CARD_CAPABILITY_INFO = 6200 # Variable c_int
MLDV1_START_LISTEN = 1 # Variable c_int
ATM_DS3_E3_PLCP_YELLOW_ALARM = 512 # Variable c_int
CM_ST_6410 = 4 # Variable c_int
ATM_CONN_MODIFY_ARRAY = 702 # Variable c_int
NS_MULTI_HW_TX_FRAMES = 61 # Variable c_int
PET_SSCOP_HEADLINES = 4 # Variable c_int
NS_VFD1_CONFIG = 22 # Variable c_int
L3MS_FIELD_FRAMELEN = 10 # Variable c_int
ITR_LINEERRORS = 34 # Variable c_int
POS_CARD_BASE = 24832 # Variable c_int
ATM_MASK = 524287 # Variable c_long
CAUSE_IE_CONTENT_ERROR = 100 # Variable c_int
ATM_TD_QUAL_PEAK_RATES = 0 # Variable c_int
NO_CLOSE = 0 # Variable c_int
NS_TRIGGER1_ONLY = 1 # Variable c_int
FR_TX_SINGLE_BURST = 1 # Variable c_int
ETBNC_20MHZINV = 25 # Variable c_int
PVC_END2END_UP_STATUS = 2 # Variable c_int
HUB_ACT_AS_LINK_UNIT = 1 # Variable c_int
L4MS_FIELD_VLANID = 23 # Variable c_int
WN_TX_SINGLE_BURST = 1 # Variable c_int
CLASS_OF_SERVICE_3 = 1 # Variable c_int
XENPAK_LASI_TX_ALARM_ENABLE = 1 # Variable c_int
NS_PROT_RATES = 39466 # Variable c_int
XENPAK_UNSPECIFIED_TYPE = 0 # Variable c_int
L3_IGMP_LEAVE = 28711 # Variable c_int
NS_SONET_CONFIG = 39326 # Variable c_int
NS_LAT_SCALE_100_NANOSECOND = 1 # Variable c_int
XFP_IDENTIFIER_XFF = 7 # Variable c_int
FR_STATUS_EIA_LLB = 8388608 # Variable c_long
AT_VC_MODIFY = 39174 # Variable c_int
FC_COMMIT = 13581 # Variable c_int
ATM_CALL_PARAM_CALL_LOG_EVENTS = 12 # Variable c_int
XFP_IDENTIFIER_XFP = 6 # Variable c_int
NS_HIST_LATENCY_PRECISION_INFO = 12289 # Variable c_int
MPLS_RSVP_OPAQUE = 1 # Variable c_int
STR_ENCAP_TYPE_LLC_PPPOE = 6 # Variable c_int
IATM_CELL_ERROR_RATIO = 41 # Variable c_int
FC_GET_TX_MODE = 13601 # Variable c_int
GRE_PAYLOAD_IPX = 33079 # Variable c_int
SSCOP_STATE_IN_RECOV_PEND = 9 # Variable c_int
PPP_PEER_AUTH_PW = 9 # Variable c_int
DAD_FAILED = 2 # Variable c_int
ATM_STR_ACTION_START = 3 # Variable c_int
PRODUCTION_RELEASE = 0 # Variable c_int
AT_AAL5 = 5 # Variable c_int
NS_DOT1X_SUPPLICANT_PORT_CONFIG_INFO = 39484 # Variable c_int
PPP_OE_PADR_SENT = 3 # Variable c_int
UNI_DEFAULT_TMR_T303 = 400 # Variable c_int
ATM_STR_PARAM_SIG_BW_MBS_01 = 16 # Variable c_int
MLDV2_INCLUDE_FILTER_MODE = 0 # Variable c_int
FR_STATUS_EIA_RDL = 4194304 # Variable c_long
SPEED_155MHZ = 16 # Variable c_int
NS_IPV4_PROTOCOL_HEADER_INFO = 39517 # Variable c_int
DOT1X_SUPPLICANT_AUTHENTICATED = 7 # Variable c_int
SPEED_4MHZ = 1 # Variable c_int
ATM_SAR_IMAGE_CHECK_FAILURE = 4 # Variable c_int
XFP_TRANSCEIVER_L_64_3 = 8 # Variable c_int
PPP_STATS_QUERY = 21014 # Variable c_int
ET_CMDLOG_APPEND = 8 # Variable c_long
PPP_STATUS_QUERY = 21016 # Variable c_int
COMMAND_MODE_LOG_AND_SEND = 0 # Variable c_int
HTLED_MGMTLOFGREEN = 8 # Variable c_long
L3_TX_STACK = 32 # Variable c_long
NS_SIGNAL_SUBPROCESS = 20523 # Variable c_int
SYNC_INOUT_SLAVE = 4 # Variable c_int
GIG_AFN_HALF_DUPLEX = 64 # Variable c_int
NS_CAPTURE_SETUP = 39323 # Variable c_int
GIG_STRUC_BG1_READBACK = 36894 # Variable c_int
ETH_WRITE_MII = 20484 # Variable c_int
INHIBIT_LATENCY_COUNTER_RESET = 1 # Variable c_int
L4MS_FIELD_TCP_SEQUENCE = 24 # Variable c_int
GIG_STRUC_TEST_RX_LOOPBACK = 36914 # Variable c_int
CAPTURE_EVENTS_DATA_INTEGRITY_ERROR = 32 # Variable c_int
XFP_AUX_MONITORING_MINUS_5_2V_SUPPLY_CURRENT = 15 # Variable c_int
L3MS_FIELD_RANDOM_BG_ENABLE = 57 # Variable c_int
XENPAK_NVR_MEMORY_USED = 3 # Variable c_int
PPP_LCP_IPCP_STOPPING = 5 # Variable c_int
NS_MULTI_RX_OVERSIZE = 31 # Variable c_int
NS_PATH_SIGNAL_LABEL_HDLC = 207 # Variable c_int
DOT1X_SUPPLICANT_AUTHENTICATION_ADDR = 11 # Variable c_int
PPP_STATUS_MTU = 11 # Variable c_int
NON_BLOCKING_RESPONSE_ERROR = -42 # Variable c_int
FC_LOG_LEVEL_WARNING = 5 # Variable c_int
IN_SVC_CONN_AS_CLIP_OR_LANE = 2 # Variable c_int
FR_LINE_SPEED_1408000L = 1408000 # Variable c_long
HTLED_COLLRED = 4 # Variable c_long
L3_MODIFY_STREAMS_ARRAY = 81 # Variable c_int
IL3_FRAMEERROR = 32 # Variable c_int
ATM_CONN_TRIGGER_PARAMS = 58 # Variable c_int
NS_CAPTURE_STATUS_ALIGNMENT_ERROR = 512 # Variable c_int
TCP_GET_RX_LOG = 28682 # Variable c_int
MPLS_LSP_BIND_STREAMS = 38934 # Variable c_int
XENPAK_10GBE = 1 # Variable c_int
FR_NUM_PVCS = 256 # Variable c_int
ETBNC_10MHZINV = 23 # Variable c_int
TCP_ENABLE_DATA_SEND = 28723 # Variable c_int
NS_EN_RUNTIME_IN_SEQUENCE_INDEX = 4 # Variable c_int
CALL_STATE_CALL_INITIATED = 1 # Variable c_int
FR_LINK_STATUS_INFO = 39 # Variable c_int
CAPTURE_EVENTS_FILTER_FRAME_LENGTH = 8192 # Variable c_int
MII_CONTROL9_1000BASE = 256 # Variable c_int
ATM_E3_CELL_FRAMING = 7 # Variable c_int
GIG_STRUC_MEMORY_READ = 36910 # Variable c_int
AT_HEC_ERROR_HANDLING_PASS = 0 # Variable c_int
AT_ENCAP_TYPE_VCMUX_ROUTED = 1 # Variable c_int
PROTOCOL_TYPE_IPUDP = 4 # Variable c_int
FC_SWITCH_TOPOLOGY_RING = 2 # Variable c_int
NS_RATES_MODE = 2 # Variable c_int
ATM_STREAM_SEARCH_INFO = 89 # Variable c_int
L3_VFD1 = 1 # Variable c_int
SIMPLE_COUNTER_AVERAGE = 2 # Variable c_int
FC_HBA_MODE_STOP = 13633 # Variable c_int
XENPAK_PROFILE_INFO = 36935 # Variable c_int
PORT_NAME_SERVER_ERROR = 64 # Variable c_int
NS_MULTI_IPV4_PING_REPLIES_TX = 39 # Variable c_int
FR_DUP_PVC = 115 # Variable c_int
ETH_CLEAR_PORT = 20512 # Variable c_int
NS_MULTI_TX_SIGNATURE_FRAMES = 2 # Variable c_int
MULTI_USER_CONFLICT = -37 # Variable c_int
CM_POS_3550A = 64 # Variable c_int
SAAL_STATE_CONN_PEND = 2 # Variable c_int
MII_STATUS_LINK = 4 # Variable c_int
L3MS_FIELD_VFD_CHAIN = 71 # Variable c_int
NCP_CONFIG_TIMEOUT = 7 # Variable c_int
XFP_TRANSCEIVER_OC_48_SR = 8 # Variable c_int
XENPAK_RX_ALARM_PHY_XS_RECEIVE_LOCAL_FAULT_ENABLE = 0 # Variable c_int
PPP_OE_OPTIONS = 27 # Variable c_int
TRUE = 1 # Variable c_int
SPEED_2GHZ = 128 # Variable c_int
ATM_STR_STATUS_SVC_CALL_STATE = 6 # Variable c_int
ATM_DS3_E3_YELLOW_ALARM = 64 # Variable c_int
PORT_RELINK_REQUIRED = -21 # Variable c_int
AT_ERROR_COUNT_BLOCK = 1 # Variable c_int
ATM_MAX_CALL_ADDRESSES = 128 # Variable c_int
TCP_CFG_CONNECT_REQUEST = 1025 # Variable c_int
NS_WIS_SECTION_LOS_ALARM = 1 # Variable c_int
CONTROLLER_SMB6000C_NTS5000A = 10 # Variable c_int
PACKET_NOT_AVAILABLE = -6 # Variable c_int
PPP_STATUS_OSI_ALIGNMENT = 22 # Variable c_int
AT_HEC_ERROR_HANDLING_DISCARD = 1 # Variable c_int
POS_QOS_TRIGGER = 8 # Variable c_int
ATM_FEATURES_MULTI_BURST = 64 # Variable c_int
L3MS_FIELD_IP_CHECKSUM_ERROR_ENABLE = 53 # Variable c_int
ATTRIB_CAN_ROUTE = 9 # Variable c_int
ATM1_BPTRG_FPGA_VERSION = 5 # Variable c_int
NS_HIST_COMBO_PER_STREAM_INFO = 12326 # Variable c_int
ATM_E1_PLCP_LINE_CELL_RATE = 4210 # Variable c_int
STREAM_PROTOCOL_TCP_IPV6 = 18 # Variable c_int
MAX_ATM_BURST_SIZE = 2097151 # Variable c_int
NS_PMC_FLASH_INFO = 26115 # Variable c_int
GIG_STRUC_CAPTURE_SETUP_READBACK = 36888 # Variable c_int
NS_OAM_RATE_INFO = 39393 # Variable c_int
START_NEXT_HOP_DETERMINATION = 16 # Variable c_int
IPV6_EXT_NONE = 59 # Variable c_int
NS_STREAM_SCHEDULE_COUNT_INFO = 20517 # Variable c_int
L3MS_FIELD_DIP = 4 # Variable c_int
WN_FEATURES_PER_PORT_TRIGGERS = 1 # Variable c_int
NS_CAPTURE_STATUS_RUN_DISPARITY = 16 # Variable c_int
NS_DOWNLOAD_FILE = 39396 # Variable c_int
L3_TRANSMIT_GETSTREAM = 10 # Variable c_int
MPLS_LSP_DELETE_ALL = 38922 # Variable c_int
FC_SWITCH_MULTI_LINK_CONFIG_INFO = 13655 # Variable c_int
HT_CBA_2 = 2 # Variable c_int
DOT1X_SUPPLICANT_STATUS_COUNT = 65535 # Variable c_int
HT_LATENCY_RX = 1 # Variable c_int
NS_REAL_TIME_TRACKING_TX_CONFIG = 39348 # Variable c_int
TCP_GET_CONNECTIONS = 28679 # Variable c_int
CA_CONNECT_USB = 536870912 # Variable c_long
DS3_SEV_ERROR_FRAME_ALARM = 1024 # Variable c_int
DS3_OOF_ALARM = 2 # Variable c_int
WN_DS1_E1_LOCD_ALARM = 1 # Variable c_int
SAAL_STATE_DISCONN_PEND = 3 # Variable c_int
VG_CFG_MASTER = 1 # Variable c_int
IP_INC_SRC_MAC_AND_DST_MAC = 33 # Variable c_int
NS_IPV4_HEADER = 3 # Variable c_int
INVALID_STRUCT_SIZE = -38 # Variable c_int
FC_LINK_DOWN = 13624 # Variable c_int
NS_MULTI_IPV4_ARP_REQUESTS_RX = 38 # Variable c_int
FR_LMI_INFO = 37 # Variable c_int
L3_RECEIVE_TRACKING_RAWTAGS = 5 # Variable c_int
MII_STATUS_100BASE_T2_HALF = 512 # Variable c_int
FRAME_TOTAL_LENGTH = 55 # Variable c_int
NS_IGMP_GROUP_COUNT_INFO = 39479 # Variable c_int
FR_LINE_SPEED_38400L = 38400 # Variable c_long
ETH_TRANSMIT = 20480 # Variable c_int
ROUTER_DISCOVERY_ENABLED = 8 # Variable c_int
PPP_STATUS_PPPOE_MODE = 14 # Variable c_int
PPPO_USEMAGIC = 128 # Variable c_int
AT_RX_CT_PROTOCOL_CLIP_ARP = 258 # Variable c_int
ATM_PVC = 0 # Variable c_int
WN_LMI_DEL = 6014 # Variable c_int
CA_SIGNALRATE_10MB = 1 # Variable c_long
WN_HIST_LATENCY_SCALE = 6122 # Variable c_int
DOT1X_SUPPLICANT_FILL_OFF = 0 # Variable c_int
PPP_MOD_SRCIPV6 = 16 # Variable c_int
PPP_OE_SOURCEMAC = 28 # Variable c_int
FR_FILL_PATTERN = 11 # Variable c_int
CAUSE_BC_NOT_IMPLEMENTED = 65 # Variable c_int
CALL_STATE_CONNECT_REQUEST = 8 # Variable c_int
NS_SONET_SECTION_LOS_ALARM = 128 # Variable c_int
FR_PVC_AGGREGATE_CNT_MAX = 256 # Variable c_int
IP_INC_DST_MAC = 20 # Variable c_int
GIG_PHY_LOOP_LOCAL_DTE_XS = 7 # Variable c_int
PMC_FLASH = 1 # Variable c_int
ATM_STR_ACTION_DISCONNECT = 2 # Variable c_int
XFP_TRANSCEIVER_S_64_2b = 32 # Variable c_int
ETDP_RANDOM = 2 # Variable c_int
ISMB_STD_ERR_OVERSIZE = 9 # Variable c_int
XFP_TRANSCEIVER_S_64_2a = 64 # Variable c_int
MAX_SLOTS_NUMBER = 20 # Variable c_int
INITIAL_PROCESS_ASSOCIATOR_NOT_REGISTERED = 17 # Variable c_int
CAPTURE_ANY = 2048 # Variable c_int
XENPAK_NVR_CUSTOMER_AREA = 119 # Variable c_int
SCHEDULE_MODE_ADVANCED = 3 # Variable c_int
XFP_IDENTIFIER_SFP = 3 # Variable c_int
ATM_ELAN_AVAILABLE = 7 # Variable c_int
ATMV_FIELD_TX_ENABLE = 1 # Variable c_int
FR_LOOPBACK_LOCAL_PHY = 1 # Variable c_int
ETH_PHY_AUTONEGOTIATE_ABILITY_DETECT = 268435456 # Variable c_int
TR_STATUS_FULL_DUPLEX = 16384 # Variable c_long
NS_TRIGGER_DIR_RX = 0 # Variable c_int
CA_CONNECT_FIBER = 262144 # Variable c_long
NS_IPV6_RATE_INFO = 39367 # Variable c_int
FRAME_HEADER_CODE = 87 # Variable c_int
STREAM_PROTOCOL_TCP_PPPOA = 25 # Variable c_int
PET_TIMER = 2048 # Variable c_int
FR_LINE_SPEED_256000L = 256000 # Variable c_long
WN_PVC_STATUS = 6272 # Variable c_int
TOPOLOGY_LOOP = 1 # Variable c_int
NS_IPV6_ROUTER_DISCOVERY_INFO = 39411 # Variable c_int
MLDV2_EXCLUDE_FILTER_MODE = 1 # Variable c_int
FR_LINE_SPEED_1664000L = 1664000 # Variable c_long
PPP_MOD_SESSION_STATUS = 64 # Variable c_int
XENPAK_MODULE_10GBASE_LW = 35 # Variable c_int
GIG_STRUC_TRIGGER = 36873 # Variable c_int
ETMF_PREAMBLE_COUNT = 7 # Variable c_int
WN_DS1_440_TO_660_BUILDOUT = 4 # Variable c_int
IP_DEC_SRC_IP_AND_DST_IP = 32 # Variable c_int
NS_DIFF_SERV_V2_RATE_INFO = 39515 # Variable c_int
NS_HIST_V3_SEQUENCE_INFO = 12303 # Variable c_int
PAT_CUST = 13 # Variable c_int
FR_UNI_DCE = 1 # Variable c_int
L3_TX_EXCESSIVE = 4 # Variable c_long
SPEED_16MHZ = 4 # Variable c_int
PPP_STATUS_MAX_PEER_IPV4_ADDR = 25 # Variable c_int
L3MS_FIELD_STREAM_ACTIVE = 28 # Variable c_int
ITR_MAC_BURSTERRORS = 43 # Variable c_int
FRAME_HEADER_LENGTH = 51 # Variable c_int
AN_NO_EXTENDED_CAPABILITY = -1101 # Variable c_int
NS_TRIGGER_OUT_L2_ERROR = 2 # Variable c_int
ATTRIB_CONNECT_AUI = 8 # Variable c_int
CT_DEFAULT_CAPTURE_MODE = 2080 # Variable c_int
NS_MULTI_NEIGHBOR_ADVERT_RX = 46 # Variable c_int
STREAM_SOURCE_ADDRESS = 1 # Variable c_int
XENPAK_S_64_5A = 32 # Variable c_int
XENPAK_S_64_5B = 64 # Variable c_int
WN_DS1_E1_OOF_ALARM = 2 # Variable c_int
ITR_MAC_FREQUENCYERROR = 49 # Variable c_int
ATM_STR_PARAM_GEN_PCR = 1 # Variable c_int
NODE_NAME_NOT_REGISTERED = 14 # Variable c_int
NS_MOD_IPV6_EXT_ESP = 39452 # Variable c_int
ATM_TD_AGGR_COMBO_RATES = 5 # Variable c_int
ATM_MEAN_CELL_TRANSFER_DELAY = 16384 # Variable c_long
WN_DS3_LINE_INFO = 6224 # Variable c_int
ATM_CALL_PARAM_PCR = 2 # Variable c_int
SONET_PATH_AIS_ALARM = 64 # Variable c_int
FC_MAX_DEVICES = 1000 # Variable c_int
ATM_CONN_INFO_SUMMARY = 27 # Variable c_int
PPP_REQUIRED_OPTIONS = 1 # Variable c_int
XFP_TRANSCEIVER_I_64_2r = 32 # Variable c_int
ATM_CONT_MULTI_BURST_ENABLE = 3 # Variable c_int
CM_AS_9155 = 13 # Variable c_int
ATM_DS1_CELL_LINE_CELL_RATE = 3622 # Variable c_int
ETMF_TXTRIG_COUNT = 2 # Variable c_int
PPP_NCP_DOWN = 1 # Variable c_int
ATM_START_SETUP = 14 # Variable c_int
MAX_URL_OBJ_LEN = 20 # Variable c_int
XFP_CONNECTOR_UNKNOWN = 0 # Variable c_int
ETRUN_RUN = 2 # Variable c_int
TRFC_PCF_DAT = 1 # Variable c_int
NS_TCP_STREAM_INFO = 5400 # Variable c_int
CONN_STATE_CALL_RELEASED = 4 # Variable c_int
CAUSE_REQ_IE_MISSING = 96 # Variable c_int
PAT_0F0F = 5 # Variable c_int
ATM_MAX_ELANS = 8 # Variable c_int
PPP_OE_TIMEOUT_NO_RSP = 9 # Variable c_int
IDLE = 0 # Variable c_int
DOT1X_SUPPLICANT_CLEAR_SESSION_STATS = 7 # Variable c_int
NS_DIFF_SERV_INFO = 20518 # Variable c_int
GIG_STRUC_LED = 36886 # Variable c_int
WN_CHANNEL_INFO = 6241 # Variable c_int
ATM_STR_PARAM_SIG_BW_QOS = 20 # Variable c_int
GIG_PREAMB_LEN_32_BYTES = 7 # Variable c_int
XENPAK_TX_ALARM_LASER_BIAS_CURRENT_FAULT_ENABLE = 9 # Variable c_int
FR_STATUS_LINK_OK = 512 # Variable c_long
XFP_ENCODING_8B10B = 64 # Variable c_int
NS_DOT1X_SUPPLICANT_STATS_INFO = 39487 # Variable c_int
CM_ST_6405 = 3 # Variable c_int
ATM_ELAN_BUS_ARP_WAIT = 5 # Variable c_int
MII_STATUS10_1000BASE = 128 # Variable c_int
MII_REGISTER_1000_STATUS = 10 # Variable c_int
HTLED_COLLGREEN = 8 # Variable c_long
DOT1X_SUPPLICANT_AUTHENTICATION_TIME = 3 # Variable c_int
PPP_STATUS_PPPOE_IPV6CP_STATE = 18 # Variable c_int
ATM2_TXQ_FPGA_VERSION = 3 # Variable c_int
TCP_GET_TX_TIME_INFO = 28744 # Variable c_int
TCP_RESET = 28677 # Variable c_int
WN_PVC_CFG = 6081 # Variable c_int
FR_STREAM_INFO = 39382 # Variable c_int
FR_HIST_L3_ARPEXCHANGE = 9 # Variable c_int
HTLED_LINKED = 512 # Variable c_long
ENCAP_ATM_SVC_SNAP = 2 # Variable c_int
WN_FEATURES_PPP_FR = 4 # Variable c_int
FALSE = 0 # Variable c_int
L3_SINGLE_BURST_MODE = 1 # Variable c_int
DOT1X_TTLS_PHASE2_MSCHAP = 3 # Variable c_int
NS_RX_SIGNATURE_STOP = 2 # Variable c_int
HTLED_RXRED = 16 # Variable c_long
ETSTOP = 0 # Variable c_int
CT_PATTERN_SIZE_IN_BYTES = 16 # Variable c_int
FW_FC_SRT_FSPF_START = 51520 # Variable c_int
FILE_IO_ERROR = -36 # Variable c_int
ATMV_FIELD_PTI = 11 # Variable c_int
FC_NAME_SERVER_QUERY = 13620 # Variable c_int
PPP_LCP_IPCP_STARTING = 1 # Variable c_int
LOSS_OF_DELETED_FLAG = 1 # Variable c_int
L3MS_FIELD_FC_SRC_WWN = 60 # Variable c_int
UNI_VERSION_4_0_USER = 64 # Variable c_long
L4MS_FIELD_TCP_WINDOW = 25 # Variable c_int
STREAM_PROTOCOL_UDP_PPPOAOE = 27 # Variable c_int
MPLS_CREATE_SINGLE_LSP = 38921 # Variable c_int
WN_STREAM_COPY_CFG = 6072 # Variable c_int
NS_WIS_PATH_SIGNAL_LABEL_10G_ETHERNET_WAN = 26 # Variable c_int
FR_LINE_SPEED_1600000L = 1600000 # Variable c_long
ATM_DS3_E3_IDLE_ALARM = 16 # Variable c_int
NS_IGMPV3_LEAVE_ALL = 39378 # Variable c_int
GROUP_HUB_SLOT_PORT_ERROR = -18 # Variable c_int
FRAME_PSH_BIT = 74 # Variable c_int
IATM_OAM_F5 = 39 # Variable c_int
IATM_OAM_F4 = 38 # Variable c_int
DOT1X_EAP_TYPE_EAPMD5 = 1 # Variable c_int
PAT_5555 = 3 # Variable c_int
CAPTURE_EVENTS_ALL_FRAMES = 4294967295L # Variable c_uint
FR_TX_MULTI_BURST = 4 # Variable c_int
SERVER_CLOSE_3WAY = 3 # Variable c_int
ATTRIB_SPEED_10MB = 1 # Variable c_int
NS_SDH_FRAMING = 1 # Variable c_int
GIG_RETRY_16 = 0 # Variable c_int
XFP_ENCODING_SONET_SCRAMBLED = 32 # Variable c_int
UNI_DEFAULT_TMR_T398 = 400 # Variable c_int
FR_ETSTAT_RXLED = 32 # Variable c_int
PMC_MAX_DISK_PARTITIONS = 4 # Variable c_int
NS_PORT_ADDRESS = 39324 # Variable c_int
L3MS_FIELD_DIPB = 12 # Variable c_int
POS_LOOPBACK_MODE_LOCAL_PHY = 2 # Variable c_int
FC_GET_ENTRY_GIVEN_PORT_TYPE_RX = 0 # Variable c_int
LASER_DISABLE = 0 # Variable c_int
ATM_LOOPBACK_REMOTE_PHY = 2 # Variable c_int
FC_FSPF_REAL_TIME_STATS_INFO = 13667 # Variable c_int
IATM_UNCORRECTABLEHEADERS = 34 # Variable c_int
HTTRIGGER_DEPENDENT = 3 # Variable c_int
PPP_START = 5 # Variable c_int
POS_CARD_LINE_CONFIG = 24836 # Variable c_int
NS_INSERT = 1 # Variable c_int
ATM_STR_PARAM_SIG_FW_PCR_0 = 5 # Variable c_int
HTLED_GREEN = 2 # Variable c_int
ATM_CLIP_TIMEOUT = 10 # Variable c_int
MAX_NTP_STRING_SIZE = 100 # Variable c_int
FR_HISTOGRAM = 61 # Variable c_int
ETBNC_ALB = 19 # Variable c_int
ETBNC_ALA = 18 # Variable c_int
PPP_CLOSE_LCP = 2 # Variable c_int
WN_VFD_RANDOM = 1 # Variable c_int
IL3_TX_STACK = 37 # Variable c_int
CAPTURE_MODE_START_ON_EVENTS = 1 # Variable c_int
ETDP_AAAA = 3 # Variable c_int
TCP_HTTP_EXTENDED_CONFIG = 28760 # Variable c_int
PPP_PARAMS_MODIFY = 20999 # Variable c_int
ATM_B_BC_CLASS_C = 3 # Variable c_int
NS_IPV6_EXT_FRAGMENT_HEADER = 12 # Variable c_int
MII_STATUS_JABBER_DETECT = 2 # Variable c_int
PPP_PEER_AUTH_ID = 8 # Variable c_int
PORT_DEVICE_LOGIN = 8 # Variable c_int
CM_SX_7405 = 6 # Variable c_int
GIG_STRUC_TEST_CAPTURE_MEMORY = 36912 # Variable c_int
CA_CONNECT_BNC = 64 # Variable c_long
COMMAND_RESPONSE_ERROR = -28 # Variable c_int
FRAME_SNAP_OUI = 6 # Variable c_int
TCPISP_CONNECTIONDATA_TYPE_UNKNOWN = 0 # Variable c_int
TCP_INIT_STACK_MODE = 28685 # Variable c_int
ATM_B_BC_CLASS_X = 16 # Variable c_int
NCP_DOWN = 1 # Variable c_int
NS_EN_RUNTIME_MAX_LATENCY = 4 # Variable c_int
ATM_CALL_PARAM_CELL_LOAD_GEN_ENABLE = 13 # Variable c_int
LOGICAL_ERROR = 2 # Variable c_int
NS_IPV6_PROTOCOL_HEADER_INFO = 39516 # Variable c_int
OTHER_STATEFUL_CONFIGURATION = 64 # Variable c_int
ETH_PHY_UNUSED_15 = 32768 # Variable c_int
NS_MULTICAST_KEEP_ALIVE_STOP = 2 # Variable c_int
GIG_PHY_LOOP_PBUS = 1 # Variable c_int
ATM_CELLS = 1 # Variable c_long
PET_NERR = 2 # Variable c_int
ATM_CARD_TYPE = 160 # Variable c_int
FR_CARD_CFG = 10 # Variable c_int
FC_LOG_LEVEL_OFF = 0 # Variable c_int
NS_HIST_V3_LATENCY_INFO = 12301 # Variable c_int
ATTRIB_SPEED_25MB = 14 # Variable c_int
TCPISP_CONNECTIONDATA_TYPE_CONNECTION = 2 # Variable c_int
ATM_DS1_E1_LINE_INFO = 93 # Variable c_int
ET_SECURE = 1 # Variable c_int
ETH_PHY_UNUSED_14 = 16384 # Variable c_int
GPS_STATUS_NOT_CONNECTED = 3 # Variable c_int
FR_HIST_L3_SEQUENCE = 1 # Variable c_int
ETCRC_ON = 1 # Variable c_int
ATM_LED_STATUS_TRIG = 8 # Variable c_int
L3MS_FIELD_TTL = 2 # Variable c_int
NS_MULTI_VLAN_PRI_1_RX = 54 # Variable c_int
MPLS_LDP_TEST = 38938 # Variable c_int
L3_RECEIVE_TRACKING_ACTIVE_TEST = 9 # Variable c_int
ATM_COMP1_ONLY = 0 # Variable c_int
SSCOP_DEFAULT_TMR_NO_RESP_3_0 = 1000 # Variable c_int
MAX_SUPPLICANT_DELTA = 32 # Variable c_int
WN_PVC_INFO = 6271 # Variable c_int
CM_POS_3519A = 56 # Variable c_int
FR_LINE_SPEED_832000L = 832000 # Variable c_long
ATM_ILMI_UME_RUNNING = 3 # Variable c_int
NS_SPEED_OC12 = 1 # Variable c_int
XAUI_PRBS_CONFIG = 36936 # Variable c_int
ATM_DS3_E3_LOCD_ALARM = 1 # Variable c_int
L3MS_FIELD_ROUTER_ADDR = 42 # Variable c_int
PPP_SET_CTRL = 20994 # Variable c_int
FR_LINE_SPEED_2048000L = 2048000 # Variable c_long
CM_GX_1420B = 37 # Variable c_int
PPP_CONFIGURE_MAXFAILURE = 5 # Variable c_int
ENGINEERING_QA_RELEASE = 2 # Variable c_int
PORT_LINK_RESET = 4 # Variable c_int
PPP_MAX_CONFIGURE = 4 # Variable c_int
NS_MULTI_RX_JUMBO = 34 # Variable c_int
SSCOP_DEFAULT_TMR_CC = 100 # Variable c_int
TRFC_PCF_SMP = 6 # Variable c_int
NS_MULTI_IPV6_PING_REQUESTS_TX = 49 # Variable c_int
WN_PVC_DEL_ALL = 6086 # Variable c_int
RXLED_ERRORB = 2 # Variable c_int
L3MS_FIELD_SIPD = 18 # Variable c_int
CM_LAN_3327A = 74 # Variable c_int
ETBNC_OVRB = 17 # Variable c_int
ATM_CALL_PARAM_CALL_COUNT_LIMIT = 15 # Variable c_int
ETBNC_OVRA = 16 # Variable c_int
WN_DS1_ESF_LINE_FRAMING = 1 # Variable c_int
NS_VFD1 = 0 # Variable c_int
GIG_STRUC_SS2_READBACK = 36897 # Variable c_int
DOT1X_SUPPLICANT_FAILURE_USER_LOGOFF = 6 # Variable c_int
FC_LINK_COST_2000 = 4 # Variable c_int
NS_TCP_IPV6_STREAM_VLAN_INFO = 39389 # Variable c_int
XFP_CDR_SUPPORT_FOR_10_7_GBS = 16 # Variable c_int
XENPAK_I_64_1 = 2 # Variable c_int
ATM_CALL_PARAM_MBS = 4 # Variable c_int
XENPAK_I_64_3 = 16 # Variable c_int
ATMV_FIELD_MBURST_COUNT = 8 # Variable c_int
WN_VFD_INCREASING = 2 # Variable c_int
NS_REAL_TIME_TRACKING_TX_STOP = 39350 # Variable c_int
ATM_CALL_PARAM_CONN_TYPE = 0 # Variable c_int
WN_FEATURES_FR = 4 # Variable c_int
PPP_LCP_IPCP_ACKRCV = 7 # Variable c_int
ATM_LOOPBACK_DISABLED = 0 # Variable c_int
NS_TRIGGER_OFF = 0 # Variable c_int
ATM_STR_STATE_ADDR_RES_PROCEEDING = 1 # Variable c_int
WN_CARD_CFG = 6003 # Variable c_int
PPP_LCP_AUTHENTICATING = 2 # Variable c_int
HVFD_ENABLED = 4 # Variable c_int
CHANNEL_DISABLED = 3 # Variable c_int
ETVFD_ENABLE = 1 # Variable c_int
TR_DUPLEX_FULL = 1 # Variable c_int
DOT1X_SUPPLICANT_SESSION_PENDING_TO_TERMINATE = 5 # Variable c_int
NS_MULTI_IPV6_NEIGHBOR_SOLICITATION_COUNTERS = 256 # Variable c_int
NS_WRITE_MDIO = 39365 # Variable c_int
HT_LATENCY_RXTX = 4 # Variable c_int
GIG_STRUC_RESET = 36901 # Variable c_int
PPP_IPV6_STATUS_INFO = 21027 # Variable c_int
CONN_STATE_INTER_CALL_DELAY = 5 # Variable c_int
IPV6_EXT_HOP_BY_HOP = 0 # Variable c_int
CAUSE_TOO_MANY_PEND_ADD_PARTY = 92 # Variable c_int
MII_AN_NEXT_PAGE = 32768 # Variable c_int
STATS_MODE_EXTENDED = 1 # Variable c_int
FR_GROUP_MEMBER_CMD = 108 # Variable c_int
ETDP_DECR8 = 15 # Variable c_int
POS_LOOPBACK_MODE_LOCAL_TRANSCEIVER = 4 # Variable c_int
FR_HIST_RESET = 62 # Variable c_int
XFP_TRANSCEIVER_10GBASE_SW = 8 # Variable c_int
POS_TRIGGER2_ONLY = 0 # Variable c_int
CLIENT_CLOSE_3WAY = 4 # Variable c_int
TR_ERR_FRAME_FS = 8 # Variable c_int
WN_VFD_OFF = 0 # Variable c_int
MII_CTRL_ISOLATE = 1024 # Variable c_int
CMD_NOT_SUPPORTED = 7 # Variable c_int
ATM_STREAM_EXT_VCC_INFO = 123 # Variable c_int
NS_IPV6_STREAM_INFO = 39384 # Variable c_int
PPP_IPX_NODE = 17 # Variable c_int
SPEED_DUPLEX_UNTOUCHED = 255 # Variable c_int
ALLOW_LATENCY_COUNTER_RESET = 0 # Variable c_int
ATM_E3_PLCP_FRAMING = 8 # Variable c_int
TR_CLAIMEVENTS = 128 # Variable c_long
PPP_MOD_SESSID = 2 # Variable c_int
L3_HIST_TEST_V2_LATENCY = 6 # Variable c_int
NS_MLDV2_GROUP_MOD = 39469 # Variable c_int
HIST_LAT_TIME = 2 # Variable c_int
NS_LOOKUP_KEY_DISCONTIGUOUS = 1 # Variable c_int
FRAME_AC = 11 # Variable c_int
ETDP_FF00 = 8 # Variable c_int
ET_CMDLOG_TIMESTAMP = 4 # Variable c_long
ATM_ILMI_UME_DOWN = 1 # Variable c_int
FR_HIST_L3_LONGLATENCY_DE = 17 # Variable c_int
NS_REAL_TIME_TRACKING_RX_STOP = 39361 # Variable c_int
NS_CAPTURE_STOP = 39334 # Variable c_int
WN_FEATURES_PER_STREAM_RATE = 4 # Variable c_int
FRAME_HARDWARE_SIZE = 83 # Variable c_int
MPLS_LSP_DOWN = 5 # Variable c_int
FW_FC_FS_CONFIG_GROUP = 28966 # Variable c_int
IL3_TX_RETRIES = 33 # Variable c_int
NS_ARP_COMPLETE = 1 # Variable c_int
STREAM_PROTOCOL_TCP_IPV6_VLAN = 21 # Variable c_int
NS_HIST_LATENCY_OPTION = 39347 # Variable c_int
GIG_STRUC_TX_READBACK = 36889 # Variable c_int
XENPAK_NVR_CUSTOMER_FIELD_ADDRESS = 6 # Variable c_int
FRAME_SYN_BIT = 76 # Variable c_int
NS_CT_CAPTURE_FRAME_COUNT_INFO = 39344 # Variable c_int
HTLED_CAPTURE_STOP = 4096 # Variable c_long
FR_STATUS_EIA_RTS = 2097152 # Variable c_long
TR_ERR_FCS = 1 # Variable c_int
WN_DS3_BUILDOUT_LT225 = 0 # Variable c_int
NS_IPV6_IPV4_ADDRESS_MAP_DELETE = 39418 # Variable c_int
NS_HIST_EN_SCALE_100_NANOSECOND = 512 # Variable c_int
CAUSE_NO_USER_RESPONDING = 18 # Variable c_int
HBA_DISCOVERY = 4 # Variable c_int
CAUSE_INV_NUMBER_FORMAT = 28 # Variable c_int
ATMV_FIELD_RX_ENABLE = 2 # Variable c_int
FR_CARD_VERSION_INFO = 15 # Variable c_int
NS_MULTI_TX_FRAMES = 0 # Variable c_int
FC_LOG_LEVEL_RECURSION = 1 # Variable c_int
XENPAK_RX_ALARM_PMA_PCS_RECEIVE_LOCAL_FAULT_ENABLE = 3 # Variable c_int
CA_SIGNALRATE_622MB = 8388608 # Variable c_long
NS_RESOLVE_ARPS = 39381 # Variable c_int
IL3_ARP_REPLIES = 41 # Variable c_int
GIG_PHY_LOOP_LOCAL_XGMII = 6 # Variable c_int
SONET_SECTION_LOF_ALARM = 4 # Variable c_int
ATM_TD_NONE = 7 # Variable c_int
MPLS_LABEL_DATA_INFO = 38931 # Variable c_int
VCDB_STATE_TRANSITORY = 16 # Variable c_int
VLAN_CFI_RIF_PRESENT = 1 # Variable c_int
AFSIG_RESTART_PROCEEDING = 1 # Variable c_int
ETH_SET_SPEED = 20486 # Variable c_int
NS_CREATE_SUBPROCESS = 20494 # Variable c_int
DOT1X_PORT_MODE_MULTI_HOST = 3 # Variable c_int
PORT_PORT_LOGIN_ERROR = 32 # Variable c_int
NS_READ_MDIO_INFO = 39364 # Variable c_int
ATM_INTERNAL_CLOCK = 0 # Variable c_int
NS_WIS_PATH_FERF_ALARM = 128 # Variable c_int
IP_INC_SRC_IP_AND_SRC_MAC = 24 # Variable c_int
XENPAK_PHY_CONFIG_INFO = 36929 # Variable c_int
ENCAP_ATM_SVC_LANE802_5 = 4 # Variable c_int
LCP_DOWN = 1 # Variable c_int
FC_EPORT_SETTING_CONFIG = 13672 # Variable c_int
MPLS_LSP_SIGNALING = 3 # Variable c_int
WN_T1E1_LINE_MOD_CFG = 6064 # Variable c_int
PPP_OE_STATS_INFO = 21001 # Variable c_int
NS_VFD_OFF = 4 # Variable c_int
NS_ATM_HEADER = 18 # Variable c_int
NS_TRACK_TOTAL_LAT = 1 # Variable c_int
GIG_VFD_OFF = 4 # Variable c_int
PPP_OE_NO_AC = 13 # Variable c_int
NS_ALTERNATE_KEY_TRIG_PREFILTER = 7 # Variable c_int
MII_SELECT_SMII = 0 # Variable c_int
MPLS_ROUTING_DOMAIN_DELETE_ALL = 38918 # Variable c_int
ATM_STR_STATUS_SVC_CAUSE_CODE = 8 # Variable c_int
AT_PATH_SIGNAL_LABEL_ATM = 19 # Variable c_int
MAX_COOKIE = 20 # Variable c_int
NS_VFD2_CONFIG = 23 # Variable c_int
UNI_VERSION_NET_MASK = 2147483648L # Variable c_ulong
MPLS_EXPLICIT_ROUTE_OBJECT = 0 # Variable c_int
NS_FFS_INFO = 20528 # Variable c_int
PPP_STATUS_LOCAL_IPADDR = 6 # Variable c_int
CONN_STATE_IDLE = 0 # Variable c_int
UNI_DEFAULT_TMR_T309_3_1 = 1000 # Variable c_int
TRFC_PCF_EXPRESSBUFFER = 1 # Variable c_int
L3MS_FIELD_SMAC = 1 # Variable c_int
AT_VC_CREATE = 39172 # Variable c_int
MDIO_ACCESS_4_PLUS_4 = 3 # Variable c_int
UNI_DEFAULT_TMR_T308 = 3000 # Variable c_int
IP_DEC_SRC_MAC_AND_DST_MAC = 34 # Variable c_int
DOT1X_SUPPLICANT_FILL_LEFT = 1 # Variable c_int
FR_SET_PORT_LMI_STATUS = 45 # Variable c_int
FC_FSPF_STATS_CONFIG_INFO = 13657 # Variable c_int
FC_DEFINE_MULTI_STREAM = 13603 # Variable c_int
FR_LINE_SPEED_1216000L = 1216000 # Variable c_long
ATM_BURST_DISABLE = 0 # Variable c_int
L3_USB_INFO_CMD = 1 # Variable c_int
L3_CAPTURE_STATUS_SIGNATURE_TAG = 8 # Variable c_int
L3_VFD4 = 4 # Variable c_int
TCP_FLAG_FIN = 1 # Variable c_int
WN_DEFINE_UDP_STREAM = 6133 # Variable c_int
AT_PORT_DEFAULT_FLAGS = 0 # Variable c_int
CONTROLLER_UNKNOWN = 0 # Variable c_int
MLD_V1 = 0 # Variable c_int
MLD_V2 = 1 # Variable c_int
L3MS_FIELD_VFD2_CYCLE_COUNT = 66 # Variable c_int
PAT_FFFF = 8 # Variable c_int
MLDV2_IGNORE_V1_MESSAGE = 32 # Variable c_int
NS_HALF_DUPLEX_RATE_INFO = 39369 # Variable c_int
L3_CAPTURE_STATUS_VLAN = 2 # Variable c_int
WN_DS3_ENCODING_B3ZS = 0 # Variable c_int
AT_ERROR_COUNT_INDIVIDUAL = 0 # Variable c_int
TR_MAC_LOSTFRAME = 16384 # Variable c_long
FW_FC_FS_CONFIG_GROUP_INFO = 28967 # Variable c_int
ATM_AAL5_INFO = 19 # Variable c_int
IP_INC_SRC_IP_DST_IP = 31 # Variable c_int
XFP_OPTIONAL_VPS_BYPASS_REG_MODE = 8 # Variable c_int
ATM_PVCAD_PARAMS = 70 # Variable c_int
ATM_LED_STATE_PHY_DOWN = 0 # Variable c_int
DOT1X_EAP_TYPE_LEAP = 128 # Variable c_int
RXLED_OVERSIZEA = 7 # Variable c_int
RXLED_OVERSIZEB = 8 # Variable c_int
PPP_LCP_IPCP_INIT = 0 # Variable c_int
NS_TCP_IPV6_STREAM_INFO = 39388 # Variable c_int
MAX_SCHED_ENTRIES = 2048 # Variable c_int
NS_PROTOCOL_HEADER_MAX = 100 # Variable c_int
NS_MULTI_RX_MPLS_FRAMES = 25 # Variable c_int
ETH_PHY_AUTONEGOTIATE_LINK_GOOD_CHECK = 1073741824 # Variable c_int
NS_VFD_RANDOM = 3 # Variable c_int
FR_CLEAR_COUNTERS_CMD = 110 # Variable c_int
CM_POS_3518A = 65 # Variable c_int
ETH_VLAN = 20487 # Variable c_int
PPP_USE_NONE = 0 # Variable c_int
HTLED_LINK_100MHZ = 65536 # Variable c_long
NS_VFD2 = 1 # Variable c_int
TCP_GET_TX_LOG = 28681 # Variable c_int
SSCOP_DEFAULT_TMR_IDLE = 1500 # Variable c_int
ETH_PHY_PAUSE_TX_ENABLED = 65536 # Variable c_int
QUEUE_DISABLE = 0 # Variable c_int
TIMESTAMP_CLOCK_SOURCE_40_MHZ = 1 # Variable c_int
RESERVE_NONE = 0 # Variable c_int
L3_VFD5 = 5 # Variable c_int
MPLS_RSVP_SERVICE_COS_OBJECT = 1 # Variable c_int
NS_STREAM_ID_TABLE_INFO = 39500 # Variable c_int
HUB_GROUP_DEFAULT_ACTION = 0 # Variable c_int
L3_STATUS_6710 = 524288 # Variable c_long
PPP_STATUS_MRU = 10 # Variable c_int
CM_SX_7410 = 7 # Variable c_int
CAUSE_LOC_PUB_REM = 4 # Variable c_int
WN_IP_SUBNET_DEL = 6111 # Variable c_int
SMB_STD_ERR_ALIGN = 128 # Variable c_long
WN_LMI_CFG = 6010 # Variable c_int
ATM_FRAMER_PART_NUM_FAILURE = 1 # Variable c_int
TRFC_PCF_RRS = 1 # Variable c_int
MII_CTRL_RESTARTAUTONEGOTIATE = 512 # Variable c_int
TCP_EXTENDED_CONN_EVENT_INFO = 28754 # Variable c_int
FR_NIC_EIA_RD_TM = 524288 # Variable c_long
UNI_DEFAULT_TMR_T309_3_0 = 9000 # Variable c_int
WN_FEATURES_PER_CHAN_TRIGGERS = 1 # Variable c_int
WN_HIST_RESET_CFG = 6121 # Variable c_int
GET_IPV4_FROM_IPV6 = 1 # Variable c_int
FR_RFC1490_BRIDGED_SNAP = 1 # Variable c_int
NS_WAIT_FOR_EVENT = 39380 # Variable c_int
ATM_TIMEOUT = 262144 # Variable c_long
ETH_TRIGGER1_AND_TRIGGER2 = 4 # Variable c_int
CT_GIGABIT = 8 # Variable c_int
L3_MAX_GROUPS = 100 # Variable c_int
TR_BEACONEVENTS = 64 # Variable c_long
MII_CTRL_RESET = 32768 # Variable c_int
NS_WAIT_TIMEOUT = 0 # Variable c_int
NS_LINK_FAULT_CONFIG = 39521 # Variable c_int
NS_DEFINE_IPV6_EXT_DESTINATION = 39444 # Variable c_int
POS_CONFIG_INFO = 24864 # Variable c_int
ATM_ELAN_INIT_LECS_DIRECT = 1 # Variable c_int
MAX_NAME = 256 # Variable c_int
POS_SONET_PAYLOAD_TYPE_NON_SPECIFIC = 1 # Variable c_int
FR_CARD_CLK_EXTERNAL = 0 # Variable c_int
UNSUPPORTED_COMMAND = -1001 # Variable c_int
SIMPLE_RATE_AVERAGE = 1 # Variable c_int
XFP_CONNECTOR_SC = 1 # Variable c_int
NS_UDPDHCP_STREAM_INFO = 5397 # Variable c_int
XFP_CONNECTOR_SG = 10 # Variable c_int
FC_MAX_NUM_NODES = 90 # Variable c_int
TCP_CONN_EVENT_INFO = 28738 # Variable c_int
NS_DOT1X_SUPPLICANT_PORT_CONFIG = 39483 # Variable c_int
NS_DOT1X_SUPPLICANT_CONTROL = 39488 # Variable c_int
ATTRIB_TRANSCEIVER_MULTIMODE = 31 # Variable c_int
ATM_TRIGGER_MODE_CELL = 0 # Variable c_int
FC_LOG_LEVEL_CRITICAL = 4 # Variable c_int
NS_PORT_CONFIG = 39475 # Variable c_int
NS_SONET_CONFIG_INFO = 39328 # Variable c_int
MAX_VFD_SIZE = 2048 # Variable c_int
TR_STATUS_BURST_MODE = 1024 # Variable c_long
INVALID_IP_HOP_LIMIT = 2 # Variable c_int
MAX_USER_CONNECTIONS = 4 # Variable c_int
IP_DEC_SRC_IP_AND_SRC_MAC = 26 # Variable c_int
NS_CT_CONFIG_CAPTURE_FILTER_PARAMS = 39341 # Variable c_int
DOT1X_SUPPLICANT_RETRY = 5 # Variable c_int
MII_AN_10BASE_T_FULL = 64 # Variable c_int
RTP_PAYLOAD_G723_1 = 4 # Variable c_int
ATM_B_BC_NO_END_TO_END_TIMING = 2 # Variable c_int
ATM_CONN_64_INFO_SUMMARY = 35 # Variable c_int
PAT_F0F0 = 4 # Variable c_int
NS_REAL_TIME_TRACKING_TX_COUNTERS = 39362 # Variable c_int
PPP_LCP_UP = 0 # Variable c_int
FRAME_UDP_SEQUENCE = 57 # Variable c_int
WN_T1E1_LINE_COPY_CFG = 6062 # Variable c_int
ETBNC_10MHZ = 22 # Variable c_int
DOT1X_EAP_TYPE_EAPPEAP = 4 # Variable c_int
ATM_DS3_CELL_LINE_CELL_RATE = 104268 # Variable c_long
CAPTURE_LENGTH_ENTIRE_FRAME = 0 # Variable c_int
NS_PPP_HEADER = 19 # Variable c_int
NS_MFG_PROM_CONFIG = 39400 # Variable c_int
WN_TRIG_NO_TRIG = 0 # Variable c_int
WN_CAP_RELEASE_CNT = 6130 # Variable c_int
AT_SET_SPEED = 39180 # Variable c_int
CONN_STATE_CALL_ESTABLISHED = 3 # Variable c_int
ATM_STR_PARAM_SIG_BW_MBS_0 = 15 # Variable c_int
SONET_FRAMING_A1A2_ERRORS = 1 # Variable c_int
LOOP_PORT_A = 0 # Variable c_int
IATM_CELLSLOST = 35 # Variable c_int
POS_LOOPBACK_MODE_REMOTE_TRANSCEIVER = 5 # Variable c_int
TCP_HTTP_STOP_EXTENDED_TEST = 28761 # Variable c_int
ATTRIB_ATM_SIGNALING = 21 # Variable c_int
WN_VFD_DECREASING = 3 # Variable c_int
ATM_OC12_LINE_CELL_RATE = 1412830 # Variable c_long
BURST_ENABLE = 1 # Variable c_int
IP_DEC_SRC_MAC_DST_MAC = 34 # Variable c_int
XFP_IDENTIFIER_UNKNOWN = 0 # Variable c_int
INVALID_GROUP_COMMAND = -24 # Variable c_int
GIG_STATUS_CAPTURE_STOPPED = 4096 # Variable c_long
FST_PROTOCOL_DISABLED = 0 # Variable c_int
CAUSE_INV_EP_REF = 89 # Variable c_int
MAX_OBJECTS = 10 # Variable c_int
CT_FILTER_PROTOCOL_ID_TCP = 8 # Variable c_int
FR_LED_STATUS_INFO = 100 # Variable c_int
ATM_CALL_PARAM_CALL_LENGTH_TYPE = 10 # Variable c_int
CT_FILTER_MODE_PATTERN = 2 # Variable c_int
MII_AN_10BASE_T = 32 # Variable c_int
IL3_PINGREQ_RECV = 44 # Variable c_int
FR_HIST_TYPE_INFO = 65 # Variable c_int
NS_MULTI_RX_IPV6_FRAMES = 18 # Variable c_int
NS_CT_CAPTURE_FRAME_INFO = 39345 # Variable c_int
POS_LOOPBACK_MODE_REMOTE_PHY = 3 # Variable c_int
XFP_AUX_MONITORING_NOT_IMPLEMENTED = 0 # Variable c_int
WN_START_CFG = 6400 # Variable c_int
MPLS_FILTER_OBJECT = 5 # Variable c_int
FR_TX_AGGREGATE_PVC_INFO = 35 # Variable c_int
AT_ENCAP_TYPE_NULL = 0 # Variable c_int
ATM_DS3_PLCP_LINE_CELL_RATE = 96000 # Variable c_long
WN_RFC1662_RTD_PPP = 4 # Variable c_int
ATM_STR_PARAM_SIG_TIMING = 22 # Variable c_int
NS_IGMP_CONFIG = 28694 # Variable c_int
TCP_ICMP_PING = 28720 # Variable c_int
NS_PROTOCOL_COUNTER_INFO = 39430 # Variable c_int
ATM_STR_STATE_ADDR_RES_RETRY = 3 # Variable c_int
FR_STREAM_DELETE_ALL = 5 # Variable c_int
ATMV_FIELD_CDVT = 5 # Variable c_int
SPEED_25MHZ = 32 # Variable c_int
NS_MULTI_ERROR_COUNTERS = 8 # Variable c_int
ETH_PHY_AUTONEGOTIATE_NEED_PAGE_WAIT = 134217728 # Variable c_int
AN_LINK_NOT_NEGOTIATED = -1100 # Variable c_int
PPP_NCPS_OPENED = 9 # Variable c_int
FC_MAX_NUM_DEST_SWITCHES = 450 # Variable c_int
GIG_MAX_CAPTURE_FRAMES = 96 # Variable c_int
ITR_MAC_ABORTTX = 45 # Variable c_int
SMB_VG_MASK = 15 # Variable c_int
HTLED_TRIGLOSYELLOW = 192 # Variable c_long
ATM_ARP_CONN_FAILED = 4 # Variable c_int
MFTYPEEVENT = 0 # Variable c_int
XENPAK_MODULE_10GBASE_CX4 = 3 # Variable c_int
ETDP_0F0F = 6 # Variable c_int
SOCKET_FAILED = -26 # Variable c_int
SYBOLIC_NODE_NAME_NOT_REGISTERED = 20 # Variable c_int
CAUSE_TD_UNSUPPORTED = 73 # Variable c_int
AT_INTERNAL_CLOCK = 0 # Variable c_int
ATTRIB_VFDRESETCOUNT = 10 # Variable c_int
PPP_OE_SERVICENAME = 30 # Variable c_int
LOGICAL_INVALID_IU_SIZE = 3 # Variable c_int
NS_SONET_FRAMING = 0 # Variable c_int
NS_MULTI_IPV4_PING_REPLIES_RX = 40 # Variable c_int
PARAMETER_RANGE = -5 # Variable c_int
PPP_IPV6_CONFIG = 21025 # Variable c_int
IP_OPTION_LOOSE_SOURCE_RECORD_ROUTE = 131 # Variable c_int
ATM_ELAN_DEFAULT_AGING_TIME = 300 # Variable c_int
NS_TRIGGER_DIR_TX = 1 # Variable c_int
AT_RATE_CLASS_UBR = 1 # Variable c_int
CAPTURE_LENGTH_1ST_128_BYTES = 3 # Variable c_int
PHY_MODE_WAN = 2 # Variable c_int
ETH_PHY_CARRIER_EXTENSION_ERROR = 64 # Variable c_int
POS_TRANSCIEVER_MODE_SINGLE = 0 # Variable c_int
ITR_RXMAC = 32 # Variable c_int
FST_PROTOCOL_RESPOND_PING = 2 # Variable c_int
DS3_LOCD_ALARM = 1 # Variable c_int
FR_LINE_SPEED_64000L = 64000 # Variable c_long
ATM_STREAM_CONTROL = 53 # Variable c_int
NS_STOP_NEIGHBOR_DISCOVERY = 34573 # Variable c_int
ATM2_MAIN_FW_VERSION = 0 # Variable c_int
XENPAK_10GBASE_ER = 4 # Variable c_int
LCP_UP = 0 # Variable c_int
SONET_LOCD_ALARM = 512 # Variable c_int
ATM_ILMI_DEREGISTER = 721 # Variable c_int
GROUP_NOT_HOMOGENEOUS = -23 # Variable c_int
CAUSE_LOC_PUB_LOCAL = 2 # Variable c_int
WN_DS1_AMI_ENCODING = 0 # Variable c_int
NS_PHY_DEFAULT_HALF_DUPLEX = 64 # Variable c_int
CT_MODE_HALT = 0 # Variable c_int
FST_CAP_LAST_64_BYTES = 1 # Variable c_int
CAPTURE_OVERSIZE = 8 # Variable c_int
PVC_UNKNOWN_STATUS = 1 # Variable c_int
FC_DEVICE_LOGIN_COMPLETE_STATE = 3 # Variable c_int
ATM_STREAM_TRIGGER_TIME_INFO = 129 # Variable c_int
FRAME_PROTOCOL_UDP = 2 # Variable c_int
XFP_CONNECTOR_OPTICAL_PIGTAIL = 11 # Variable c_int
ATM_RATE_CLASS_UBR = 2 # Variable c_int
NS_PROTOCOL_RATE_INFO = 39431 # Variable c_int
ATM_CORRECT_ERRORED_CELLS = 1 # Variable c_int
MII_STATUS_100BASE_T2_FULL = 1024 # Variable c_int
XENPAK_LASI_LS_ALARM_ENABLE = 0 # Variable c_int
FR_LINE_SPEED_512000L = 512000 # Variable c_long
GIG_PREAMB_LEN_16_BYTES = 3 # Variable c_int
DOT1X_SUPPLICANT_CONNECTING = 3 # Variable c_int
TCP_HTTP_URL_OBJ_LEN_CONFIG = 28758 # Variable c_int
CAUSE_BC_NOT_AUTH = 57 # Variable c_int
FRAME_PROTOCOL_ICMP = 7 # Variable c_int
L3_FRAMEERROR = 1 # Variable c_long
DS3_YELLOW_ALARM = 8 # Variable c_int
ETBNC_EXTCLKINV = 27 # Variable c_int
FST_CAP_FILTERED_FRAMES_ONLY = 1 # Variable c_int
CAUSE_NORMAL_UNSPEC = 31 # Variable c_int
POS_SONET_PAYLOAD_TYPE_PPP = 207 # Variable c_int
MPLS_LSP_NOT_COMPLETE = 38915 # Variable c_int
IP_DEC_IP_AND_MAC_SRC = 26 # Variable c_int
MAX_PORT_IDS = 2048 # Variable c_int
CA_SIGNALRATE_25MB = 8192 # Variable c_long
WN_DS3_UNCHANNELIZED = 1 # Variable c_int
ATM_ELAN_MTU_4544 = 2 # Variable c_int
NSTCL_INVALID_STRUCT_COUNT = -505 # Variable c_int
ATM_PER_CONN_BURST = 704 # Variable c_int
CAUSE_UNASSIGNED_NUM = 1 # Variable c_int
CONN_STATE_CALL_PROCEEDING = 2 # Variable c_int
FR_MOD_PVC = 20 # Variable c_int
FW_FC_SRT_FSPF_SHUTDOWN = 51521 # Variable c_int
WN_STREAM_MOD_CFG = 6074 # Variable c_int
IPV6_EXT_ROUTING_TYPE_0 = 43 # Variable c_int
NS_WIS_INJECT_FRAMING_ERRORS = 1 # Variable c_int
CONTROLLER_SMB6000C = 7 # Variable c_int
PMC_VPN = 2 # Variable c_int
STR_ENCAP_TYPE_NULL = 0 # Variable c_int
AT_PORT_CONFIG_INFO = 39171 # Variable c_int
CA_SIGNALRATE_100MB = 2 # Variable c_long
PPP_PARAMS_FILL = 20998 # Variable c_int
L3_HIST_TEST_V1_LATENCY_PER_STREAM = 10 # Variable c_int
ATM_CORRECTEDHEADERS = 2 # Variable c_long
NS_HIST_EN_LAST_TIMESTAMP = 32 # Variable c_int
MPLS_RSVP_REFRESH_REDUCTION_CAPABLE = 2 # Variable c_int
TR_STATUS_TRANSMITTING = 262144 # Variable c_long
L3_RECEIVE_CAPTURE_SPECIAL = 3 # Variable c_int
XFP_TRANSCEIVER_OC_48_IR = 4 # Variable c_int
L3_CAPTURE_STATUS_TRIGGER = 4 # Variable c_int
PPP_USE_PPP = 2 # Variable c_int
FC_LINK_COST_200 = 3 # Variable c_int
ETMF_TIME_ROUNDTRIP = 3 # Variable c_int
NS_MULTI_TX_TIMESTAMP = 10 # Variable c_int
XENPAK_I_64_5 = 32 # Variable c_int
UNI_DEFAULT_TMR_T313 = 400 # Variable c_int
ATM_CALL_LENGTH_RANDOM = 2 # Variable c_int
UNI_DEFAULT_TMR_T310 = 1000 # Variable c_int
UNI_DEFAULT_TMR_T317 = 18000 # Variable c_int
UNI_DEFAULT_TMR_T316 = 12000 # Variable c_int
TOPOLOGY_E_PORT = 2 # Variable c_int
XENPAK_NVR_WAVELENGTH_CHANNEL2 = 37 # Variable c_int
NS_FILL_PATTERN = 39520 # Variable c_int
NS_DECISION_IGNORE = 2 # Variable c_int
PAT_0000 = 0 # Variable c_int
ATM_LAYER_INFO = 708 # Variable c_int
ETH_TRIGGERS_OFF = 0 # Variable c_int
FRAME_HARDWARE_TYPE = 81 # Variable c_int
ET1000_OUT_OF_SYNC = -8 # Variable c_int
PROTOCOL_ENCAP_TYPE_STD_PPP = 33 # Variable c_int
NS_SONET_PATH_AIS_ALARM = 4 # Variable c_int
WN_STREAM_FILL_CFG = 6073 # Variable c_int
IPV6_EXT_ESP = 50 # Variable c_int
PPP_NEGOTIATE_IP = 12 # Variable c_int
ATM_SCHED_PARAMS = 711 # Variable c_int
WN_STREAMEXT_CFG_INFO = 6280 # Variable c_int
ATM_ELAN_DEFAULT_ARP_RESPONSE_TIME = 1 # Variable c_int
RXLED_ERRORAB = 3 # Variable c_int
CA_SIGNALRATE_1_544MB = 67108864 # Variable c_long
INVALID_TYPE1 = -1003 # Variable c_int
DOT1X_SESSION_CONTROL_EVEN_BURST = 1 # Variable c_int
POS_CARD_LINE_CONFIG_INFO = 24866 # Variable c_int
PMC_MEM_TEST_FAILURE = 1 # Variable c_int
DOT1X_SUPPLICANT_SESSION_AUTHENTICATING = 3 # Variable c_int
CAPTURE_ENTIRE_PACKET = 0 # Variable c_int
L3_WRITE_STREAM_BG = 1876 # Variable c_int
TCP_GET_URL_DISTRIBUTION_INFO = 28828 # Variable c_int
NS_PHY_DEFAULT_RESTORE_ORIGINAL_VALUE = 65534 # Variable c_int
PVC_END2END_DOWN_STATUS = 3 # Variable c_int
CM_WN_3445A = 34 # Variable c_int
SIG_EMUL_NO_TEARDOWN = 0 # Variable c_int
ATM_STR_STATUS_ARP_RESP_LATENCY = 5 # Variable c_int
XFP_TRANSCEIVER_2xFC_MMF = 32 # Variable c_int
ATM_RATE_CLASS_ABR = 3 # Variable c_int
PPP_STATUS_IPCP_STATE = 2 # Variable c_int
GIG_AFN_RESERVED9 = 512 # Variable c_int
ATM_STR_PARAM_GEN_SCR = 2 # Variable c_int
NS_DOT1X_SUPPLICANT_CONFIG = 39485 # Variable c_int
TCP_GET_URI_DISTRIBUTION_INFO = 28756 # Variable c_int
GIG_AFN_RESERVED4 = 16 # Variable c_int
ATM_MAX_CALL_SETUP_PARAMS = 64 # Variable c_int
GIG_AFN_RESERVED2 = 4 # Variable c_int
MDIO_ACCESS_8_VIA_4_7 = 2 # Variable c_int
ATM_B_BC_UNI40_REAL_TIME_VBR_01 = 19 # Variable c_int
PPP_LCP_IPCP_OPENED = 9 # Variable c_int
PPP_OE_SESSION_STOP = 21009 # Variable c_int
FC_NAME_SERVER_STATS_INFO = 13671 # Variable c_int
FC_SET_TX_MODE = 13591 # Variable c_int
ATM_ELAN_DEFAULT_CONTROL_TIMEOUT = 120 # Variable c_int
DOT1X_TTLS_PHASE2_CHAP = 2 # Variable c_int
PPP_USE_PPPOE = 1 # Variable c_int
FRAME_HEADER_TYPE = 82 # Variable c_int
FR_E1_120_OHM_NORMAL = 3 # Variable c_int
NS_ALTERNATE_KEY_DISABLE = 0 # Variable c_int
STR_RATE_CLASS_VBR = 1 # Variable c_int
ATM_LED_STATE_ILMI_UP = 512 # Variable c_int
TR_STATUS_DEVICE = 4096 # Variable c_long
FST_CAPTURE_STATUS_UNDERSIZE = 4 # Variable c_int
ATM_FRAME_CLEAR = 723 # Variable c_int
NS_MOD_IPV6_OVER_IPV4_TUNNELING = 39454 # Variable c_int
GIG_STRUC_DEBUG_DISPLAY = 36885 # Variable c_int
L3_USB_MODE_CMD = 0 # Variable c_int
L3_CTRL_IPV6_ND_RESPONSES_WITH_UNIQUE_MAC = 2 # Variable c_int
XENPAK_NVR_ENCODING = 13 # Variable c_int
L3MS_FIELD_DPRT = 9 # Variable c_int
WN_LMI_MOD_CFG = 6013 # Variable c_int
ATTRIB_SPEED_4MB = 11 # Variable c_int
L3_RNDIS_MODE_ENABLED = 65536 # Variable c_int
ATM1_BT8222_VERSION = 7 # Variable c_int
SYNFIN = 4 # Variable c_int
POS_CLOCK_SOURCE_INTERNAL = 0 # Variable c_int
L3_TRANSMIT_START_ARPS = 9 # Variable c_int
PPP_STATUS_MIN_OUR_IPV4_ADDR = 24 # Variable c_int
XENPAK_S_64_3B = 16 # Variable c_int
IPV6_EXT_DESTINATION = 60 # Variable c_int
FR_ETSTAT_TXLED = 2 # Variable c_int
FC_GET_ENTRY_GIVEN_IP_ADDRESS_RX = 2 # Variable c_int
MAX_SLOTLIST_SIZE = 255 # Variable c_int
HTECHO_OFF = 0 # Variable c_int
GIG_STRUC_CARD_INFO = 36874 # Variable c_int
XENPAK_NVR_BASIC_FIELD_ADDRESS = 5 # Variable c_int
NS_STREAM_SCHEDULE_INFO = 20516 # Variable c_int
ATM_CONN_INFO = 719 # Variable c_int
CAUSE_OPT_UNAVAILABLE = 63 # Variable c_int
ETH_PHY_LINK_UP = 262144 # Variable c_int
IP_ADDRESS_NOT_REGISTERED = 16 # Variable c_int
FRAME_DST_IP_ADDR = 66 # Variable c_int
NS_ETH_PHY_RATES = 39461 # Variable c_int
SOCKET_TIMEOUT = -27 # Variable c_int
CAUSE_USER_BUSY = 17 # Variable c_int
PHY_MODE_POS = 0 # Variable c_int
ATM_LED_STATUS_ALARM_RED = 4 # Variable c_int
TR_INSERTIONS = 256 # Variable c_long
WN_LMI_FILL_CFG = 6012 # Variable c_int
GIG_CONTROL_IP_CHECKSUM_INHIBIT = 2 # Variable c_int
CM_UNKNOWN = -1 # Variable c_int
NS_OAM_PATTERN = 39391 # Variable c_int
GIG_STRUC_TEST_FLASH_CRC = 36915 # Variable c_int
FR_STATUS_EIA_CTS = 131072 # Variable c_long
L3_USB_PORT_LINKED = 8388608 # Variable c_int
WN_PVC_CNT_MAX = 1024 # Variable c_int
DS3_LOS_ALARM = 4 # Variable c_int
XFP_TRANSCEIVER_1000BASE_LX_1xFC_SMF = 64 # Variable c_int
L3_RNDIS_MODE_CMD = 0 # Variable c_int
FRAME_SEQUENCE = 56 # Variable c_int
CAUSE_RES_UNAVAIL = 47 # Variable c_int
TCP_TIME_COUNT_INFO = 28741 # Variable c_int
ILMI_DEFAULT_TMR_COLD_START = 500 # Variable c_int
CA_TRANSCEIVER_MULTIMODE = 1073741824 # Variable c_long
FC_DEFINE_HEADER_INFO = 13587 # Variable c_int
ATM1_L64363_VERSION = 8 # Variable c_int
LISTENFIN = 2 # Variable c_int
NS_HIST_EN_MIN_LATENCY = 1 # Variable c_int
ETH_PROTOCOL_GENERATE_ARP = 1 # Variable c_int
TCP_PREPARE_TEST = 28770 # Variable c_int
NS_MAX_HEADERS = 500 # Variable c_int
CM_AT_3451A = 60 # Variable c_int
WN_STREAMEXT_FILL_CFG = 6092 # Variable c_int
ETH_FIND_MII_ADDR_INFO = 20501 # Variable c_int
FRAME_VERSION = 50 # Variable c_int
STR_CONN_TYPE_SVC = 1 # Variable c_int
IATM_CORRECTEDHEADERS = 33 # Variable c_int
ATM_SVC = 1 # Variable c_int
RUNTIME_MODE_NORMAL = 0 # Variable c_int
HIST_MULTICAST_LAT_STREAM = 11 # Variable c_int
MPLS_RSVP_ENABLE_BUNDLE_MSG = 256 # Variable c_int
FC_LINK_COST_10000 = 6 # Variable c_int
NS_EN_RUNTIME_TOTAL_LATENCY = 1 # Variable c_int
WN_T1E1_LINE_CTRL = 6060 # Variable c_int
NS_COMMIT_STREAM_CONFIG_OBJECT = 39482 # Variable c_int
NS_MULTI_RX_PAUSE = 33 # Variable c_int
FR_HIST_V2_LATENCY_DE = 12817 # Variable c_int
LOGFILE_SIZE_8192 = 8192 # Variable c_int
DOT1X_SUPPLICANT_FAILURE_AUTH_LOGOFF = 7 # Variable c_int
SIGNATURE_IP_LENGTH_MODE = 1 # Variable c_int
HT_CBA_10 = 10 # Variable c_int
CA_DUPLEX_FULL = 4 # Variable c_long
PPP_MAGICNUMBER = 22 # Variable c_int
GIG_PREAMB_LEN_12_BYTES = 2 # Variable c_int
TCPISP_CONNECTIONDATA_TYPE_LISTEN = 1 # Variable c_int
IP_OPTION_STRICT_SOURCE_RECORD_ROUTE = 137 # Variable c_int
TR_MAC_TOKENERROR = 262144 # Variable c_long
NS_CT_START_CAPTURE = 39342 # Variable c_int
ATM_FRAME_DEF = 52 # Variable c_int
CALL_STATE_ACTIVE = 10 # Variable c_int
STR_ENCAP_TYPE_LLC_PPP = 4 # Variable c_int
SMB_STD_TXBYTES = 2 # Variable c_long
ETBNC_TDAT = 9 # Variable c_int
CM_SX_7205 = 5 # Variable c_int
SINGLE_BURST_MODE = 1 # Variable c_int
COLLISION_LONG = 1 # Variable c_int
CT_FILTER_PROTOCOL_ID_ARP = 2 # Variable c_int
IP_INC_SRC_MAC = 19 # Variable c_int
AT_PORT_RX_CT_BUFFER_SIZE = 12288000 # Variable c_int
SCHEDULE_MODE_GAP = 0 # Variable c_int
ATM_FRAME_COPY = 715 # Variable c_int
FR_LMP_DISABLE = 0 # Variable c_int
NS_PMC_VPN_HW_TEST_INFO = 26121 # Variable c_int
ATTRIB_CONNECT_BNC = 7 # Variable c_int
L3_DHCP_STATE_SELECTING = 2 # Variable c_int
NS_STREAM_SCHEDULE = 20492 # Variable c_int
HT_CBA_3 = 3 # Variable c_int
WN_DS3_FRMR_STATUS_ACE = 128 # Variable c_int
TCP_LISTEN_ONE = 28674 # Variable c_int
L3_RECEIVE_TRACKING_32_LATENCYPERSTREAM = 10 # Variable c_int
TCP_SET_ISP_CONNECTIONDATA = 96 # Variable c_int
TCP_HIST_TCP_CONNECTION_INFO = 28774 # Variable c_int
ETH_LINK_INIT = 20488 # Variable c_int
L3MS_FIELD_FC_OXID = 62 # Variable c_int
FRAME_PROTOCOL_SIZE = 85 # Variable c_int
LCP_CONFIG_TIMEOUT = 5 # Variable c_int
MAX_HISTOGRAM_TYPES = 17 # Variable c_int
FR_LINK_INFO = 31 # Variable c_int
ATM_B_BC_UNI40_NON_REAL_TIME_VBR_01 = 11 # Variable c_int
DOT1X_SUPPLICANT_SUCCESS_EAPOL_START_NO_RESPONSE = 4 # Variable c_int
MIN_GAP_VALUE = 1 # Variable c_int
NS_DEFINE_IPV6_EXT_AUTHENTICATION = 39445 # Variable c_int
L3_DHCP_ACTION_RELEASE = 3 # Variable c_int
SSCOP_STATE_IN_RESYNC_PEND = 6 # Variable c_int
AT_SONET_PATH_AIS_ALARM = 4 # Variable c_int
ATM_ILMI_REGISTER = 727 # Variable c_int
ATM_UNI_RESTART_ACK_STATS = 45 # Variable c_int
MAX_PHEADER_LEN = 64 # Variable c_int
CM_AT_9622 = 20 # Variable c_int
CA_CONNECT_AUI = 128 # Variable c_long
NS_TRIGGER_OUT_L3_ERROR = 3 # Variable c_int
NS_DESTROY_SUBPROCESS = 20495 # Variable c_int
PET_ASSERT = 8 # Variable c_int
GIG_TRIGGER1_ONLY = 1 # Variable c_int
FR_CISCO_HDLC_RTD_IP = 5 # Variable c_int
L3_RECEIVE_SETCAPTURETYPE = 2 # Variable c_int
NS_MULTI_TX_TRIGGER = 6 # Variable c_int
ATM_ELAN_LES_SVC_WAIT = 3 # Variable c_int
CAPTURE_LENGTH_CUSTOM = 5 # Variable c_int
CM_LAN_3306A = 73 # Variable c_int
ATM_ELAN_DEREGISTER = 728 # Variable c_int
HBA_DEVICE_LOGIN = 2 # Variable c_int
SOURCE_ADDRESS_LINK_LOCAL_UNICAST = 1 # Variable c_int
GIG_TRIGGER_OFF = 4 # Variable c_int
NS_IPV6_STATELESS_ADDRESS_INFO = 39415 # Variable c_int
MAX_PROTOCOL_TYPES = 5 # Variable c_int
RESET_PARTIAL = 2 # Variable c_int
XFP_OPTIONAL_SOFT_P_DOWN = 32 # Variable c_int
L3MS_FIELD_NEXT_HEADER = 46 # Variable c_int
NS_IGMP_LEAVE_VLAN = 28698 # Variable c_int
CT_UNKNOWN = -1 # Variable c_int
NS_DIFF_SERV_V2_CONFIG = 39512 # Variable c_int
BANDWIDTH_EXCEEDED_ERROR = -40 # Variable c_int
NS_CAPTURE_STATUS_VLAN = 256 # Variable c_int
FR_UNI_DTE = 0 # Variable c_int
L3MS_FIELD_DMAC_BYTE01 = 37 # Variable c_int
NS_MULTI_IPV6_PAYLOAD_CHECKSUM_ERROR = 22 # Variable c_int
PET_SSCOP_STATE_CHANGE = 16 # Variable c_int
FC_PLOGI = 13617 # Variable c_int
UNABLE_TO_PERFORM_CMD = 6 # Variable c_int
NS_PROT_COUNTERS = 39465 # Variable c_int
L3MS_FIELD_SIPV6 = 41 # Variable c_int
CM_AT_9020 = 17 # Variable c_int
NS_BASE_NUM = 39321 # Variable c_int
L3MS_FIELD_BG_INDEX = 52 # Variable c_int
PPP_OE_NEGOTIATE_IPV6 = 33 # Variable c_int
VCDB_STATE_NEW = 1 # Variable c_int
NS_MULTICAST_KEEP_ALIVE_CONFIG = 39505 # Variable c_int
TCP_ARP_SET_ENTRY = 28704 # Variable c_int
ATTRIB_SPEED_16MB = 12 # Variable c_int
GIG_STRUC_CAPTURE_DESCRIPTION = 36887 # Variable c_int
NS_PMC_PARTITION_DISK = 26117 # Variable c_int
ATM_CLASSICAL_IP_INFO = 90 # Variable c_int
SMB_STD_TXFRAMES = 1 # Variable c_long
ETDP_DECR16 = 16 # Variable c_int
NS_SONET_COUNTER_INFO = 39322 # Variable c_int
PAT_AAAA = 2 # Variable c_int
L3_RECEIVE_TRACKING_V2_LATENCY = 6 # Variable c_int
NS_PHY_DEFAULT_SPEED_100MHZ = 100 # Variable c_int
ATTRIB_OAM_CAPABLE = 38 # Variable c_int
XFP_TRANSCEIVER_10GBASE_EW = 2 # Variable c_int
CAUSE_RSP_TO_STATUS_ENQ = 30 # Variable c_int
ATM_155_LINE_CELL_RATE = 353207 # Variable c_long
ETH_COLLISION = 20483 # Variable c_int
ATM_OUT_OF_SEQUENCE = 16 # Variable c_long
FC_ADD_LINK = 1 # Variable c_int
NS_WIS_INJECT_LINE_BIP_ERRORS = 4 # Variable c_int
L3MS_FIELD_CRC_ERROR_ENABLE = 56 # Variable c_int
HTLED_SYNC = 192 # Variable c_long
TR_STATUS_ACCESSED = 256 # Variable c_long
AT_SONET_SECTION_LOS_ALARM = 128 # Variable c_int
ATM25_LOS_ALARM = 1 # Variable c_int
MPLS_LSP_CREATE = 38920 # Variable c_int
WN_FEATURES_STREAM_COPY_PASTE = 16 # Variable c_int
TR_TOKEN_EARLY_RELEASE = 1 # Variable c_int
IP_DEC_SRC_IP_DST_IP = 32 # Variable c_int
ET_CMDLOG_NOLINKINFO = 256 # Variable c_long
MAX_ARRAY_DIM_TM = 1870 # Variable c_int
FC_SWITCH_TOPOLOGY_GRID = 1 # Variable c_int
NS_GRE_HEADER = 20 # Variable c_int
SIG_EVENT_SAAL_RELEASE = 2 # Variable c_int
ENCAP_ATM_PVC = 1 # Variable c_int
NS_LOOKUP_KEY_CONTIGUOUS_16BIT_MAX = 2 # Variable c_int
DOT1X_SUPPLICANT_VLAN_CONFIGURATION = 14 # Variable c_int
NS_LINK_FAULT_CLEAR = 0 # Variable c_int
ATMV_FIELD_BURST_COUNT = 7 # Variable c_int
COMMAND_MODE_SEND_ONLY = 2 # Variable c_int
NS_TRIGGER1_OR_TRIGGER2 = 3 # Variable c_int
CALL_STATE_RELEASE_INDICATION = 12 # Variable c_int
XENPAK_TX_ALARM_LASER_TEMPERATURE_FAULT_ENABLE = 8 # Variable c_int
NS_IPV6_HEADER = 5 # Variable c_int
NS_MULTI_TX_LATENCY = 8 # Variable c_int
NS_CUSTOM_HEADER = 8 # Variable c_int
FR_INPUT_MSG_CMD = 112 # Variable c_int
POS_SPEED_OC12 = 4 # Variable c_int
POS_TRIGGER1_OR_TRIGGER2 = 3 # Variable c_int
CT_FILTER_PROTOCOL_ID_RARP = 4 # Variable c_int
IATM_CELL_LOSS_RATIO = 43 # Variable c_int
GIG_BASE_NUM = 36864 # Variable c_int
XFP_IDENTIFIER_300_PIN_XBI = 4 # Variable c_int
FC_PUBLIC_DISCOVERY_STATE = 4 # Variable c_int
NS_MULTI_IPV4_ARP_REPLIES_TX = 35 # Variable c_int
NS_RUNTIME_HIST_STATS_CONFIG = 39511 # Variable c_int
FC_SWITCH_TOPOLOGY_BINARY_TREE = 6 # Variable c_int
PPP_CONFIGURE_MAGICNUMBER = 2 # Variable c_int
INVALID_ICMP_LENGTH = 1 # Variable c_int
CM_AT_9015 = 16 # Variable c_int
TR_DUPLEX_HALF = 0 # Variable c_int
UNI_DEFAULT_TMR_T322 = 400 # Variable c_int
FST_VLAN = 1280 # Variable c_int
BURST_DISABLE = 0 # Variable c_int
GPS_STATUS_OK = 1 # Variable c_int
COS3_UNSUPPORTED = 10 # Variable c_int
NS_IPV6_STREAM_VLAN_INFO = 39385 # Variable c_int
ETBURST_OFF = 0 # Variable c_int
NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_11 = 18 # Variable c_int
NS_IPV6_NEXT_HOP_RESULTS_COUNT_INFO = 39458 # Variable c_int
GIG_STRUC_SS1_READBACK = 36896 # Variable c_int
PET_SIG_TMR_ACTIVITY = 8192 # Variable c_int
FC_DEFINE_STREAM_128 = 13600 # Variable c_int
OAM_PACKET_TYPE_NORMAL_OAM = 1 # Variable c_int
PPP_RESET = 7 # Variable c_int
SSCOP_DEFAULT_TMR_POLL_3_1 = 75 # Variable c_int
NEXT_HOP_RUNNING = 128 # Variable c_int
ETMF_RXTRIG_RATE = 5 # Variable c_int
MPLS_LSP_INFO = 38933 # Variable c_int
TR_MODE_MAU = 0 # Variable c_int
FR_LINE_SPEED_128000L = 128000 # Variable c_long
FR_TRIG_COMP2_ONLY = 2 # Variable c_int
FC_STATE_CHNG_REQUEST = 13623 # Variable c_int
GIG_STATUS_TX_PAUSE = 1024 # Variable c_long
FC_LOGO = 13619 # Variable c_int
TR_BADTOKEN = 16 # Variable c_long
REMOTE_MODE = 1 # Variable c_int
L3_HIST_TEST_SEQUENCE = 1 # Variable c_int
NS_DOT1X_SUPPLICANT_STATUS_INFO = 39490 # Variable c_int
ETMF_SQE_COUNT = 9 # Variable c_int
XFP_AUX_MONITORING_PLUS_3_3V_SUPPLY_CURRENT = 13 # Variable c_int
ATM_VCC_INFO = 82 # Variable c_int
HIST_FRDE_LONG_LAT_TIME = 17 # Variable c_int
HTLED_FRAME_CAPTURE = 2048 # Variable c_long
FST_CAP_ALL_FRAMES = 0 # Variable c_int
XENPAK_NVR_VENDOR_MONTH_CODE = 105 # Variable c_int
INTEROP_NO_ESC = 1 # Variable c_int
NS_CT_CONFIG = 39477 # Variable c_int
PPP_STATUS_OSI_STATE = 21 # Variable c_int
ATM_STR_PARAM_SIG_BW_SCR_0 = 13 # Variable c_int
XFP_TRANSCEIVER_V_64_2b = 64 # Variable c_int
NS_MOD_IPV6_EXT_HOP_BY_HOP = 39447 # Variable c_int
WN_LOOPBACK_REMOTE_PHY = 2 # Variable c_int
ATM_LED_STATE_ILMI_AND_SAAL_UP = 768 # Variable c_int
NS_L2_STAT_RATE_INFO = 39371 # Variable c_int
WN_DS3_LINE_STATUS = 6222 # Variable c_int
TCP_TEAR_DOWN = 28742 # Variable c_int
PPP_IPX_ENABLE = 15 # Variable c_int
FRAME_FLAG_CRC32_ERROR = 1 # Variable c_int
SIGNATURE_NORMAL_MODE = 0 # Variable c_int
FC_MAX_NUM_SWITCHES = 150 # Variable c_int
FR_PORT_SETTINGS = 0 # Variable c_int
MAX_HUBS_SMB200 = 1 # Variable c_int
ATM_B_BC_TYPE_VBR = 8 # Variable c_int
NS_STREAM_MULTI_CONFIG_MODE_COPY = 2 # Variable c_int
DAD_SUCCESSFUL = 4 # Variable c_int
ON_LINK = 128 # Variable c_int
PORT_LINK_UP = 4 # Variable c_int
RXLED_UNDERSIZEB = 5 # Variable c_int
RXLED_UNDERSIZEA = 4 # Variable c_int
DOT1X_SUPPLICANT_LOG_OFF = 1 # Variable c_int
IL3_DATA_INTEGRITY_ERRORS = 45 # Variable c_int
UL_SET_TO_ZERO = 1 # Variable c_int
NS_REAL_TIME_TRACKING_RX_CONFIG = 39349 # Variable c_int
ATM_CONN_PARAMS_COMPLETE = 722 # Variable c_int
ATM_ELAN_MAX_CONTROL_TIMEOUT = 300 # Variable c_int
ETBNC_UNDRB = 15 # Variable c_int
PPS_TO_GAP_BITS = 0 # Variable c_int
L3_DHCP_STATE_RENEW = 6 # Variable c_int
NS_SONET_CELL_HEC_ALARM = 1 # Variable c_int
ATM_DS1_PLCP_LINE_CELL_RATE = 3333 # Variable c_int
NS_IPV6_ROUTER_PREFIX_COUNT_INFO = 39412 # Variable c_int
ETH_PROTOCOL_GENERATE_PING = 2 # Variable c_int
ETLNM_OFF = 0 # Variable c_int
AT_MODIFY_VC_ARRAY_SIZE = 8192 # Variable c_int
CAPTURE_RANGE = 1 # Variable c_int
ETH_PHY_REMOTE_RECEIVER_OK = 2048 # Variable c_int
AT_RX_CT_PROTOCOL_IP = 256 # Variable c_int
FC_FABRIC_DOWN_STATE = 0 # Variable c_int
L3_RX_TAGS = 16 # Variable c_long
FST_CAP_64_BYTES_ONLY = 1 # Variable c_int
IATM_CELL_DELAY_VARIATION = 47 # Variable c_int
GIG_CAP_UNDERSIZE = 1 # Variable c_int
GIG_CAP_OVERSIZE = 2 # Variable c_int
NS_MULTI_IPV6_PING_REPLIES_TX = 47 # Variable c_int
CM_WN_3442A = 43 # Variable c_int
TCP_ARP_GET_ENTRIES = 28705 # Variable c_int
CAPTURE_EVENTS_COLLISIONS = 256 # Variable c_int
PPP_ENHANCED_CONFIG_INFO = 21030 # Variable c_int
FR_NIC_EIA_RD_DSR = 65536 # Variable c_long
PET_EVENT = 32 # Variable c_int
CA_SIGNALRATE_16MB = 2048 # Variable c_long
NS_HIST_TEST_LATENCY_OVER_TIME = 17 # Variable c_int
VCDB_STATE_MODIFIED = 2 # Variable c_int
NS_IPV6_NEXT_HOP_RESULTS_INFO = 39426 # Variable c_int
ATM_STR_STATUS_CELL_HEADER = 2 # Variable c_int
FST_ALTERNATE_TX = 1288 # Variable c_int
NS_MULTI_ETH_COUNTERS = 32 # Variable c_int
GIG_VFD_STATIC = 0 # Variable c_int
NS_GET_SUBSCRIPTION = 39440 # Variable c_int
NS_DIFF_SERV_V2_COUNTER_INFO = 39514 # Variable c_int
MPLS_OPAQUE_OBJECT_CREATE = 38926 # Variable c_int
ATM_LANE = 2 # Variable c_int
FAMILY_ET1000 = 1 # Variable c_int
FST_CAPTURE_INFO = 1286 # Variable c_int
L3MS_FIELD_STREAM_FRAME_RATE = 50 # Variable c_int
NS_HIST_LATENCY_OVER_TIME_INFO = 12327 # Variable c_int
NS_IGMP_RESET = 28693 # Variable c_int
ETBNC_CRCA = 12 # Variable c_int
ETBNC_CRCB = 13 # Variable c_int
NS_HIST_SEQUENCE_PER_STREAM_INFO = 12328 # Variable c_int
L3MS_FIELD_FRAME_RATE = 39 # Variable c_int
L3_RECEIVE_TRACKING_TCP_ISP = 8 # Variable c_int
FR_DEBUG_SCREEN_INFO = 242 # Variable c_int
IP_INC_DST_IP_AND_SRC_MAC = 28 # Variable c_int
TOPOLOGY_PT_2_PT = 0 # Variable c_int
NS_ARP_CONFIG_INFO = 39459 # Variable c_int
ETPREAMBLE_MAX = 128 # Variable c_int
NS_RECEIVE_TRACKING_MC_LATENCYPERSTREAM = 15 # Variable c_int
L3_DHCP_ACTION_DONE = 5 # Variable c_int
NS_IGMPV3_ALL_GROUP_INFO = 39379 # Variable c_int
RUNTIME_MODE_DETAIL = 1 # Variable c_int
NS_MULTI_VLAN_PRIORITY_COUNTERS = 1024 # Variable c_int
XENPAK_S_64_2B = 4 # Variable c_int
L3_HIST_TEST_V2_LATENCY_PER_STREAM = 7 # Variable c_int
FC_FLOGI = 13616 # Variable c_int
GIG_CONTINUOUS_MULTIBURST_MODE = 2 # Variable c_int
NS_WRITE_SUBPROCESS = 20522 # Variable c_int
NS_MULTI_L2_COUNTERS = 1 # Variable c_int
NS_PMC_BASE_NUM = 26112 # Variable c_int
NEXT_HOP_RFC_COMPLIANT_MODE = 1 # Variable c_int
STREAM_PROTOCOL_BRIDGED = 33 # Variable c_int
PET_RCTRL = 64 # Variable c_int
L3MS_FIELD_HOP_LIMIT = 45 # Variable c_int
FRAME_SRC_IP_ADDR = 67 # Variable c_int
ATM_QOS_CLASS_0 = 0 # Variable c_int
TRIGLED_TX = 3 # Variable c_int
ATM_QOS_CLASS_2 = 2 # Variable c_int
ATM_QOS_CLASS_4 = 4 # Variable c_int
OFFSET_FROM_START_OF_FRAME = 0 # Variable c_int
SAAL_STATE_CONNECTED = 4 # Variable c_int
ET_CMDLOG_NOCOMMENT = 64 # Variable c_long
CM_SX_7210 = 22 # Variable c_int
ATM_VCDB_LIST_INFO = 79 # Variable c_int
HTSTOP = 0 # Variable c_int
NEXT_HOP_QUEUED = 512 # Variable c_int
GIG_STRUC_COUNTER_INFO = 36875 # Variable c_int
XENPAK_NVR_BIT_RATE = 14 # Variable c_int
NS_IPV4_RATES = 39464 # Variable c_int
PPP_OE_GEN_ERR = 10 # Variable c_int
FRAME_RST_BIT = 75 # Variable c_int
ATM_ATM25_FRAMING = 4 # Variable c_int
ATM_FEATURES_PROTOCOL_TRACE = 8 # Variable c_int
IP_DEC_DST_IP_AND_DST_MAC = 25 # Variable c_int
MAX_DIFFSERV_VALUES = 256 # Variable c_int
CAPTURE_UNDERSIZE = 16 # Variable c_int
NS_MULTI_RX_TIMESTAMP = 11 # Variable c_int
XENPAK_NVR_SIZE = 1 # Variable c_int
ATMV_FIELD_TX_MODE = 6 # Variable c_int
PET_SIG_PROT_ERR = 256 # Variable c_int
CT_FILTER_MODE_PROTOCOL = 1 # Variable c_int
MAX_COOKIE_LEN = 128 # Variable c_int
ATTRIB_CONNECT_XENPAK = 37 # Variable c_int
IP_DEC_DST_IP = 22 # Variable c_int
FC_PORT_NAME_REQUEST = 13618 # Variable c_int
TCP_HTTP_AGENT_CONFIG = 28757 # Variable c_int
PORT_LOSS_OF_SIGNAL = 2 # Variable c_int
HT_CBA_1 = 1 # Variable c_int
WN_T1E1_LINE_CFG = 6061 # Variable c_int
NS_TRACK_MIN_LAT = 0 # Variable c_int
NS_IPV6_IPV4_TRANSLATION = 39419 # Variable c_int
NS_CAPTURE_STATUS_CRC_ERROR = 8 # Variable c_int
FC_4_TYPES_NOT_REGISTERED = 18 # Variable c_int
XFP_CONNECTOR_BNC_TNC = 4 # Variable c_int
POS_SPEED_OC48 = 8 # Variable c_int
ETH_CARD_INFO = 20496 # Variable c_int
NCP_CONFIG_FAILURE = 6 # Variable c_int
GIG_STRUC_SET_PORT_INTO_GROUP = 36907 # Variable c_int
FR_LINE_SPEED_4096000L = 4096000 # Variable c_long
ATTRIB_HAS_DEBUG_MONITOR = 17 # Variable c_int
ET_OFF = 0 # Variable c_int
SMB_VG_PRIO_PROM_PKT = 8 # Variable c_int
FAMILY_SMB6000 = 3 # Variable c_int
FRAME_RESERVED = 71 # Variable c_int
ATM_MAX_ELAN_NAME = 32 # Variable c_int
ATM_ELAN_DEFAULT_ARP_RETRY_COUNT = 1 # Variable c_int
ISMB_VG_TRANSTRAIN_PKT = 34 # Variable c_int
MPLS_EXPLICIT_ROUTE_LSP_ID = 4 # Variable c_int
GIG_STRUC_FILL_PATTERN_READBACK = 36893 # Variable c_int
NS_MLD_COUNTER_INFO = 39437 # Variable c_int
HUB_GROUP_UNIT_ACTION = 2 # Variable c_int
PPP_PARAMS_COPY = 20997 # Variable c_int
L3_RECEIVE_TRACKING_LATENCYDISTRIBUTION = 4 # Variable c_int
ATTRIB_CONNECT_USB = 30 # Variable c_int
PROTOCOL_TYPE_OFF = 0 # Variable c_int
PACKET_NOT_FOUND = -9 # Variable c_int
NS_PATH_SIGNAL_LABEL_PPP = 22 # Variable c_int
ETBAUD_2400 = 0 # Variable c_int
WN_IP_SUBNET_CFG = 6110 # Variable c_int
ETH_READ_MII_INFO = 20502 # Variable c_int
ATM_ILMI_UME_COLD_START = 2 # Variable c_int
FR_STRM_CTRL = 44 # Variable c_int
DOT1X_SUPPLICANT_HELD_TIME = 4 # Variable c_int
PET_SIG_API_TRAFFIC = 512 # Variable c_int
ATM_SAR_CONFIG_FAILURE = 64 # Variable c_int
HIST_LAT_STREAM32 = 10 # Variable c_int
ATM_EXT_VCC_INFO = 117 # Variable c_int
CAUSE_MSG_INCOMP_CALL_STATE = 101 # Variable c_int
MAX_URI_LEN = 128 # Variable c_int
NCP_NOT_CFGD = 2 # Variable c_int
VCDB_UPDATED = 131072 # Variable c_int
MILLI_SCALE = 3 # Variable c_int
ETBNC_RXEA = 1 # Variable c_int
SMB_STD_RXBYTES = 16 # Variable c_long
MAX_DELTA = 32 # Variable c_int
UNI_VERSION_3_0_USER = 48 # Variable c_long
NS_IPV6_CONTROL = 39408 # Variable c_int
CM_AT_9034 = 18 # Variable c_int
ATM_BURST_ENABLE = 1 # Variable c_int
FR_ETSTAT_LINEWAITING = 4096 # Variable c_int
ATM_ILMI_REG_TIMEOUT = 20 # Variable c_int
AT_LOOP_TIMED_CLOCK = 1 # Variable c_int
GIG_PREAMB_LEN_24_BYTES = 5 # Variable c_int
PPP_NCPS_REQSENT = 6 # Variable c_int
AFSIG_RESTART_IDLE = 0 # Variable c_int
STR_ENCAP_TYPE_VC_MULTIPLEXED_PPP = 5 # Variable c_int
GIG_CONTINUOUS_MODE = 0 # Variable c_int
PPP_LCP_IPCP_ACKSENT = 8 # Variable c_int
HVFD_3 = 3 # Variable c_int
HVFD_2 = 2 # Variable c_int
HVFD_1 = 1 # Variable c_int
NANO_SCALE = 1 # Variable c_int
L3MS_FIELD_VLANTAG = 23 # Variable c_int
ETH_EXTENDED_CARD_INFO = 20503 # Variable c_int
L3_DHCP_STATE_INIT = 1 # Variable c_int
SONET_LINE_RDI_ALARMS = 32 # Variable c_int
XENPAK_10GBASE_EW = 64 # Variable c_int
ATM_ELAN_MIN_AGING_TIME = 10 # Variable c_int
L3_VFD3 = 3 # Variable c_int
ATM_B_BC_SUSC_CLIP = 32 # Variable c_int
L3_VFD2 = 2 # Variable c_int
ATM_QOS_CLASS_1 = 1 # Variable c_int
WN_LOOPBACK_DISABLED = 0 # Variable c_int
ATM_ELAN_LECS_CONFIG_WAIT = 2 # Variable c_int
ATM_STR_ACTION_STOP = 4 # Variable c_int
HTLED_RXGREEN = 32 # Variable c_long
DIFFSERV_IPV4_COUNTERS = 1 # Variable c_int
DOT1X_SUPPLICANT_START = 1 # Variable c_int
CM_AT_9045B = 39 # Variable c_int
XFP_AUX_MONITORING_PLUS_3_3V_SUPPLY_VOLTAGE = 7 # Variable c_int
CAPTURE_GOOD = 256 # Variable c_int
NS_HW_CONFIG_INFO = 39332 # Variable c_int
CAPTURE_EVENTS_IP_OPTION = 32768 # Variable c_int
ATM_SONET_TIMEOUT = 5 # Variable c_int
ATM_CELL_ERROR_RATIO = 512 # Variable c_long
NS_L2_STAT_COUNTER_INFO = 39370 # Variable c_int
GIG_STRUC_STOP = 36904 # Variable c_int
NS_CAPTURE_STATUS_OAM_FRAME = 8192 # Variable c_int
FRAME_REC_MAC_ADDR = 90 # Variable c_int
CM_VG_7605 = 9 # Variable c_int
FR_LOOPBACK_REMOTE_PHY = 2 # Variable c_int
L3_ARPS_STILL_TXING = 2097152 # Variable c_int
PMC_VPN_HW_TEST_FAILURE = 1 # Variable c_int
TCP_SET_CONFIG_EXT = 28827 # Variable c_int
NS_WIS_LINE_STATUS_RESET = 39508 # Variable c_int
ITR_BURSTERRORS = 35 # Variable c_int
DOT1X_SUPPLICANT_FAILURE_EAP_ID_REJECTED = 2 # Variable c_int
ATM_E1_CELL_FRAMING = 11 # Variable c_int
FR_LINE_SPEED_896000L = 896000 # Variable c_long
ATM_QOS_CLASS_3 = 3 # Variable c_int
TCP_HTTP_EXTENDED_CONN_EVENT_INFO = 28759 # Variable c_int
CT_ACTIVE = 1 # Variable c_int
GIG_STATUS_LINK = 512 # Variable c_long
L3_MAX_GROUP_SIZE = 100 # Variable c_int
HIST_LONG_LAT_TIME = 6 # Variable c_int
MII_CTRL_SPEED_MSB = 64 # Variable c_int
IPV6_EXT_FRAGMENT = 44 # Variable c_int
CRC_ERROR = -29 # Variable c_int
NS_PHY_DEFAULT_SPEED_1GHZ = 1000 # Variable c_int
FR_STATUS_UNI_UP = 32768 # Variable c_long
SMB_STD_MASK = 2047 # Variable c_long
NS_STREAM_TYPE_INFO = 39383 # Variable c_int
NS_HIST_MULTICAST_LATENCY_PER_STREAM_INFO = 12305 # Variable c_int
NS_COUNTER_INFO = 39398 # Variable c_int
NS_CAPTURE_STATUS_OVERSIZE = 2 # Variable c_int
PPP_OE_OFFER_AVAILABLE_SERVICE = 16 # Variable c_int
ATM_CALL_PARAM_CALL_DIST_TYPE = 9 # Variable c_int
XENPAK_L_64_2B = 4 # Variable c_int
XENPAK_L_64_2C = 8 # Variable c_int
XENPAK_L_64_2A = 2 # Variable c_int
FRAME_LLC_DSAP = 3 # Variable c_int
XFP_CONNECTOR_COPPER_PIGTAIL = 33 # Variable c_int
ATM_MAX_DELTA = 20 # Variable c_int
WN_STREAMEXT_MOD_CFG = 6093 # Variable c_int
SONET_PATH_BIP8_ERRORS = 8 # Variable c_int
NS_HIST_TCP_CONNECTION_INFO = 12299 # Variable c_int
ITR_BADTOKEN = 36 # Variable c_int
ILMI_DEFAULT_TMR_REG_TIMEOUT = 500 # Variable c_int
ETBNC_JET210 = 99 # Variable c_int
NS_WIS_LINE_STATUS_INFO = 39509 # Variable c_int
XFP_CONNECTOR_LC = 7 # Variable c_int
ETH_COUNTER_INFO = 20497 # Variable c_int
DOT1X_SUPPLICANT_AUTHENTICATION_TYPE = 7 # Variable c_int
NS_EN_RUNTIME_MAX_LATENCY_INDEX = 2 # Variable c_int
WN_STREAM_DEL = 6075 # Variable c_int
L3_DHCP_ACTION_RENEW = 2 # Variable c_int
L3_TX_LATE = 8 # Variable c_long
FRAME_PROTOCOL_TYPE = 84 # Variable c_int
ATM_LED_STATUS_TX = 2 # Variable c_int
PVC_LOCAL_DOWN_STATUS = 5 # Variable c_int
PPP_OE_SELECT_AC_BY_ACNAME = 2 # Variable c_int
PPP_OE_SESSION_STATE = 4 # Variable c_int
INCORRECT_MODE = -4 # Variable c_int
ATM_TD_ABR = 7 # Variable c_int
ATM_DS3_E3_PLCP_OOF_ALARM = 128 # Variable c_int
XENPAK_NVR_VENDOR_PART_NUMBER = 67 # Variable c_int
ATM_ELAN_MAX_ARP_RETRY_COUNT = 2 # Variable c_int
ATTRIB_DUPLEX_FULL = 3 # Variable c_int
MII_REGISTER_1000_CONTROL = 9 # Variable c_int
XFP_OPTIONAL_VPS = 128 # Variable c_int
CA_SIGNALRATE_34MB = 33554432 # Variable c_long
XENPAK_NVR_VENDOR_REVISION = 83 # Variable c_int
MII_STATUS_10_FULL = 4096 # Variable c_int
AUTONOMOUS_ADDRESS_CONFIG = 64 # Variable c_int
ATM_FEATURES_GLOBAL_TRIGGERS = 0 # Variable c_int
FST_CONTROL_AUX = 1282 # Variable c_int
CT_FILTER_OPERATOR_PAT1_AND_PAT2 = 4 # Variable c_int
TR_STATUS_BEACONING = 2048 # Variable c_long
FC_DEST_DUT = 255 # Variable c_int
XENPAK_NVR_CONFIG = 36930 # Variable c_int
TCP_TEAR_DOWN_CLEAN = 28743 # Variable c_int
WN_DS1_110_TO_220_BUILDOUT = 2 # Variable c_int
DOT1X_EAP_TYPE_OTP = 64 # Variable c_int
MII_STATUS_AN_ABILITY = 8 # Variable c_int
WN_DS3_FRMR_STATUS_IDL = 8 # Variable c_int
NS_MULTI_RX_LATENCY = 9 # Variable c_int
CAUSE_INCOR_MSG_LEN = 104 # Variable c_int
NS_CT_DISABLE_PROCESS = 39337 # Variable c_int
CT_L3 = 6 # Variable c_int
VC_TYPE_PVC = 1 # Variable c_int
ATM_E164_AFI = 69 # Variable c_int
TR_STATUS_LATENCY_STABLE = 131072 # Variable c_long
XENPAK_MODULE_10GBASE_EW = 19 # Variable c_int
NS_CAPTURE_STATUS_UNDERSIZE = 1 # Variable c_int
MPLS_LSP_INITIALIZED = 2 # Variable c_int
PAT_RAND = 14 # Variable c_int
ATM_STR_STATUS_CONN_INDEX = 1 # Variable c_int
PPP_STATUS_WEGOT_OPTIONS = 8 # Variable c_int
PATCH_RELEASE = 1 # Variable c_int
ETH_PHY_LOCK_ERROR = 2 # Variable c_int
XFP_OPTIONAL_VPS_LV_REG_MODE = 16 # Variable c_int
L3MS_FIELD_CUSTOM_STREAM_ID = 51 # Variable c_int
NS_MFG_PROM_INFO = 39401 # Variable c_int
ATM_VCDB_PURGE = 78 # Variable c_int
PPP_MAX_FAILURE = 3 # Variable c_int
AT_SDH_FRAMING = 1 # Variable c_int
XENPAK_MODULE_10GBASE_ER = 83 # Variable c_int
CALL_STATE_INCOMING_CALL_PROC = 9 # Variable c_int
DOT1X_SESSION_CONTROL_VARIED_BURST = 2 # Variable c_int
ATM1_PCI_FPGA_VERSION = 3 # Variable c_int
NS_OAM_COUNTER_INFO = 39392 # Variable c_int
SONET_SECTION_OOF_ALARM = 2 # Variable c_int
AT_CLP_ON = 1 # Variable c_int
FR_GROUP_STOP_CMD = 103 # Variable c_int
FR_TRIG_DIR_RX = 0 # Variable c_int
CAUSE_LOC_INTL_NET = 6 # Variable c_int
CX4_MODULE_10GBASE = 5 # Variable c_int
FC_CONFIG_IN_PROGRESS = 0 # Variable c_int
NS_TRIGGER_CONFIG = 39402 # Variable c_int
NS_REAL_TIME_TRACKING_RX_COUNTERS = 39363 # Variable c_int
FR_E1_CRC4_DISABLE = 0 # Variable c_int
LCP_CLOSE_AUTH_FAILURE_PEER_REJ = 3 # Variable c_int
NS_IGMPV3_GROUP_MOD = 39374 # Variable c_int
NS_DOT1X_SUPPLICANT_STATUS_SEARCH_INFO = 39495 # Variable c_int
FC_PRIVATE_DISCOVERY_COMPLETE_STATE = 7 # Variable c_int
ITR_MAC_LINEERRORS = 41 # Variable c_int
TR_MAC_FRAMECOPIED = 65536 # Variable c_long
WN_DS3_LINE_CTRL = 6020 # Variable c_int
NS_MLD_TIMESTAMP_INFO = 39439 # Variable c_int
CONN_STATE_INITIAL_DELAY = 1 # Variable c_int
NS_HW_CONFIG = 39331 # Variable c_int
FC_MULTI_SWITCH_CONFIG = 13650 # Variable c_int
NS_DIFF_SERV_CONFIG_INFO = 39433 # Variable c_int
SERVICE_PARM_CREDIT = 6 # Variable c_int
NS_MULTI_VLAN_PRI_0_RX = 53 # Variable c_int
UL_SET_TO_ONE = 2 # Variable c_int
PORT_MAPPING_COMPATIBLE = 0 # Variable c_int
NS_MULTI_LFS_REMOTE_START = 65 # Variable c_int
MAX_HUBS = 4 # Variable c_int
ATM_ARP_CONN_INACTIVE = 0 # Variable c_int
STREAM_PROTOCOL_SMART_TCP_VLAN = 22 # Variable c_int
WN_TRIG_ENABLE = 1 # Variable c_int
SONET_LINE_LOP_ALARM = 32 # Variable c_int
MII_STATUS_REMOTE_FAULT = 16 # Variable c_int
ATTRIB_SPEED_9952MB = 35 # Variable c_int
PROTOCOL_ENCAP_TYPE_HDLC_WITH_ETHERTYPE = 37 # Variable c_int
NS_TRANSMIT_PADDING_MODE = 39427 # Variable c_int
FAMILY_SMB2000 = 2 # Variable c_int
SMB_STD_ERR_CRC = 64 # Variable c_long
DOT1X_SUPPLICANT_CERTIFICATE_USEMODE = 15 # Variable c_int
CAUSE_UCR_UNAVAILABLE = 37 # Variable c_int
XFP_OPTIONAL_WAVELENGTH_TUNABILITY = 2 # Variable c_int
ETLOCALMODE = 0 # Variable c_int
NS_IPV6_ROUTER_DISCOVERY_COUNT_INFO = 39410 # Variable c_int
XENPAK_TX_ALARM_LASER_OUTPUT_POWER_FAULT_ENABLE = 7 # Variable c_int
NS_MULTI_RX_SIGNATURE_MPLS_FRAMES = 27 # Variable c_int
NS_TRIGGER2_ONLY = 2 # Variable c_int
HTLED_XENPAK_PROFILE_CHANGE = 262144 # Variable c_long
ETH_PHY_RX_ERROR = 8 # Variable c_int
L3MS_FIELD_VC_INDEX = 47 # Variable c_int
XENPAK_10GBASE_LW4 = 128 # Variable c_int
OPTION_LENGTH_IS_ZERO = 8 # Variable c_int
CAUSE_VPCI_VCI_ASSIGN_FAIL = 36 # Variable c_int
FC_PORT_CONFIG_INFO = 13570 # Variable c_int
HT_RUN_LATENCY = 0 # Variable c_int
L3MS_FIELD_ATM_FLAGS = 48 # Variable c_int
NS_MULTI_IPV4_ARP_COUNTERS = 128 # Variable c_int
SLOT_RESERVED_BY_OTHER = 0 # Variable c_int
NSU64IsEq = 1 # Variable c_int
FRAME_ACKNOWLEDGE = 70 # Variable c_int
L3_CTRL_SNMP_OR_RIP_RESPONSES = 4 # Variable c_int
CAPTURE_ALL = 65535 # Variable c_int
WN_DEFINE_SMARTBITS_STREAM = 6131 # Variable c_int
TR_ERR_ABORT_DELIMITER = 16 # Variable c_int
FC_GET_ENTRY_GIVEN_IP_ADDRESS_TX = 3 # Variable c_int
MII_CONTROL9_1000BASE_FULL = 512 # Variable c_int
SMB_STD_ERR_OVERSIZE = 512 # Variable c_long
MII_SELECT_RMII = 1 # Variable c_int
ATM_STR_PARAM_SIG_FW_MBS_0 = 9 # Variable c_int
FRAME_PROTOCOL_NULL = 0 # Variable c_int
IL3_PINGREQ_SENT = 43 # Variable c_int
WN_RFC1490_MAX_TYPE = 4 # Variable c_int
TCP_MAX_CONNECTIONS = 2048 # Variable c_int
SIG_EVENT_INCOMING_RELEASE = 8 # Variable c_int
VG_STATUS_MODE = 512 # Variable c_long
XFP_TRANSCEIVER_10GBASE_ER = 32 # Variable c_int
DOT1X_SUPPLICANT_HELD = 6 # Variable c_int
TR_SPEED_16MBITS = 1 # Variable c_int
FRAME_FLAGS = 59 # Variable c_int
ETH_TRANSMIT_INFO = 53248 # Variable c_int
ATM_DS3_E3_AIS_ALARM = 8 # Variable c_int
NS_MULTI_IPV4_CHECKSUM_ERROR = 21 # Variable c_int
ETSTEP = 1 # Variable c_int
ATM_OC3_FRAMING = 0 # Variable c_int
FC_PRIVATE_DISCOVERY = 13580 # Variable c_int
L3_DHCP_STATE_UNDEFINED = 0 # Variable c_int
SSCOP_DEFAULT_TMR_KEEP_ALIVE = 200 # Variable c_int
FR_LINE_SPEED_6144000L = 6144000 # Variable c_long
GIG_RETRY_16_RX = 2 # Variable c_int
ETH_TRIGGER1_OR_TRIGGER2 = 3 # Variable c_int
FR_NON_GROUP_CMD = 109 # Variable c_int
ATM_STR_STATE_CONN_ESTABLISHED = 5 # Variable c_int
GIG_PHY_LOOP_REMOTE_PHY = 3 # Variable c_int
PPP_OE_SELECT_AC_BY_SVCNAME = 1 # Variable c_int
FR_RFC1490_RTD_NLPID = 2 # Variable c_int
NS_MULTI_IPV4_PING_COUNTERS = 64 # Variable c_int
PPP_LOCAL_AUTH_ID = 6 # Variable c_int
ET_CMDLOG_NOREAD = 16 # Variable c_long
FR_COMMIT_CFG = 23 # Variable c_int
FABRIC_PORT_NAME_NOT_REGISTERED = 23 # Variable c_int
CT_DEFAULT_BUFFER_SIZE_IN_MBYTES = 4 # Variable c_int
FST_CAP_FIRST_64_BYTES = 0 # Variable c_int
ETSELA = 0 # Variable c_int
ITR_INSERTIONS = 40 # Variable c_int
PAT_FF00 = 6 # Variable c_int
ATTRIB_CAN_CAPTURE = 20 # Variable c_int
NSTCL_INVALID_STRUCT_SIZE = -506 # Variable c_int
AFSIG_RESTART_FAIL = 3 # Variable c_int
ETSELB = 1 # Variable c_int
SOURCE_ADDRESS_GLOBAL_UNICAST = 3 # Variable c_int
CONTINUOUS_BURST_MODE = 3 # Variable c_int
FC_WWN_LOGIN = 13578 # Variable c_int
POS_FRAMING_MODE_SDH = 1 # Variable c_int
NS_UDP_IPV6_STREAM_VLAN_INFO = 39387 # Variable c_int
ETCRC_NONE = 2 # Variable c_int
PORT_TX_FAULT = 8 # Variable c_int
L3_RECEIVE_TRACKING_MC_LATENCYPERSTREAM = 9 # Variable c_int
DOT1X_SUPPLICANT_MAX_START = 1 # Variable c_int
ATM_CONN_TRIGGER_INFO = 718 # Variable c_int
XENPAK_ANY_SPECIFIC_FIELD = 0 # Variable c_int
DOT1X_SUPPLICANT_FILL_RIGHT = 2 # Variable c_int
L3_DHCP_STATE_REBINDING = 9 # Variable c_int
MPLS_ROUTING_DOMAIN_CREATE = 38917 # Variable c_int
CM_AT_9155C = 33 # Variable c_int
L3_SET_DEFINESTREAMS = 16 # Variable c_int
RXLED_NONE = 0 # Variable c_int
FST_CAPTURE_STATUS_OVERSIZE = 8 # Variable c_int
WN_CAPTURE_CTRL_ALL = 6129 # Variable c_int
NS_MULTI_IPV4_PING_REQUESTS_TX = 41 # Variable c_int
NS_ARP_CONFIG = 39395 # Variable c_int
ATM_LOGFILE_READ_INFO = 112 # Variable c_int
WN_HIST_ADD_LINE = 6310 # Variable c_int
STR_ENCAP_TYPE_LLC_VCM_PPPOE = 7 # Variable c_int
CA_CAN_ROUTE = 256 # Variable c_long
XFP_IDENTIFIER_XFP_E = 8 # Variable c_int
ATM_CALL_PARAM_INTER_CALL_GAP_RND_DELTA = 19 # Variable c_int
STREAM_PROTOCOL_IP_PPPOAOE = 26 # Variable c_int
L3_RECEIVE_TRACKING_SEQUENCE = 1 # Variable c_int
FC_DEFINE_STREAM = 13590 # Variable c_int
SERVICE_PARM_INIT_CTRL = 2 # Variable c_int
NS_MLD_CLEAR_COUNTERS = 39503 # Variable c_int
NS_QUERY_SUBPROCESS = 20520 # Variable c_int
PPP_LOCAL_AUTH_PW = 7 # Variable c_int
FST_PROTOCOL_RESPOND_ARP = 1 # Variable c_int
XENPAK_NVR_VERSION_NUMBER = 0 # Variable c_int
XENPAK_NVR_VENDOR_SPECIFIC = 167 # Variable c_int
CM_AT_9045 = 19 # Variable c_int
TCP_HTTP_COOKIE_CONFIG = 28755 # Variable c_int
LASER_ENABLE = 1 # Variable c_int
WN_T1E1_LINE_FILL_CFG = 6063 # Variable c_int
HTLED_TRIGLOSGREEN = 128 # Variable c_long
PPP_OE_STARTED = 1 # Variable c_int
L3MS_FIELD_VFD2_PATTERN = 68 # Variable c_int
CALL_STATE_IDLE = 0 # Variable c_int
PET_TRAN = 16 # Variable c_int
L3MS_FIELD_VFD1_MODE = 64 # Variable c_int
FRAME_SNAP_PROTOCOL_ID = 7 # Variable c_int
GIG_STRUC_ALT_TX = 36871 # Variable c_int
NS_TX_SIGNATURE_STOP = 1 # Variable c_int
DS3_AIS_ALARM = 16 # Variable c_int
AN_SETTINGS_NOT_VERIFIED = -1104 # Variable c_int
SYNC_GPS_MASTER_AND_INOUT_SLAVE = 2 # Variable c_int
SYNEND = 5 # Variable c_int
ATM_SAR_BOOT_FAILURE = 16 # Variable c_int
AT_CLP_OFF = 0 # Variable c_int
FR_CARD_NET = 1 # Variable c_int
FC_FSPF_STATS_INFO = 13666 # Variable c_int
TR_MAC_BURSTERRORS = 2048 # Variable c_long
AT_VC_DELETE = 39173 # Variable c_int
CT_ATM_SIGNALING = 9 # Variable c_int
MPLS_LSP_ESTABLISHED = 4 # Variable c_int
XFP_IDENTIFIER_MODULE_SOLDERED = 2 # Variable c_int
DOT1X_SUPPLICANT_SEND_EAP_START = 8 # Variable c_int
PPP_STATUS_SEARCH_INFO = 21012 # Variable c_int
ATM_TRIGGER_DIR_TX = 1 # Variable c_int
FR_ETSTAT_FRAMEWAITING = 65536 # Variable c_int
GIG_RETRY_INFINITE = 1 # Variable c_int
FC_COUNTER_INFO = 13573 # Variable c_int
PPP_OE_SERVER = 2 # Variable c_int
ETBAUD_19200 = 3 # Variable c_int
ATM_CALL_PARAM_CALL_SETUP_PARAMS_INDEX = 7 # Variable c_int
NS_LINK_FAULT_INFO = 39522 # Variable c_int
FRAME_HEADER_CRC = 63 # Variable c_int
FIBER_MODE = 0 # Variable c_int
ATMV_FIELD_PCR = 4 # Variable c_int
ATM_TX_AAL_PDU = 131072 # Variable c_long
GIG_AFN_ACKNOWLEDGE = 16384 # Variable c_int
PROTOCOL_TYPE_IP = 2 # Variable c_int
TR_PURGEEVENTS = 32 # Variable c_long
MAX_PORTS = 4 # Variable c_int
ETMF_RXTRIG_COUNT = 1 # Variable c_int
DOT1X_TTLS_PHASE2_UNDEFINED = 0 # Variable c_int
ATM_STR_PARAM_GEN_RATE_CLASS = 0 # Variable c_int
ATM_ELAN_TYPE_802_5 = 1 # Variable c_int
ATM_ILMI_STATIC_REGISTER = 726 # Variable c_int
ETCOM4 = 3 # Variable c_int
ENCAP_ETHERNET = 0 # Variable c_int
ETCOM6 = 5 # Variable c_int
ETCOM7 = 6 # Variable c_int
ETCOM1 = 0 # Variable c_int
ETCOM2 = 1 # Variable c_int
ETCOM3 = 2 # Variable c_int
FR_IPSUBNET_NOT_DEFINED = 65535 # Variable c_int
STREAM_PROTOCOL_LLC_BRIDGED = 32 # Variable c_int
NS_MLDV2_STATS_INFO = 39470 # Variable c_int
ETCOM8 = 7 # Variable c_int
CAPTURE_LENGTH_LAST_64_BYTES = 2 # Variable c_int
ATM_STREAM_PARAMS_COPY = 731 # Variable c_int
NS_IGMPV3_GROUP_CONFIG = 39373 # Variable c_int
L3_RX_STACK = 64 # Variable c_long
PPP_NCPS_ACKSENT = 8 # Variable c_int
NS_MULTI_MPLS_COUNTERS = 16 # Variable c_int
ATM_CELL_TIME_FRAC = 8 # Variable c_int
NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_2 = 9 # Variable c_int
PPP_STATS_INFO = 20995 # Variable c_int
NS_SONET_SECTION_LOF_ALARM = 256 # Variable c_int
FC_SWITCH_TOPOLOGY_FULL_MESH = 3 # Variable c_int
FST_BASE_ITYPE = 1280 # Variable c_int
IP_INC_SEQ_NUM = 16 # Variable c_int
CAPTURE_LENGTH_1ST_64_BYTES = 1 # Variable c_int
ATM_CALL_DIST_SMOOTH = 0 # Variable c_int
CALL_STATE_OUTGOING_CALL_PROC = 3 # Variable c_int
PPP_MOD_DESTIPV6 = 32 # Variable c_int
CAUSE_AAL_NOT_SUPPORTED = 78 # Variable c_int
TCP_SET_EXTENSION_MODE = 28826 # Variable c_int
ATM_LED_STATE_MASK = 65280 # Variable c_int
ATM_CELL_LOSS_RATIO = 2048 # Variable c_long
ETBAUD_4800 = 1 # Variable c_int
L3MS_FIELD_SIP = 5 # Variable c_int
CAUSE_NORMAL_CALL_CLEAR = 16 # Variable c_int
FR_LINE_SPEED_1792000L = 1792000 # Variable c_long
NS_FIELD_UNCHANGED = 65535 # Variable c_int
XFP_AUX_MONITORING_MINUS_5_2V_SUPPLY_VOLTAGE = 9 # Variable c_int
L3MS_FIELD_TRAFFIC_CLASS = 43 # Variable c_int
ATM_ELAN_INIT_NORMAL = 0 # Variable c_int
ATM_DS3_E3_FERF_ALARM = 4 # Variable c_int
FC_COS_QUERY = 13622 # Variable c_int
XFP_ENCODING_RZ = 8 # Variable c_int
L3MS_FIELD_IP_LIMIT_COUNT = 36 # Variable c_int
ATM_ELAN_LES_JOIN_WAIT = 4 # Variable c_int
FR_VFD_DECREASING = 3 # Variable c_int
FR_ETSTAT_CRCLED = 16 # Variable c_int
MAX_SLOTS_SMB200 = 4 # Variable c_int
TCP_HIST_ACTIVE_TEST_INFO = 28773 # Variable c_int
WN_VFD_STATIC = 4 # Variable c_int
INVALID_COMMON_SERVICE_PARMS = 9 # Variable c_int
MPLS_RSVP_SERVICE_CONTROLLED_LOAD_OBJECT = 2 # Variable c_int
WN_DS3_FRMR_STATUS_CBIT = 32 # Variable c_int
ATM_CLIP_ESTABLISH_CLIENT = 95 # Variable c_int
NS_AGGR_LATENCY_PRECISION_INFO = 12545 # Variable c_int
PPP_MOD_SRCIP = 1 # Variable c_int
L3_DHCP_STATE_REQUESTING = 5 # Variable c_int
ETDP_0000FFFF = 9 # Variable c_int
FST_CAPTURE_STATUS_CRC = 1 # Variable c_int
MULTI_USER_INCAPABLE = 0 # Variable c_int
NS_MOD_IPV6_EXT_DESTINATION = 39450 # Variable c_int
CAUSE_NO_ROUTE_TO_DEST = 3 # Variable c_int
ATM_ARP_CONN_ESTABLISHED = 2 # Variable c_int
GIG_AFN_NEXT_PAGE = 32768 # Variable c_int
TCP_HTTP_URI_CONFIG = 28753 # Variable c_int
VCDB_STATE_STABLE = 8 # Variable c_int
TR_PROPERTY_ENTRY = 4 # Variable c_int
HBA_LINK_UP = 1 # Variable c_int
NS_MULTI_RX_SIGNATURE_FRAMES = 3 # Variable c_int
NS_MULTI_LFS_REMOTE_CONTINUE = 66 # Variable c_int
C_ANNEX_A_PARM = 3 # Variable c_int
MPLS_BASE_NUM = 38912 # Variable c_int
ATM_CALL_PARAM_INTER_BURST_GAP = 21 # Variable c_int
FAMILY_UNKNOWN = 0 # Variable c_int
MIN_FFOM_LIMIT = 0 # Variable c_int
SMB_VG_INV_PKTMARK = 1 # Variable c_int
IL3_RX_TAGS = 36 # Variable c_int
PPPO_USENONE = 0 # Variable c_int
LCP_CLOSE_REASON_UNKNOWN = 0 # Variable c_int
NO_ADDITIONAL_EXPLANATION = 0 # Variable c_int
NS_WIS_LINE_LOP_ALARM = 32 # Variable c_int
ATM_B_BC_UNI40_CBR = 5 # Variable c_int
VCDB_LOSS_OF_TRANS = 262144 # Variable c_int
NS_TRANSMIT_PADDING_MODE_INFO = 39428 # Variable c_int
SONET_SECTION_BIP8_ERRORS = 2 # Variable c_int
L3_VFD_DECR = 2 # Variable c_int
ITR_MAC_ACERRORS = 44 # Variable c_int
FR_UNI_DOWN = 1 # Variable c_int
NS_HIST_EN_ENHANCED_RUNTIME = 4 # Variable c_int
SOURCE_ADDRESS_SITE_LOCAL_UNICAST = 2 # Variable c_int
AT_SONET_FRAMING = 0 # Variable c_int
NS_VERSION_RELEASED = 1 # Variable c_int
CT_VG = 5 # Variable c_int
XENPAK_SONET_SDH = 16 # Variable c_int
PPP_DELETE = 21017 # Variable c_int
WN_T1E1_LINE_DEL_ALL = 6066 # Variable c_int
NS_MPLS_HEADER = 10 # Variable c_int
FR_LINE_SPEED_768000L = 768000 # Variable c_long
TR_STATUS_RING_ALIVE = 65536 # Variable c_long
FC_LINKUP = 13577 # Variable c_int
ATM_FEATURES_PER_CONN_TRIGGERS = 1 # Variable c_int
TCP_DISABLE_DATA_SEND = 28722 # Variable c_int
NS_HIST_EN_TOTAL_LATENCY = 2 # Variable c_int
PPP_OE_IGNORE_EOL_TAG = 32 # Variable c_int
ETLOOPBACK_OFF = 0 # Variable c_int
XENPAK_MODULE_10GBASE_SW = 51 # Variable c_int
XENPAK_PHY_MODE_LAN = 1 # Variable c_int
CA_CONNECT_V35 = 2097152 # Variable c_long
NS_MULTI_VLAN_PRI_6_RX = 59 # Variable c_int
PROTO_PPP_ONLY = 2 # Variable c_int
PPP_USE_PPP_SESSION_ID = 4 # Variable c_int
UL_COMPLEMENT = 0 # Variable c_int
PPP_IP_ENABLE = 11 # Variable c_int
HTLED_LINK_PAUSE = 12 # Variable c_long
AT_ENCAP_TYPE_VCM_IPV4 = 1 # Variable c_int
ATM_STR_PARAM_SIG_BW_PCR_01 = 12 # Variable c_int
AT_PATH_SIGNAL_LABEL_HDLC = 207 # Variable c_int
ATM_TD_COMBO_RATES_W_TAG = 3 # Variable c_int
CT_FILTER_PROTOCOL_ID_ICMP = 32 # Variable c_int
FR_MAX_PVC_STATUS_TYPE = 3 # Variable c_int
SMB_STD_TXTRIGGER = 4 # Variable c_long
FST_CAPTURE_COUNT_INFO = 1285 # Variable c_int
NS_SIGNATURE_DETECT_MODE = 39416 # Variable c_int
TCP_START_TEST = 28684 # Variable c_int
ATM_TX_CELLS = 65536 # Variable c_long
LOGFILE_CLEAR = 3 # Variable c_int
ETH_PHY_BAD_SSD_ERROR = 32 # Variable c_int
PAT_00FF = 7 # Variable c_int
AT_LOOPBACK_LOCAL = 1 # Variable c_int
COPPER_MODE = 1 # Variable c_int
NS_SONET_LINE_AIS_ALARM = 32 # Variable c_int
GPS_STATUS_UNKNOWN = 0 # Variable c_int
ATM_LED_STATE_PHY_UP = 256 # Variable c_int
TCP_RESET_ALL = 28678 # Variable c_int
ETBNC_RXTRIG = 21 # Variable c_int
GIG_STRUC_INIT = 36902 # Variable c_int
FR_STATUS_EIA_TM = 524288 # Variable c_long
WN_E1_AMI_ENCODING = 0 # Variable c_int
NS_IGMP_CLEAR_COUNTERS = 39504 # Variable c_int
FC_LOG_LEVEL_DEBUG = 8 # Variable c_int
CAPTURE_EVENTS_VLAN_TAG = 8 # Variable c_int
GIG_STATUS_100MHZ = 65536 # Variable c_long
CT_TRAFFIC_DIRECTION_NONE = 0 # Variable c_int
ETH_VLAN_PRI_6 = 6 # Variable c_int
ETH_VLAN_PRI_7 = 7 # Variable c_int
ETH_ENHANCED_STATUS_INFO = 20499 # Variable c_int
ETH_VLAN_PRI_5 = 5 # Variable c_int
ETH_VLAN_PRI_2 = 2 # Variable c_int
ETH_VLAN_PRI_3 = 3 # Variable c_int
ETH_VLAN_PRI_0 = 0 # Variable c_int
ETH_VLAN_PRI_1 = 1 # Variable c_int
L3_RECEIVE_TRACKING_LATENCY_PRECISION = 14 # Variable c_int
IATM_SEVERE_ERROR_CB_RATIO = 42 # Variable c_int
ATM_FRAMER_CONFIG_FAILURE = 2 # Variable c_int
ATM_STR_PARAM_CELL_HEADER = 25 # Variable c_int
STREAM_PROTOCOL_ICMP_IPV6_VLAN = 31 # Variable c_int
ET_ON = 1 # Variable c_int
FRAME_DST_MAC_ADDR = 1 # Variable c_int
NS_LOOP_TIMED_CLOCK = 1 # Variable c_int
STOP_ADDRESS_AUTOCONFIGURATION = 8 # Variable c_int
FRAME_SRC_SOCKET = 93 # Variable c_int
IP_INC_SRC_IP_AND_DST_MAC = 27 # Variable c_int
HTLED_TXRED = 1 # Variable c_long
FR_STATUS_EIA_DCD = 262144 # Variable c_long
ITR_PURGEEVENTS = 37 # Variable c_int
NS_HIST_EN_SCALE_1_MILLISECOND = 256 # Variable c_int
IATM_MISINSERTION = 44 # Variable c_int
XFP_AUX_MONITORING_PLUS_1_8V_SUPPLY_VOLTAGE = 8 # Variable c_int
WN_TRIG_DIR_TX = 1 # Variable c_int
AT_RATE_CLASS_CBR = 0 # Variable c_int
ATTRIB_BUILT_IN_ADDRESS = 16 # Variable c_int
DOT1X_SUPPLICANT_STOP = 2 # Variable c_int
NS_EN_RUNTIME_TIMESTAMP_INDEX = 6 # Variable c_int
XFP_TRANSCEIVER_10GBASE_SR = 128 # Variable c_int
GIG_CAP_TRIGGER = 4 # Variable c_int
NS_HIST_ENHANCED_LATENCY_OPTION_INFO = 39525 # Variable c_int
NS_VFD_STATIC = 0 # Variable c_int
PPP_IPX_COMPRESS = 18 # Variable c_int
NS_WIS_PSLM_ALARM = 1024 # Variable c_int
AT_RX_CT_PROTOCOL_PPP = 257 # Variable c_int
ATM_ELAN_MTU_18190 = 4 # Variable c_int
FR_LMP_LMI = 1 # Variable c_int
WN_TRIG_COMP1_OR_COMP2 = 4 # Variable c_int
PPP_STATUS_WEACK_OPTIONS = 9 # Variable c_int
XAUI_PRBS_TEST_COMPLETED = 2 # Variable c_int
FR_CARD_DTE = 0 # Variable c_int
WN_E1_120_OHM_HIRL = 4 # Variable c_int
MII_STATUS_AN_COMPLETE = 32 # Variable c_int
FR_DS3_CBIT_LINE_FRAMING = 2 # Variable c_int
UNSUPPORTED_PLATFORM = -35 # Variable c_int
FRAME_FIN_BIT = 78 # Variable c_int
NS_VLAN_LIST_SIZE = 32 # Variable c_int
L3MS_FIELD_FC_DEST_WWN = 61 # Variable c_int
NS_IGMPV3_STATS_INFO = 39376 # Variable c_int
ATM_MAX_SETUP_CONNECTIONS = 8388606 # Variable c_int
CM_LAN_3325A = 72 # Variable c_int
FR_TX_ECHO = 3 # Variable c_int
ATTRIB_LAN_3201C = 39 # Variable c_int
AT_ENCAP_TYPE_LLC_BRIDGED = 9 # Variable c_int
PPP_LOCAL_IPADDR = 13 # Variable c_int
ETH_PROTOCOL_DISABLED = 0 # Variable c_int
XENPAK_RX_ALARM_WIS_LOCAL_FAULT_ENABLE = 9 # Variable c_int
AT_USRDATA_NOT_CONGESTED = 0 # Variable c_int
IGMP_V3 = 3 # Variable c_int
IGMP_V2 = 2 # Variable c_int
IGMP_V1 = 1 # Variable c_int
MPLS_LSP_COPY_DELTA = 38930 # Variable c_int
SMB_STD_RXTRIGGER = 32 # Variable c_long
ETH_ENHANCED_COUNTER_INFO = 20498 # Variable c_int
ATM_LINE = 2 # Variable c_int
NS_MULTI_RX_UNDERSIZE = 30 # Variable c_int
VCDB_LOSS_OF_DELETED = 524288 # Variable c_int
POS_CARD_PORT_ENCAP = 24852 # Variable c_int
FR_VFD3_BUFFER = 12 # Variable c_int
CAUSE_LOC_USER = 0 # Variable c_int
GIG_PHY_LOOP_LOCAL_XCVR = 4 # Variable c_int
RUN_NON_BLOCKING_FLAG = 256 # Variable c_int
NS_EN_RUNTIME_OUT_SEQUENCE_INDEX = 5 # Variable c_int
PPP_STATUS_FAILURE_CODE = 4 # Variable c_int
CA_SIGNALRATE_8MB = 4194304 # Variable c_long
PET_MSG = 8192 # Variable c_int
NS_MULTI_IPV6_COUNTERS = 4 # Variable c_int
FAMILY_SMB6000C_NTS5000A = 5 # Variable c_int
ETBNC_COLLISIONA = 10 # Variable c_int
ETSMB6000MAXSLOT = 12 # Variable c_int
TCP_SETUP_STREAM = 28772 # Variable c_int
ETBNC_COLLISIONB = 11 # Variable c_int
FR_TRIG_COMP1_ONLY = 1 # Variable c_int
ACTIVE_HUB_NOT_PRESENT = -12 # Variable c_int
L3MS_FIELD_FLOW_LABEL = 44 # Variable c_int
ATM_STR_STATE_IDLE = 0 # Variable c_int
ETH_PHY_REMOTE_FAULT = 128 # Variable c_int
WN_LOOPBACK_LOCAL_PHY = 1 # Variable c_int
WN_HIST_DEL_LINE = 6311 # Variable c_int
ATM_SAAL_INFO = 730 # Variable c_int
WN_DS1_E1_LOS_ALARM = 4 # Variable c_int
L3MS_FIELD_VFD1_PATTERN = 65 # Variable c_int
ETH_PHY_PAUSE_RX_ENABLED = 131072 # Variable c_int
MEMORY_ALLOCATION_ERROR = -14 # Variable c_int
HTTRIGGER_2 = 2 # Variable c_int
HTTRIGGER_1 = 1 # Variable c_int
L3MS_FIELD_RTP_SSRC = 30 # Variable c_int
MII_STATUS_MF_PREAMBLE_SUP = 64 # Variable c_int
NS_HIST_RAW_SIGNATURE_INFO = 12325 # Variable c_int
MAX_EVENT_DATA_LEN = 140 # Variable c_int
PPP_CLEAR_SESSION_STATS = 8 # Variable c_int
PPP_OE_MOD_FRAME = 23 # Variable c_int
NS_RATE_INFO = 39462 # Variable c_int
FR_ENABLE_PORT = 42 # Variable c_int
SSCOP_DEFAULT_MAX_PD = 25 # Variable c_int
SAAL_STATE_IDLE = 1 # Variable c_int
L3MS_FIELD_DMAC = 0 # Variable c_int
FRAME_PROTOCOL = 62 # Variable c_int
CA_SIGNALRATE_2_048MB = 134217728 # Variable c_long
ETREMOTEMODE = 1 # Variable c_int
GIG_STRUC_BG2 = 36880 # Variable c_int
TCP_FLAG_URG = 32 # Variable c_int
DOT1X_USER_MODE_FORCE_FAILURE = 2 # Variable c_int
GIG_STRUC_CAP_INFO = 36866 # Variable c_int
WN_TRIGGER_CTRL = 6100 # Variable c_int
SOURCE_ADDRESS_SELECT_FAILED = 1024 # Variable c_int
GIG_CONTROL_IP_FLOW_GENERATE = 1 # Variable c_int
L3_IGMP_RESET = 28708 # Variable c_int
MEDIA_USER_EXPLICIT_MODE = 0 # Variable c_int
NS_LINK_FAULT_LOCAL = 1 # Variable c_int
XFP_TRANSCEIVER_1200_MX_SN_L = 128 # Variable c_int
NS_MULTI_NEIGHBOR_SOLICITATION_TX = 43 # Variable c_int
DEVICE_NOT_READY = -22 # Variable c_int
TCP_ADD_GENERATOR_ADDR = 1015 # Variable c_int
ETBNC_RCKA = 3 # Variable c_int
HT_LATENCY_REPORT = 3 # Variable c_int
XENPAK_OPTICAL_FC_PC_TYPE = 5 # Variable c_int
FR_LINE_SPEED_1088000L = 1088000 # Variable c_long
L3MS_FIELD_STREAM_START = 33 # Variable c_int
XENPAK_10GBASE_LR = 2 # Variable c_int
RXLED_ALIGNA = 10 # Variable c_int
ATM_E1_PLCP_FRAMING = 12 # Variable c_int
RXLED_ALIGNB = 11 # Variable c_int
NS_START_NEIGHBOR_DISCOVERY = 34572 # Variable c_int
NS_DEFINE_IPV6_EXT_HOP_BY_HOP = 39441 # Variable c_int
WN_DS3_FRMR_STATUS_RED = 64 # Variable c_int
GIG_PHY_LOOP_REMOTE_PHY_XS = 8 # Variable c_int
NS_CAPTURE_STATS_INFO = 8196 # Variable c_int
CA_VFDRESETCOUNT = 512 # Variable c_long
UNSUPPORTED_INTERLEAVE = -15 # Variable c_int
XFP_CONNECTOR_FIBERJACK = 6 # Variable c_int
L3_DHCP_ACTION_REBOOT = 1 # Variable c_int
TRFC_PCF_CLAIMTOKEN = 3 # Variable c_int
L3MS_FIELD_STREAM_SIGNATURE = 32 # Variable c_int
WN_STREAM_STATUS = 6261 # Variable c_int
CA_ATM_SIGNALING = 1048576 # Variable c_long
ETDP_00FF = 7 # Variable c_int
LCP_NOT_CFGD = 3 # Variable c_int
PET_SSCOP_MSG_TRAFFIC = 8 # Variable c_int
GIG_AFN_RESERVED1 = 2 # Variable c_int
SMB_VG_TRANSTRAIN_PKT = 4 # Variable c_int
ATM_B_BC_NOT_SUSC_CLIP = 0 # Variable c_int
MPLS_EXPLICIT_ROUTE_AS = 3 # Variable c_int
GIG_AFN_RESERVED0 = 1 # Variable c_int
L3MS_FIELD_SIPB = 16 # Variable c_int
FUNCTION_ABORT = -10 # Variable c_int
WN_HIST_CHAN_CFG = 6120 # Variable c_int
NS_MULTI_IPV4_COUNTERS = 2 # Variable c_int
ATM_MAX_MOD_DATA = 12 # Variable c_int
LOGFILE_SIZE_12288 = 12288 # Variable c_int
NS_MLDV2_GROUP_CONFIG = 39468 # Variable c_int
L3MS_FIELD_RTP_PT = 31 # Variable c_int
FC_MULTI_SWITCH_CONFIG_INFO = 13651 # Variable c_int
FRAME_TYPE = 0 # Variable c_int
POS_READ_SPEED = 1829 # Variable c_int
GIG_STRUC_RATE_INFO = 36876 # Variable c_int
FC_RECV_CUSTOM = 13593 # Variable c_int
NS_IGMPV2_JOIN = 39420 # Variable c_int
SERIAL_PORT_DATA = -7 # Variable c_int
GIG_RECEIVE = 1 # Variable c_int
WN_DEFINE_MULTI_SMARTBITS_STREAM = 6135 # Variable c_int
CAPTURE_COLLISION = 32 # Variable c_int
ATM_CALL_SETUP = 720 # Variable c_int
TR_TOKEN_RT = 1048576 # Variable c_long
WN_CONN_PPP = 2 # Variable c_int
HUB_ACT_AS_MASTER = 3 # Variable c_int
GIG_STATUS_1420 = 8192 # Variable c_long
MII_STATUS_10_HALF = 2048 # Variable c_int
ETCOLLISION_MAX = 4 # Variable c_int
AT_CELL_SCRAMBLING_BOTH = 3 # Variable c_int
XENPAK_MODULE_10GBASE_LR = 99 # Variable c_int
FR_CLK_RISING_EDGE = 0 # Variable c_int
ACCESS_DENIED = 25 # Variable c_int
NS_ALTERNATE_KEY_ENABLE = 1 # Variable c_int
PPP_STATUS_PPPOE_SESSIONID = 15 # Variable c_int
ITR_MAC_INTERNALERRORS = 42 # Variable c_int
NO_REASON_CODE = 0 # Variable c_int
NS_DIFF_SERV_COUNTER_INFO = 20519 # Variable c_int
WN_FEATURES_PROTOCOL_TRACE = 8 # Variable c_int
FR_DUMP_MEM_INFO = 71 # Variable c_int
ATM_ARP_CONN_RELEASED = 3 # Variable c_int
CA_BUILT_IN_ADDRESS = 32768 # Variable c_long
WN_CARD_IDENT = 15 # Variable c_int
FRAME_FLAG_SOURCE_FRAME_FOR_COPY = 4 # Variable c_int
FAST7410_STATUS_TX_PAUSE = 1024 # Variable c_long
CAPTURE_EVENTS_NO_SIGNATURE = 4096 # Variable c_int
XFP_TRANSCEIVER_S_64_1 = 128 # Variable c_int
HTLED_FULL_DUPLEX = 256 # Variable c_long
HT_GET_LATENCY = 1 # Variable c_int
ATM_CALL_PARAM_INTER_CALL_GAP = 18 # Variable c_int
FST_PROTOCOL_GENERATE_PING = 2 # Variable c_int
NS_DIFF_SERV_CONFIG = 39432 # Variable c_int
DIFFSERV_IPV6_COUNTERS = 2 # Variable c_int
LOOP_PORT_B = 1 # Variable c_int
NS_CT_CONFIG_CAPTURE_PARAMS = 39340 # Variable c_int
FC_FABRIC_INIT_STATE = 1 # Variable c_int
GIG_TRIGGER1_AND_TRIGGER2 = 2 # Variable c_int
STR_CONN_TYPE_PVC = 0 # Variable c_int
CONN_STATE_STOPPED_ON_ERROR = 8 # Variable c_int
FLOWCONTROL_ENABLED = 1 # Variable c_int
PPP_OE_DESTMAC = 29 # Variable c_int
FR_HIST_L3_LONGLATENCY = 6 # Variable c_int
MII_CTRL_LOOPBACK = 16384 # Variable c_int
ETH_PROTOCOL_RESPOND_ARP = 1 # Variable c_int
GIG_STRUC_AUTO_FIBER_NEGOTIATE_INFO = 36939 # Variable c_int
DIFFSERV_OFFSET_FROM_IPV4_HEADER = 2 # Variable c_int
FR_LOAD_FPGA_IMAGE = 2 # Variable c_int
FC_WWN_COUNT_INFO = 13584 # Variable c_int
PAT_1111 = 1 # Variable c_int
ETPINGPONG = 2 # Variable c_int
XAUI_PRBS_CONFIG_INFO = 36937 # Variable c_int
FRAME_SRC_MAC_ADDR = 2 # Variable c_int
ETH_PROTOCOL_PARAMETERS = 20507 # Variable c_int
FC_NODE_NL_PORT = 2 # Variable c_int
XFP_TRANSCEIVER_64_2a = 64 # Variable c_int
PET_SIG_HEADLINES = 1024 # Variable c_int
TR_STATUS_EARLY_TOKEN_RELEASE = 8192 # Variable c_long
ARP_NORMAL_MODE = 0 # Variable c_int
L3_SET_MODIFYSTREAMS = 19 # Variable c_int
PPP_OE_SESSION_START = 21008 # Variable c_int
ATM_STR_STATUS_SVC_CAUSE_LOC = 7 # Variable c_int
ETBNC_TXTRIG = 20 # Variable c_int
INVALID_SYNC_CONFIGURATION = -31 # Variable c_int
SIG_TRACE_STOP_ON_SEVERE_ERROR = 0 # Variable c_int
DOT1X_SUPPLICANT_FAILURE_NONE = 0 # Variable c_int
ATM_TD_QUAL_PEAK_RATES_W_TAG = 1 # Variable c_int
ATM_OC12_FRAMING = 2 # Variable c_int
WN_DEFINE_MULTI_IP_STREAM = 6136 # Variable c_int
FST_CAPTURE_DATA_INFO = 1287 # Variable c_int
PET_XCTRL = 128 # Variable c_int
FC_PORT_ID_QUERY = 13621 # Variable c_int
WN_STREAM_DEL_ALL = 6076 # Variable c_int
FC_FSPF_STATS_CONFIG = 13656 # Variable c_int
NS_MULTI_CAPTURE_DESCRIPTOR_FORMAT_ETHEREAL = 1 # Variable c_int
CAUSE_VPI_VCI_UNACCEPTABLE = 10 # Variable c_int
MDIO_ACCESS_8_VIA_0_3 = 1 # Variable c_int
ATM1_MAIN_FW_VERSION = 0 # Variable c_int
ETSMB600MAXSLOT = 2 # Variable c_int
ARP_ALL_VLAN_TAG = 0 # Variable c_int
ATM_STR_PARAM_SIG_BW_SCR_01 = 14 # Variable c_int
LOGICAL_BUSY = 4 # Variable c_int
FRAME_DST_SOCKET = 92 # Variable c_int
HTTRIGGER_INDEPENDENT = 4 # Variable c_int
HT_CBA_4 = 4 # Variable c_int
HT_CBA_5 = 5 # Variable c_int
HT_CBA_6 = 6 # Variable c_int
HT_CBA_7 = 7 # Variable c_int
ETCRC_OFF = 0 # Variable c_int
HT_CBA_9 = 9 # Variable c_int
WN_DS3_LINE_CFG = 6021 # Variable c_int
TCP_ICMP_GET_ROUTE = 28721 # Variable c_int
ATM_ELAN_MIN_ARP_RETRY_COUNT = 0 # Variable c_int
TR_MAC_FREQUENCYERROR = 131072 # Variable c_long
INVALID_PORT_NAME = 7 # Variable c_int
WN_CONN_FRAME_RELAY = 1 # Variable c_int
ETMF_TXTRIG_RATE = 6 # Variable c_int
POS_FRAMING_MODE_SONET = 0 # Variable c_int
WN_T1E1_ALARM_COUNTER_INFO = 6251 # Variable c_int
NS_DIFF_SERV_V2_CONFIG_INFO = 39513 # Variable c_int
FR_VFD_OFF = 0 # Variable c_int
ATM_STR_PARAM_DEST_MAC_ADDR = 27 # Variable c_int
HT_LATENCY_OFF = 0 # Variable c_int
CM_WN_3420 = 26 # Variable c_int
HTECHO_ON = 1 # Variable c_int
TRFC_PCF_RINGPURGE = 4 # Variable c_int
ATM_CALL_PARAM_CALL_STOP_ON_ERROR = 11 # Variable c_int
CONN_STATE_INTER_BURST_DELAY = 6 # Variable c_int
NS_CAPTURE_STATUS_TRIGGER = 4 # Variable c_int
PVCAD_DEFAULT_PORT = 0 # Variable c_int
SONET_PATH_AIS_ALARMS = 64 # Variable c_int
ATM_PVCAD_DISABLE = 73 # Variable c_int
ITR_MAC_LOSTFRAME = 46 # Variable c_int
FR_SET_START_CFG = 22 # Variable c_int
L3_CONTINUOUS_MULTIBURST_MODE = 2 # Variable c_int
SONET_SECTION_LOS_ALARM = 1 # Variable c_int
ATM_LOOPBACK_INPUT_RX_TX = 2 # Variable c_int
PAT_INCW = 10 # Variable c_int
TCP_SET_ISP_CONNECTIONDATA_ARRAY = 98 # Variable c_int
XFP_TRANSCEIVER_1NT_REACH_1300_NM_FP = 16 # Variable c_int
CM_LAN_3324A = 71 # Variable c_int
COLLISION_ADJ = 2 # Variable c_int
FC_NODE_CONFIG = 13668 # Variable c_int
NS_ALTERNATE_KEY_CONFIG = 39403 # Variable c_int
SERVICE_PARM_CONCURRENT_SEQS = 5 # Variable c_int
FR_LINE_SPEED_1984000L = 1984000 # Variable c_long
VG_CFG_NO_PRIO_PROMO = 0 # Variable c_int
FC_GET_ENTRY_GIVEN_PORT_TYPE_TX = 1 # Variable c_int
ATM_ILMI = 9 # Variable c_int
RXLED_ALIGNAB = 12 # Variable c_int
CAPTURE_EVENTS_CRC_ERRORS = 1 # Variable c_int
ETVFD_DISABLE = 0 # Variable c_int
FC_STREAM_COS_NONE = 0 # Variable c_int
CA_CAN_COLLIDE = 4096 # Variable c_long
FC_HBA_CONFIG = 13625 # Variable c_int
STR_ENCAP_TYPE_LANE_802_3 = 1 # Variable c_int
MAX_GROUP_SIZE = 450 # Variable c_int
STR_ENCAP_TYPE_LANE_802_5 = 2 # Variable c_int
VG_PROPERTY_ENTRY = 3 # Variable c_int
NSU64IsGE = 5 # Variable c_int
WN_RFC1490_RTD_PPP_FR = 3 # Variable c_int
INVALID_DESTINATION_ADDRESS = 2 # Variable c_int
ATM_STR_PARAM_SNAP_HDR = 29 # Variable c_int
PPP_OE_IPV6_ENABLE = 32 # Variable c_int
GPS_NOT_CONNECTED = -43 # Variable c_int
ATM_MAX_ARRAY_DIM_512 = 512 # Variable c_int
ATTRIB_SPEED_1000MB = 18 # Variable c_int
PVC_LOCAL_UP_END2END_UNKNOWN_STATUS = 4 # Variable c_int
NSU64IsGT = 3 # Variable c_int
ATM_CALL_DIST_BURSTY = 1 # Variable c_int
FR_LMI = 6 # Variable c_int
ENCAP_TOKEN_RING = 6 # Variable c_int
MAX_VFD_PATTERNS = 4 # Variable c_int
SCHED_TYPE_EARLY = 0 # Variable c_int
USE_STREAM_ID = 1 # Variable c_int
HVFD_STATIC = 5 # Variable c_int
ETBNC_INPUT = 0 # Variable c_int
GIG_STRUC_MEMORY_WRITE = 36909 # Variable c_int
HALFDUPLEX_MODE = 1 # Variable c_int
PPP_OE_AC_ERR = 12 # Variable c_int
XENPAK_I_64_1R = 1 # Variable c_int
WN_CHAN_PHYS_FILL_CFG = 6042 # Variable c_int
POS_TRIGGER1_ONLY = 1 # Variable c_int
AT_ENCAP_TYPE_LLC_IPV4 = 5 # Variable c_int
TIMESTAMP_CLOCK_SOURCE_10_MHZ = 0 # Variable c_int
WN_PVC_COPY_CFG = 6082 # Variable c_int
FAST7410_STATUS_LINK = 512 # Variable c_long
L3_RECEIVE_TRACKING_V2_LATENCYPERSTREAM = 7 # Variable c_int
FR_LINE_SPEED_1920000L = 1920000 # Variable c_long
MPLS_RSVP_COUNT_INFO = 38932 # Variable c_int
DISABLE_ROUTER_DISCOVERY = 2 # Variable c_int
CONTROLLER_SMB200 = 5 # Variable c_int
VCDB_STATE_DELETED = 4 # Variable c_int
FST_PROTOCOL_PARAMETER_INFO = 1290 # Variable c_int
HVFD_RANDOM = 1 # Variable c_int
HBA_READY_TO_TEST = 8 # Variable c_int
ATM_TD_BEST_EFFORT = 6 # Variable c_int
WN_RFC1490_BRIDGED_SNAP = 1 # Variable c_int
CMD_ALREADY_IN_PROGRESS = 10 # Variable c_int
CAUSE_TEMP_FAILURE = 41 # Variable c_int
WN_DS3_FRMR_STATUS_OOF = 2 # Variable c_int
NS_DOT1X_SUPPLICANT_CONFIG_INFO = 39486 # Variable c_int
UNKNOWN_STACK = 0 # Variable c_int
CM_TR_8405 = 8 # Variable c_int
MANAGED_ADDRESS_CONFIGURATION = 128 # Variable c_int
L3_PINGREP_SENT = 1024 # Variable c_long
TRIGLED_TXRX = 1 # Variable c_int
PPP_NCPS_CLOSED = 2 # Variable c_int
ATM_GLOBAL_TRIGGER_PARAMS = 57 # Variable c_int
NS_UPLOAD_FILE = 39397 # Variable c_int
ETH_SELECT_RECEIVE = 20514 # Variable c_int
ATM_STR_PARAM_SIG_BW_PCR_0 = 11 # Variable c_int
UPDATED_FIRMWARE_NEEDED = -1002 # Variable c_int
ATM_CALL_PARAM_RATE_CLASS = 1 # Variable c_int
PPP_OE_MODE = 24 # Variable c_int
SPEED_100MHZ = 8 # Variable c_int
WN_PERIOD_CFG = 6004 # Variable c_int
NS_WIS_CONFIG = 39506 # Variable c_int
NS_LINK_FAULT_COUNTER_RESET = 3 # Variable c_int
NS_IPV6_CONFIG_INFO = 39407 # Variable c_int
XENPAK_TX_ALARM_PHY_XS_TRANSMIT_LOCAL_FAULT_ENABLE = 0 # Variable c_int
ATM_B_BC_UNI40_NON_REAL_TIME_VBR = 10 # Variable c_int
XFP_CDR_SUPPORT_FOR_10_5_GBS = 32 # Variable c_int
PPP_DELETE_ALL = 21024 # Variable c_int
MAX_VERSION_STRING = 32 # Variable c_int
NS_PHY_DEFAULT_CONFIG = 39501 # Variable c_int
CAPTURE_EVENTS_UNDERSIZE = 2 # Variable c_int
TR_MODE_DEVICE = 1 # Variable c_int
WN_LMI_INFO = 6210 # Variable c_int
CAUSE_UCR_UNAVAILABLE_3_0 = 51 # Variable c_int
FR_TX_CONTINUOUS_MULTI_BURST = 5 # Variable c_int
FR_LOAD_IMAGE_CMD = 111 # Variable c_int
CA_SIGNALRATE_155MB = 16384 # Variable c_long
L3MS_FIELD_NETMASK = 6 # Variable c_int
DS3_EXCESS_ZEROS_ALARM = 64 # Variable c_int
NOT_MULTI_USER_CHASSIS = -41 # Variable c_int
STR_CONN_TYPE_INCOMING_SVC = 2 # Variable c_int
ATM_CALL_TMR_TICK_RESOLUTION = 1000000 # Variable c_long
NS_MULTI_CAPTURE_DESCRIPTOR_FORMAT_SPIRENT = 0 # Variable c_int
MPLS_START = 38914 # Variable c_int
XFP_TRANSCEIVERL_64_2b = 32 # Variable c_int
SIG_EVENT_OUTGOING_SETUP = 3 # Variable c_int
XENPAK_RX_ALARM_RECEIVE_OPTICAL_POWER_LOCAL_FAULT_ENABLE = 5 # Variable c_int
NS_MULTI_IPV4_ARP_REPLIES_RX = 36 # Variable c_int
ATM_STR_STATUS_STREAM_STATE = 3 # Variable c_int
GPS_NOT_READY = -44 # Variable c_int
ETGAP_1US = 0 # Variable c_int
TCP_ISP_RESERVED_COMMAND = 121 # Variable c_int
XENPAK_MODULE_10GBASE_SR = 115 # Variable c_int
MAX_REPORT_ERROR_IP_LEN = 20 # Variable c_int
ETSTORESETUP = 0 # Variable c_int
ATM_STREAM_DETAIL_INFO = 87 # Variable c_int
NS_MULTI_TX_IPV6_FRAMES = 17 # Variable c_int
ATTRIB_HASVFDREPEATCOUNT = 29 # Variable c_int
L3MS_FIELD_VFD2_MODE = 67 # Variable c_int
MII_CTRL_DUPLEXMODE = 256 # Variable c_int
XFP_AUX_MONITORING_PLUS_1_8V_SUPPLY_CURRENT = 14 # Variable c_int
DOT1X_SUPPLICANT_START_TIME = 2 # Variable c_int
WN_CHANNEL_TX_CFG = 6138 # Variable c_int
MAX_SEARCH_SUPPLICANT_ARRAY = 7000 # Variable c_int
ATM_STM1_FRAMING = 1 # Variable c_int
PET_RDATA = 256 # Variable c_int
IP_INC_SRC_IP_AND_DST_IP = 31 # Variable c_int
FR_LINE_SPEED_960000L = 960000 # Variable c_long
DOT1X_SUPPLICANT_STATUS_INDEX = 0 # Variable c_int
L3MS_FIELD_SIPC = 17 # Variable c_int
IL3_TX_LATE = 35 # Variable c_int
STREAM_PROTOCOL_UDP_IPV6 = 17 # Variable c_int
UNI_VERSION_3_1_USER = 49 # Variable c_long
SYMBOL_ON = 1 # Variable c_int
L3_HIST_TCP_CONNECTION_INFO = 28739 # Variable c_int
FST_CAPTURE_PARAMS = 1283 # Variable c_int
SPEED_1GHZ = 64 # Variable c_int
WN_FEATURES_PPP = 4 # Variable c_int
PPP_CONFIG_INFO = 21000 # Variable c_int
ETRECALLSETUP = 1 # Variable c_int
ETBNC_TXEA = 7 # Variable c_int
NS_HIST_ENHANCED_LATENCY_OPTION = 39524 # Variable c_int
FRAME_URG_BIT = 72 # Variable c_int
ATM_DS3_E3_LINE_INFO = 92 # Variable c_int
CAUSE_INV_TRANS_NET = 91 # Variable c_int
ATMV_FIELD_RATE_CLASS = 3 # Variable c_int
FR_LINE = 7 # Variable c_int
PPP_LCP_DOWN = 1 # Variable c_int
ATM_MISDELIVERED = 32 # Variable c_long
XENPAK_ALARM_STATUS_INFO = 36934 # Variable c_int
DOT1X_SUPPLICANT_USER_NAME = 12 # Variable c_int
PPP_CHAP_ALGORITHM = 10 # Variable c_int
FC_DEFINE_HEADER = 13585 # Variable c_int
ETBNC_1 = 1 # Variable c_int
ETBNC_2 = 2 # Variable c_int
ETH_RESET_PORT = 20513 # Variable c_int
L3_RECEIVE_TRACKING_REPORT = 5 # Variable c_int
IL3_RX_STACK = 38 # Variable c_int
AT_USRDATA_CONGESTED = 2 # Variable c_int
CAPTURE_NOT_GOOD = 512 # Variable c_int
PPP_ENHANCED_CONFIG = 21029 # Variable c_int
NS_LINK_FAULT_REMOTE = 2 # Variable c_int
RPN_ID_FAILED_LOGIN = 29 # Variable c_int
NS_DEFINE_MULTI_IPV6_OVER_IPV4_TUNNELING = 39455 # Variable c_int
GIG_VFD3_OFF = 0 # Variable c_int
AT_SONET_PATH_BIP_ALARM = 8 # Variable c_int
IP_DEC_DST_IP_AND_SRC_MAC = 30 # Variable c_int
NS_MULTI_CAPTURE_MAX_DATA_SIZE_IN_KB = 2000 # Variable c_int
ATM_TRIGGER = 54 # Variable c_int
PORT_PRIVATE_DISCOVERY_COMPLETE = 256 # Variable c_int
ETMAXSLOT = 5120 # Variable c_int
CT_FILTER_OPERATOR_PAT1_ONLY = 1 # Variable c_int
ET_CMDLOG_ALWAYSLINKINFO = 512 # Variable c_long
ETH_RSMII = 20490 # Variable c_int
UNLINK_FAILED = -3 # Variable c_int
NS_MAX_STREAM_ID_ARRAY = 486 # Variable c_int
NS_DEFINE_IPV6_EXT_ESP = 39446 # Variable c_int
CAUSE_CHAN_NO_EXIST = 82 # Variable c_int
ETH_PHY_LOCAL_RECEIVER_OK = 1024 # Variable c_int
HIST_LONG_LAT_STREAM = 7 # Variable c_int
ISMB_STD_ERR_ALIGN = 7 # Variable c_int
DS3_B3ZS_ALARM = 32 # Variable c_int
IL3_TX_EXCESSIVE = 34 # Variable c_int
XENPAK_LASI_RX_ALARM_ENABLE = 2 # Variable c_int
VLAN_CFI_RIF_ABSENT = 0 # Variable c_int
FR_LOAD_CODE_IMAGE = 1 # Variable c_int
POS_TRANSCIEVER_MODE_MULTI = 1 # Variable c_int
ATM_DS3_PLCP_FRAMING = 6 # Variable c_int
NS_DOT1X_SUPPLICANT_COPY = 39492 # Variable c_int
FR_TRIG_DISABLE = 0 # Variable c_int
XFP_AUX_MONITORING_LASER_TEMPERATURE = 4 # Variable c_int
FRAME_UDP_HEADER_LENGTH = 52 # Variable c_int
FRAME_PROTOCOL_ARP = 4 # Variable c_int
ATM_LOOPBACK_OUTPUT_TX_RX = 1 # Variable c_int
NS_CAPTURE_STATUS_DATA_INTEGRITY_ERROR = 64 # Variable c_int
ATM_ELAN_MTU_UNSPEC = 0 # Variable c_int
FR_TRIG_ENABLE = 1 # Variable c_int
ATM_ELAN_LECS_SVC_WAIT = 1 # Variable c_int
AT_SONET_CELL_HEC_ALARM = 1 # Variable c_int
GIG_STRUC_TEST_TX_LOOPBACK = 36913 # Variable c_int
NS_SPEED_OC3 = 0 # Variable c_int
ATM_STR_PARAM_SIG_CLIPPING = 24 # Variable c_int
MII_REGISTER_STATUS = 1 # Variable c_int
L3_CTRL_ARP_RESPONSES_WITH_UNIQUE_MAC = 8 # Variable c_int
WN_LOOP_TIMED_CLOCK = 0 # Variable c_int
FC_PUBLIC_DISCOVERY_COMPLETE_STATE = 5 # Variable c_int
ATTRIB_CONNECT_MII = 5 # Variable c_int
XFP_TRANSCEIVER_EXT_REACH_1550_NM_FP = 32 # Variable c_int
GIG_VFD_DECREMENT = 2 # Variable c_int
NS_WIS_INJECT_PATH_AIS_ALARM = 64 # Variable c_int
PPP_NCP_UP = 0 # Variable c_int
MAX_NTP_PEERS = 5 # Variable c_int
XFP_TRANSCEIVER_10GBASE_LW = 4 # Variable c_int
FR_RESET_CARD_CMD = 107 # Variable c_int
ETH_TRIGGER = 20481 # Variable c_int
PPP_IPV6_CONFIG_INFO = 21026 # Variable c_int
MPLS_RSVP_RECORD_ROUTE = 1 # Variable c_int
XFP_TRANSCEIVER_S_64_5b = 2 # Variable c_int
XFP_TRANSCEIVER_S_64_5a = 4 # Variable c_int
TIME_TAG_OFF = 0 # Variable c_int
AT_VC_COUNTER_INFO = 39177 # Variable c_int
ITR_BEACONEVENTS = 38 # Variable c_int
GIG_STRUC_BG2_READBACK = 36895 # Variable c_int
FC_STATUS_INFO = 13576 # Variable c_int
FRAME_HOP = 91 # Variable c_int
IATM_MEAN_CELL_TRANSFER_DELAY = 46 # Variable c_int
GIG_AFN_REMOTE_FAULT2 = 8192 # Variable c_int
CONTROLLER_SMB600B = 9 # Variable c_int
GIG_AFN_REMOTE_FAULT1 = 4096 # Variable c_int
ENGINEERING_TEST_RELEASE = 3 # Variable c_int
ATM_CLASSICAL_IP = 55 # Variable c_int
MAX_ERROR_STRING = 256 # Variable c_int
DESTINATION_IPV6 = 2 # Variable c_int
PPP_OE_INACTIVE = 0 # Variable c_int
L3_RECEIVE_CAPTURE_BADPACKETS = 2 # Variable c_int
TIMEOUT = 8 # Variable c_int
ENCAP_ROUTE_FR = 8 # Variable c_int
ATM_STR_ACTION_CONNECT = 1 # Variable c_int
MPLS_OPAQUE_OBJECT = 3 # Variable c_int
ATM_B_BC_UNI40_REAL_TIME_VBR = 9 # Variable c_int
AT_ENCAP_TYPE_VCMUX_BRIDGED = 4 # Variable c_int
SIG_EVENT_INCOMING_CONNECT = 6 # Variable c_int
NS_HIST_V3_LATENCY_PER_STREAM_INFO = 12302 # Variable c_int
PPP_CONFIGURE_MAXCONFIGURE = 10 # Variable c_int
NS_ARP_STATUS_INFO = 39405 # Variable c_int
SMB_VG_ERR_PKT = 2 # Variable c_int
ETH_PHY_UNUSED_12 = 4096 # Variable c_int
ATM_STREAM_PARAMS_FILL = 729 # Variable c_int
GIG_PHY_LOOP_DOWN = 0 # Variable c_int
AT_VC_DELETE_ALL = 39183 # Variable c_int
XAUI_PRBS_STATUS_INFO = 36938 # Variable c_int
FC_SWITCH_TOPOLOGY_CASCADE = 5 # Variable c_int
IP_INC_SRC_IP = 17 # Variable c_int
DOT1X_USER_MODE_NORMAL = 1 # Variable c_int
VG_CFG_END_NODE = 0 # Variable c_int
SSCOP_DEFAULT_MAX_RESEQ = 16 # Variable c_int
NS_CT_STOP_CAPTURE = 39343 # Variable c_int
CAPTURE_NONE = 0 # Variable c_int
WN_PVC_CFG_INFO = 6270 # Variable c_int
IATM_OUT_OF_SEQUENCE = 36 # Variable c_int
XFP_IDENTIFIER_XPAK = 9 # Variable c_int
XENPAK_OPTICAL_MT_RJ_TYPE = 3 # Variable c_int
GIG_VFD_INCREMENT = 1 # Variable c_int
ATM_CARD_CAPABILITY = 91 # Variable c_int
L3_PINGREQ_RECV = 4096 # Variable c_long
L3MS_FIELD_SPRT = 8 # Variable c_int
L2_READ_RATES = 24849 # Variable c_int
NS_MULTI_HW_RATE_COUNTERS = 2048 # Variable c_int
NS_HIST_EN_FIRST_TIMESTAMP = 16 # Variable c_int
TR_TOKEN_DEFAULT = 0 # Variable c_int
FR_LINE_SPEED_1024000L = 1024000 # Variable c_long
MAX_OBJ_BUFF_SIZE = 100 # Variable c_int
GIG_IP_CHECKSUM_ERROR_GENERATE = 2 # Variable c_int
MII_AN_LINK_PARTNER = 1 # Variable c_int
NS_LOOKUP_KEY_CONTIGUOUS = 3 # Variable c_int
ATM_RX_ERRORED_CELLS = 2 # Variable c_int
XENPAK_NVR_PACKAGE_OUI = 43 # Variable c_int
HIST_LAT_STREAM = 3 # Variable c_int
FR_ALL_PVC_INFO = 36 # Variable c_int
ATM_B_BC_UNI40_CBR_01 = 7 # Variable c_int
FR_DISABLE_PORT = 41 # Variable c_int
FR_LINE_SPEED_1536000L = 1536000 # Variable c_long
ATM_PVCAD_RESPONSE = 72 # Variable c_int
CM_LAN_3150A = 45 # Variable c_int
XFP_CONNECTOR_FC_COAXIAL_HEADERS = 5 # Variable c_int
NS_READ_SUBPROCESS = 20521 # Variable c_int
AT_PORT_CONFIG = 39170 # Variable c_int
CONTROLLER_SMB6000 = 4 # Variable c_int
HTLED_OFF = 0 # Variable c_int
AT_SONET_PATH_RDI_ALARM = 2 # Variable c_int
TR_MAC_ACERRORS = 4096 # Variable c_long
ATM_B_BC_NO_TIMING_INFO = 0 # Variable c_int
MPLS_OBJECT_DELETE = 38935 # Variable c_int
PROTOCOL_ENCAP_TYPE_MPLS_STACK = 39 # Variable c_int
MII_STATUS_EXT_STATUS = 256 # Variable c_int
DOT1X_SUPPLICANT_DISCONNECTED = 2 # Variable c_int
DOT1X_EAP_TYPE_TTLS = 16 # Variable c_int
TCP_GET_CONNECTION = 28680 # Variable c_int
ETH_SELECT_TRANSMIT = 20515 # Variable c_int
ETBNC_3 = 3 # Variable c_int
NS_EVENTS_MODE = 1 # Variable c_int
PPP_CLEAR_STATS = 9 # Variable c_int
ETH_LINK_VERIFY = 20489 # Variable c_int
MAX_CARD_NAME_LENGTH = 32 # Variable c_int
XENPAK_TX_ALARM_PCS_TRANSMIT_LOCAL_FAULT_ENABLE = 3 # Variable c_int
ETH_PHY_LINK_PARTNER_AUTONEG_CAPABLE = 1048576 # Variable c_int
MPLS_EXPLICIT_ROUTE_IPV6 = 2 # Variable c_int
NS_DECISION_USE_CALLBACK = 3 # Variable c_int
GIG_PREAMB_LEN_20_BYTES = 4 # Variable c_int
TCP_SEND_DATA = 28688 # Variable c_int
L3_RECEIVE_GETCAPTUREPACKETS = 18 # Variable c_int
CAUSE_TIMER_RECOVERY = 102 # Variable c_int
GIG_STRUC_CAP_COUNT_INFO = 36867 # Variable c_int
DOT1X_SUPPLICANT_USER_PASSWORD = 6 # Variable c_int
MPLS_ATTRIBUTE_OBJECT = 4 # Variable c_int
ATM_CALL_LENGTH_CONST_FROM_SETUP = 1 # Variable c_int
L3_VFD_INCR = 1 # Variable c_int
INTEROP_NORMAL = 0 # Variable c_int
AT_STR_CONN_TYPE_PVC = 0 # Variable c_int
PMC_DISK_NO_ERROR = 1 # Variable c_int
XENPAK_V_64_2A = 1 # Variable c_int
XENPAK_V_64_2B = 2 # Variable c_int
HTLED_RED = 1 # Variable c_int
DOT1X_EAP_TYPE_EAPTLS = 2 # Variable c_int
FR_CISCO_HDLC_RTD_UDP = 6 # Variable c_int
ETBNC_UNDRA = 14 # Variable c_int
AT_VC_INFO = 39176 # Variable c_int
ETH_TRIGGER1_ONLY = 1 # Variable c_int
UNI_DEFAULT_TMR_TEARDOWN = 1 # Variable c_int
XENPAK_L_64_3 = 16 # Variable c_int
XENPAK_L_64_1 = 1 # Variable c_int
PPP_LCP_IPCP_CLOSED = 2 # Variable c_int
NS_MULTI_RX_STACK = 13 # Variable c_int
NS_CAPTURE_STATUS_IP_CHECKSUM_ERROR = 128 # Variable c_int
OUT_OF_RESOURCES = 11 # Variable c_int
NS_SIGNATURE_DETECT_MODE_INFO = 39429 # Variable c_int
PPP_NCPS_CLOSING = 4 # Variable c_int
NS_MULTICAST_KEEP_ALIVE_START = 1 # Variable c_int
UNACCEPTABLE_PORT_IDENTIFIER = 26 # Variable c_int
ATMV_FIELD_GFC = 10 # Variable c_int
NS_WIS_LINE_AIS_ALARM = 8 # Variable c_int
SIG_EVENT_OUTGOING_CONNECT = 5 # Variable c_int
CAPTURE_EVENTS_RX_TRIGGER = 64 # Variable c_int
TCP_ARP_PARAMS = 28687 # Variable c_int
FR_STATUS_EIA_DSR = 65536 # Variable c_long
CAUSE_QOS_UNAVAILABLE = 49 # Variable c_int
NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_10 = 17 # Variable c_int
L3_CTRL_ARP_RESPONSES = 1 # Variable c_int
ATM_STREAM = 50 # Variable c_int
NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_14 = 21 # Variable c_int
NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_15 = 22 # Variable c_int
WN_STREAM_CNT_MAX = 8000 # Variable c_int
FR_LINE_SPEED_192000L = 192000 # Variable c_long
MULTI_BURST_MODE = 2 # Variable c_int
DOT1X_SUPPLICANT_FAILURE_EAP_RESPONSE_REJECTED = 3 # Variable c_int
HTLED_RXOFF = 48 # Variable c_long
FRAME_UDP_HEADER_CRC = 64 # Variable c_int
NS_IPV6_EXT_AUTHENTICATION_HEADER = 15 # Variable c_int
PPP_CONFIGURE_ECHOERRFREQ = 0 # Variable c_int
RESET_FULL = 1 # Variable c_int
CAPTURE_EVENTS_ALIGNMENT_ERRORS = 512 # Variable c_int
PORT_PUBLIC_DISCOVERY_COMPLETE = 64 # Variable c_int
GIG_PHY_LOOP_LOCAL_PHY = 2 # Variable c_int
SSCOP_STATE_OUT_RESYNC_PEND = 5 # Variable c_int
LOSS_OF_TRANSITORY_FLAG = 2 # Variable c_int
DOT1X_SUPPLICANT_FAILURE_EAPOL_START_NO_RESPONSE = 9 # Variable c_int
GIG_AFN_RESERVED3 = 8 # Variable c_int
NSTCL_INVALID_MSG_FUNC = -502 # Variable c_int
UNI_VERSION_3_0_NET = 2147483696L # Variable c_ulong
AT_MOD_VC_ARRAY = 39184 # Variable c_int
ATM_STOP_SETUP = 710 # Variable c_int
FC_REMOVE_LINK = 0 # Variable c_int
FRAME_FC = 10 # Variable c_int
POS_TRANSCEIVER_MODE_SINGLE = 0 # Variable c_int
ATTRIB_GBIC = 32 # Variable c_int
WN_DS1_220_TO_440_BUILDOUT = 3 # Variable c_int
ETDP_FFFF0000 = 10 # Variable c_int
ATM_ICD_AFI = 71 # Variable c_int
NS_DOT1X_SUPPLICANT_SESSION_STATS_INFO = 39491 # Variable c_int
NS_CT_CAPTURE_FRAME_V2_INFO = 39351 # Variable c_int
XENPAK_10GBASE_LX4 = 8 # Variable c_int
ADDRESS_AUTOCONFIG_QUEUED = 64 # Variable c_int
CAPTURE_OFF = 2 # Variable c_int
CT_WAN_FRAME_RELAY = 10 # Variable c_int
PROTO_FR_ONLY = 1 # Variable c_int
SYMBOLIC_PORT_NAME_NOT_REGISTERED = 19 # Variable c_int
SERVICE_PARM_OPTIONS = 1 # Variable c_int
RXLED_ANY = 0 # Variable c_int
GIG_TRIGGER2_ONLY = 0 # Variable c_int
TARGET_IS_MULTICAST_ADDRESS = 8 # Variable c_int
FULLDUPLEX_MODE = 0 # Variable c_int
ET_CMDLOG_NOVERSION = 128 # Variable c_long
GIG_STRUC_MAC_CONFIG_INFO = 36927 # Variable c_int
FR_NIC_EIA_RD_RDL = 4194304 # Variable c_long
L3_RECEIVE_TRACKING_TYPE = 3 # Variable c_int
XFP_OPTIONAL_TX_DISABLE = 64 # Variable c_int
ETDP_FFFFFFFF00000000 = 12 # Variable c_int
MULTI_USER_CAPABLE = 1 # Variable c_int
ATM_ELAN_INIT_LES_DIRECT = 2 # Variable c_int
NS_IGMP_TIMESTAMP_INFO = 28697 # Variable c_int
ATM_ILMI_INFO = 21 # Variable c_int
SETUP_LATENCY_TMR_TICKS_PER_SEC = 10000000 # Variable c_long
ENCAP_ATM_PVC_SNAP = 9 # Variable c_int
AN_FORCE_AUTONEGOTIATION = 1 # Variable c_int
ATTRIB_SPEED_155MB = 15 # Variable c_int
ETH_FILL_PATTERN = 20485 # Variable c_int
CM_GX_1420A = 31 # Variable c_int
ATM_ELAN_BUS_SVC_WAIT = 6 # Variable c_int
ATM_E3_CELL_LINE_CELL_RATE = 80000 # Variable c_long
PAT_DECB = 11 # Variable c_int
RTP_PAYLOAD_G729 = 18 # Variable c_int
PPP_ECHO_STOP = 4 # Variable c_int
SYNC_INOUT_MASTER = 3 # Variable c_int
ATM_CONN_64_INFO = 34 # Variable c_int
CAUSE_CALL_REJECTED = 21 # Variable c_int
ATM_ARP_CONN_PROCEEDING = 1 # Variable c_int
PAT_DECW = 12 # Variable c_int
WN_STREAM_CTRL = 6070 # Variable c_int
NS_SONET_LINE_RDI_ALARM = 16 # Variable c_int
FR_T1E1_LINE_INFO = 114 # Variable c_int
PPP_STATUS_LOCAL_MAGICNUMBER = 5 # Variable c_int
NS_MAX_TRIGGER_RANGE = 6 # Variable c_int
NS_WIS_INJECT_LINE_RDI_ALARM = 32 # Variable c_int
LOGFILE_CREATE_STOP_ON_FULL = 0 # Variable c_int
XFP_CDR_SUPPORT_FOR_11_1_GBS = 8 # Variable c_int
NS_GET_MULTI_CAPTURE_DATA = 39528 # Variable c_int
GIG_TRANSMIT_ERROR_GENERATE = 1 # Variable c_int
CT_FILTER_PROTOCOL_ID_IP = 1 # Variable c_int
ETMF_TIME_PORT2PORT = 4 # Variable c_int
ETH_LATENCY = 20482 # Variable c_int
NS_DIFF_SERV_RATE_INFO = 39434 # Variable c_int
NS_ETHERNET_HEADER = 1 # Variable c_int
TR_ERR_FRAME_BIT = 4 # Variable c_int
ATM_SAAL_RELEASE = 712 # Variable c_int
FC_STREAM_COS_2 = 2 # Variable c_int
FC_STREAM_COS_3 = 3 # Variable c_int
ETH_PHY_BAD_ESD_ERROR = 16 # Variable c_int
SSCOP_STATE_IDLE = 1 # Variable c_int
NS_MULTI_COLLISION = 28 # Variable c_int
PPP_STATUS_OUR_IFACE_ID = 19 # Variable c_int
ATTRIB_SPEED_34MB = 26 # Variable c_int
AT_BASE_NUM = 39168 # Variable c_int
GIG_STRUC_SS1 = 36881 # Variable c_int
POS_TRANSCEIVER_MODE_MULTI = 1 # Variable c_int
GIG_STRUC_SS2 = 36882 # Variable c_int
WN_TX_CONTINUOUS = 0 # Variable c_int
CONTROLLER_SMB600C = 8 # Variable c_int
PORT_ALREADY_LINKED = -16 # Variable c_int
ROUTER_DISCOVERY_RUNNING = 1 # Variable c_int
L3_ARP_REPLIES = 512 # Variable c_long
WN_FILL_PATTERN = 6002 # Variable c_int
FR_INTERVALTIME_INFO = 40 # Variable c_int
ATM2_SAR_FW_VERSION = 1 # Variable c_int
FC_SWITCH_MULTI_LINK_CONFIG = 13654 # Variable c_int
CONTROLLER_ET1000 = 1 # Variable c_int
WN_STREAMEXT_COPY_CFG = 6091 # Variable c_int
PPP_OE_ADD_EOL_TAG = 8 # Variable c_int
FC_PRIVATE_DISCOVERY_STATE = 6 # Variable c_int
CONN_STATE_STOPPED = 7 # Variable c_int
XENPAK_NVR_VENDOR_LOT_CODE = 109 # Variable c_int
UNI_VERSION_3_1_NET = 2147483697L # Variable c_ulong
CT_TRAFFIC_DIRECTION_RX = 2 # Variable c_int
SONET_LINE_AIS_ALARM = 8 # Variable c_int
DOT1X_SUPPLICANT_VLAN_ENABLE = 13 # Variable c_int
NS_ALTERNATE_KEY_CONFIG_INFO = 39424 # Variable c_int
CAUSE_DEST_OUT_OF_ORDER = 27 # Variable c_int
ET_CMDLOG_COMMANDS = 1 # Variable c_long
CM_ML_7710 = 23 # Variable c_int
AT_SONET_LINE_RDI_ALARM = 16 # Variable c_int
PPP_ACCEPTABLE_OPTIONS = 2 # Variable c_int
ATM_STR_PARAM_SIG_FW_SCR_0 = 7 # Variable c_int
MPLS_LSP_COUNT_INFO = 38937 # Variable c_int
ATM_STR_STATUS_SVC_SETUP_LATENCY = 9 # Variable c_int
FRAME_SRC_PORT = 68 # Variable c_int
POS_SPEED_OC1 = 1 # Variable c_int
ATM_ELAN_MAX_AGING_TIME = 300 # Variable c_int
POS_SPEED_OC3 = 2 # Variable c_int
TCP_URL_ADD = 99 # Variable c_int
NS_MULTI_NEIGHBOR_ADVERT_TX = 45 # Variable c_int
FR_HIST_L3_PACKETTAG = 5 # Variable c_int
DESTINATION_IPV4 = 1 # Variable c_int
XENPAK_S_64_3A = 8 # Variable c_int
MLDV2_SUPPRESS_RECORDS = 64 # Variable c_int
L3MS_FIELD_DATA_CHECK_ENABLE = 54 # Variable c_int
ET_NO_SECURE = 0 # Variable c_int
ATM_SIG_EMUL_TEARDOWN = 46 # Variable c_int
ATM_PROTOCOL_TRACE_CONTROL = 113 # Variable c_int
L3_MODIFY_STREAM_ARRAY_SIZE = 8192 # Variable c_int
IP_INC_IP_AND_MAC_DST = 23 # Variable c_int
SIG_EVENT_INCOMING_SETUP = 4 # Variable c_int
ATM_CELL_DELAY_VARIATION = 32768 # Variable c_long
SSCOP_STATE_RECOV_RSP_PEND = 8 # Variable c_int
FC_WWN = 13589 # Variable c_int
NS_MULTI_RX_FRAMES = 1 # Variable c_int
SMARTCARD_STATUS_OK = 0 # Variable c_int
PPP_STATUS_MIN_OUR_IPV6_ADDR = 26 # Variable c_int
FC_LINK_COST_5000 = 5 # Variable c_int
FST_CAPTURE_STATUS_TRIGGER = 32 # Variable c_int
DOT1X_SUPPLICANT_CLEAR_SUPPLICANT_STATS = 3 # Variable c_int
ATM_UNI_RESTART = 44 # Variable c_int
FR_MAX_STATUS_BITMAP_LEN = 384 # Variable c_int
DOT1X_SUPPLICANT_ACQUIRED = 4 # Variable c_int
NS_HIST_TEST_RAW_SIGNATURE = 15 # Variable c_int
NS_HIST_SEQUENCE_PER_STREAM = 12323 # Variable c_int
CONTROLLER_SMB600 = 6 # Variable c_int
AT_SONET_LINE_BIP_ALARM = 64 # Variable c_int
ATM_VCDB_COUNTS = 77 # Variable c_int
IPV6_EXT_AUTHENTICATION = 51 # Variable c_int
NS_MULTI_VLAN_PRI_5_RX = 58 # Variable c_int
DOT1X_TTLS_PHASE2_MSCHAPV2 = 4 # Variable c_int
FR_MAX_PVCS = 256 # Variable c_int
L3_CAPTURE_STATUS_CRC = 1 # Variable c_int
L4MS_FIELD_STARTING_OFFSET = 29 # Variable c_int
ETDP_ALLZERO = 0 # Variable c_int
NS_IGMPV2_INFO = 39422 # Variable c_int
ETH_PHY_AUTONEGOTIATE_COMPLETE = 2147483648L # Variable c_uint
MPLS_RSVP_INTERFACE_LABEL = 4 # Variable c_int
FR_TRIGGER = 8 # Variable c_int
MAX_ARRAY_DIM = 2048 # Variable c_int
MII_CTRL_COLLISIONTEST = 128 # Variable c_int
L3_DHCP_STATE_BOUND = 8 # Variable c_int
ATM_TRIGGER_INFO = 84 # Variable c_int
CA_CONNECT_MII = 16 # Variable c_long
HTLED_100MB = 64 # Variable c_long
GIG_STRUC_STEP = 36906 # Variable c_int
XFP_CDR_LINESIDE_LOOPBACK_MODE_SUPPORTED = 2 # Variable c_int
ATM_SIGNALING = 256 # Variable c_long
FRAME_FLAG_LENGTH_ERROR = 2 # Variable c_int
PPP_NCPS_ACKRCV = 7 # Variable c_int
FR_LINE_SPEED_448000L = 448000 # Variable c_long
ATM_CALL_LENGTH_CONST = 0 # Variable c_int
FR_E1_75_OHM_NORMAL = 1 # Variable c_int
NS_IPV6_COUNTER_INFO = 39366 # Variable c_int
NS_IGMPV2_LEAVE = 39421 # Variable c_int
ETPREAMBLE_MIN = 10 # Variable c_int
STOP_NEXT_HOP_DETERMINATION = 32 # Variable c_int
STREAM_PROTOCOL_FC = 15 # Variable c_int
HUB_GROUP_SYNC_ACTION = 3 # Variable c_int
WN_DEFINE_MULTI_UDP_STREAM = 6137 # Variable c_int
PORT_PRIVATE_DISCOVERY = 128 # Variable c_int
FR_LINE_SPEED_320000L = 320000 # Variable c_long
GIG_PREAMB_LEN_8_BYTES = 1 # Variable c_int
L3_RECEIVE_TRACKING_V2_LATENCYDISTRIBUTION = 11 # Variable c_int
ETDP_ALLONE = 1 # Variable c_int
CM_GX_1405 = 14 # Variable c_int
SSCOP_STATE_OUT_RECOV_PEND = 7 # Variable c_int
ATM_STREAM_TRIGGER_PARAMS = 59 # Variable c_int
L3MS_FIELD_ISEQNUM = 3 # Variable c_int
WN_DEFINE_IP_STREAM = 6132 # Variable c_int
NS_DEFINE_IPV6_EXT_ROUTING = 39442 # Variable c_int
XENPAK_MAX_NVR_CUSTOMER_SIZE = 48 # Variable c_int
NS_WIS_INJECT_LINE_AIS_ALARM = 16 # Variable c_int
FC_READY_TO_TEST_STATE = 8 # Variable c_int
CM_XLW_3720A = 66 # Variable c_int
FRAME_PROTOCOL_RARP = 5 # Variable c_int
XFP_ENCODING_NRZ = 16 # Variable c_int
UNI_DEFAULT_TMR_T399 = 1400 # Variable c_int
IN_SVC_CONN_AS_SNAP_OR_LANE = 1 # Variable c_int
NS_MULTI_XS_COLLISION = 29 # Variable c_int
GIG_TRIGGER1_OR_TRIGGER2 = 3 # Variable c_int
ATM_RATE_CLASS_VBR = 1 # Variable c_int
NS_HIST_EN_STREAMID_IN_STATS = 3 # Variable c_int
TR_BURSTERRORS = 8 # Variable c_long
DOT1X_SUPPLICANT_FAILURE_EAP_NOT_SUPPORTED = 5 # Variable c_int
HTLED_SYNC_LOCK = 128 # Variable c_long
STREAM_PROTOCOL_IPV6 = 16 # Variable c_int
ATM_CLIP_RELEASE_CLIENT = 703 # Variable c_int
IATM_CELL_TRANSFER_DELAY = 45 # Variable c_int
TCP_CLOSE_ALL = 28676 # Variable c_int
GIG_STRUC_IMAGE_VERSIONS = 36884 # Variable c_int
XENPAK_NVR_PROTOCOL = 16 # Variable c_int
NS_UDP_HEADER = 7 # Variable c_int
MII_REGISTER_AN_LINK_PARTNER = 5 # Variable c_int
ETH_EXTENDED_COUNTER_INFO = 20505 # Variable c_int
CM_WN_3405 = 15 # Variable c_int
CAPTURE_LENGTH_LAST_128_BYTES = 4 # Variable c_int
WN_T1E1_LINE_STATUS = 6252 # Variable c_int
FR_STOP_CMD = 106 # Variable c_int
MAX_SUBSYSTEMS = 2 # Variable c_int
NS_IP_OPTION_CONFIG = 39394 # Variable c_int
ATM_MISINSERTION = 4096 # Variable c_long
CHANNEL_UP = 2 # Variable c_int
NS_EN_RUNTIME_IN_SEQUENCE = 16 # Variable c_int
PPP_MOD_DESTMAC = 4 # Variable c_int
FR_RFC1662_RTD_PPP = 4 # Variable c_int
PPP_OE_RETRY = 26 # Variable c_int
NS_MULTI_VLAN_PRI_4_RX = 57 # Variable c_int
TCP_HTTP_CONNECTION_CONFIG = 28752 # Variable c_int
C_ANNEX_D_PARM = 2 # Variable c_int
CAPTURE_EVENTS_OVERSIZE = 4 # Variable c_int
XFP_TRANSCEIVER_L_64_2c = 16 # Variable c_int
PROTOCOL_TYPE_8023 = 1 # Variable c_int
XFP_PROFILE_INFO = 36940 # Variable c_int
FRAME_PROTOCOL_IPX = 6 # Variable c_int
NS_IPV6_ROUTER_PREFIX_INFO = 39413 # Variable c_int
ATTRIB_SPEED_45MB = 25 # Variable c_int
SSCOP_DEFAULT_RX_WINDOW = 32 # Variable c_int
HIGH_DENSITY_CARD_ERROR = -33 # Variable c_int
NS_IPV6_EXT_ROUTING_HEADER = 14 # Variable c_int
XFP_ENCODING_64B_66B = 128 # Variable c_int
RXLED_UNDERSIZEAB = 6 # Variable c_int
CAUSE_LOC_PRIV_REM = 5 # Variable c_int
CM_AT_3450A = 59 # Variable c_int
NS_MULTI_LFS_LOCAL_START = 63 # Variable c_int
ROUTER_DISCOVERY_QUEUED = 4 # Variable c_int
NS_DIFF_SERV = 20493 # Variable c_int
NS_ARP_TIMEOUT = 0 # Variable c_int
CLASS_OF_SERVICE_NOT_VALID = 0 # Variable c_int
ATM_CALL_PARAM_CDVT = 5 # Variable c_int
FR_LINE_SPEED_1728000L = 1728000 # Variable c_long
NS_IGMP_LEAVE = 28696 # Variable c_int
L3_HIST_TEST_RAW_TAGS = 5 # Variable c_int
SMB_STD_ERR_UNDERSIZE = 256 # Variable c_long
WN_DS1_0_TO_110_BUILDOUT = 1 # Variable c_int
CAUSE_PROTOCOL_ERROR = 111 # Variable c_int
ATM_CALL_PARAM_BURST_COUNT = 20 # Variable c_int
NS_DOT1X_DOWNLOAD_CERTIFICATE_FILES = 39496 # Variable c_int
PET_SSCOP_PROT_ERR = 1 # Variable c_int
ETBNC_RCKB = 4 # Variable c_int
CM_POS_3511A = 58 # Variable c_int
FR_DS1_B3ZS_ENCODING = 2 # Variable c_int
FR_LINE_SPEED_1280000L = 1280000 # Variable c_long
WN_DS1_E1_SEV_ERROR_FRAME_ALARM = 1024 # Variable c_int
XENPAK_WIS = 4 # Variable c_int
ATM_SAR_PCI_FAILURE = 8 # Variable c_int
L3MS_FIELD_SIG_SEQ_ID = 49 # Variable c_int
PPP_IPX_ROUTING = 19 # Variable c_int
ATM_MAX_MODS = 100 # Variable c_int
WN_IP_SUBNET_CFG_INFO = 6290 # Variable c_int
WN_DS3_ALARM_COUNTER_INFO = 6221 # Variable c_int
PET_TRACE = 1024 # Variable c_int
CT_PASSIVE = 2 # Variable c_int
ATTRIB_SPEED_100MB = 2 # Variable c_int
GIG_CAP_RUN_DISPARITY = 16 # Variable c_int
ATM_TD_COMBO_RATES = 2 # Variable c_int
SPEED_10MHZ = 2 # Variable c_int
TCP_END_STACK_MODE = 28686 # Variable c_int
FC_WWN_INFO = 13588 # Variable c_int
IGMP_INIT_ALWAYS_SEND_V2_LEAVE_REQUEST = 128 # Variable c_int
MAX_SLOTS = 20 # Variable c_int
NSTCL_STRUCT_NOT_DEFINED = -504 # Variable c_int
SERVICE_PARM_RCV_SIZE = 4 # Variable c_int
ATM_CELL_TRANSFER_DELAY = 8192 # Variable c_long
WN_DS3_FRMR_STATUS_AIS = 4 # Variable c_int
PICO_SCALE = 4 # Variable c_int
GIG_STRUC_TRIGGER_READ_WRITE = 36900 # Variable c_int
ETCOM5 = 4 # Variable c_int
TR_RXABORTFRAMES = 2 # Variable c_long
FR_LINE_SPEED_1472000L = 1472000 # Variable c_long
MAX_TOTAL_PORTS = 2048 # Variable c_int
TCP_SET_ISP_CONNECTIONDATA_CURVE = 97 # Variable c_int
XENPAK_NVR_WAVELENGTH_CHANNEL3 = 40 # Variable c_int
XENPAK_NVR_WAVELENGTH_CHANNEL0 = 31 # Variable c_int
XENPAK_NVR_WAVELENGTH_CHANNEL1 = 34 # Variable c_int
NS_WAIT_COMPLETE = 1 # Variable c_int
PMC_HIFN_MEM_TEST_FAILURE = 1 # Variable c_int
SYNACK = 3 # Variable c_int
XENPAK_10GBASE_LW = 32 # Variable c_int
DOT1X_SUPPLICANT_SESSION_DISCONNECTED = 6 # Variable c_int
FR_TX_SINGLE_PVC_INFO = 33 # Variable c_int
CLASS_OF_SERVICE_2 = 2 # Variable c_int
FRAME_LLC_SSAP = 4 # Variable c_int
WN_CHAN_ATTR_FILL_CFG = 6052 # Variable c_int
MPLS_SERVICE_OBJECT = 1 # Variable c_int
ATM_STR_STATE_CONN_RELEASED = 6 # Variable c_int
WN_DS1_E1_EXCESS_ZEROS_ALARM = 64 # Variable c_int
L3_ARP_REQ = 128 # Variable c_long
NS_HIST_LATENCY_OPTION_INFO = 39499 # Variable c_int
IATM_MISDELIVERED = 37 # Variable c_int
XENPAK_LSS = 8 # Variable c_int
PET_SIG_MSG_TRAFFIC = 2048 # Variable c_int
IATM_SIGNALING = 40 # Variable c_int
PERCENT_LOAD_TO_GAP_BITS = 1 # Variable c_int
NS_WIS_LOOP_TX_CLOCK = 1 # Variable c_int
TRFC_PCFON = 1 # Variable c_int
GIG_PHY_LOOP_REMOTE_XCVR = 5 # Variable c_int
L3_DHCP_STATE_RELEASING = 10 # Variable c_int
WN_NO_ENCAP = 0 # Variable c_int
TR_ERR_BURST = 32 # Variable c_int
MAX_ERRORS = 10 # Variable c_int
NS_PORT_ADDRESS_INFO = 39325 # Variable c_int
ISMB_STD_ERR_COLLISION = 10 # Variable c_int
ATM_TRIGGER_MODE_AAL5 = 1 # Variable c_int
HTHUBID_ALL = 0 # Variable c_int
SPEED_10GHZ = 256 # Variable c_int
ATM1_SAR_MAIN_FW_VERSION = 2 # Variable c_int
POS_STRUC_TRIGGER = 24856 # Variable c_int
ATM_UNI = 714 # Variable c_int
NS_MLD_GROUP_INFO = 39472 # Variable c_int
WN_CHAN_ATTR_COPY_CFG = 6051 # Variable c_int
IP_DEC_IP_AND_MAC_DST = 25 # Variable c_int
NO_OBJECT_REGISTERED_IN_SCOPE = 28 # Variable c_int
GIG_AFN_FULL_DUPLEX = 32 # Variable c_int
INVALID_LINK_PORT_TYPE = -30 # Variable c_int
FRAME_SEN_MAC_ADDR = 89 # Variable c_int
PPP_CONFIGURE_MAXTERMINATE = 2 # Variable c_int
CT_FILTER_OPERATOR_PAT1_OR_PAT2 = 3 # Variable c_int
TCP_CONNECT = 28673 # Variable c_int
PPP_STATUS_INFO = 20996 # Variable c_int
GIG_QOS_TRIGGER = 8 # Variable c_int
HVFD_NONE = 0 # Variable c_int
NS_PHY_DEFAULT_SPEED_10GHZ = 10000 # Variable c_int
TR_LATENCY = 524288 # Variable c_long
WN_IP_SUBNET_DEL_ALL = 6112 # Variable c_int
GIG_STRUC_GET_PORT_GROUP_INFO = 36908 # Variable c_int
ISMB_VG_ERR_PKT = 33 # Variable c_int
FC_FABRIC_LINK_CONFIG_INFO = 13653 # Variable c_int
WN_CHAN_PHYS_COPY_CFG = 6041 # Variable c_int
IL3_IP_CHECKSUM_ERRORS = 46 # Variable c_int
IGMPV1_V2_FORCE_UNSOLICITED_JOIN_REPORTS = 16 # Variable c_int
WN_CHANNEL_DEL = 6031 # Variable c_int
HTTRIGGER_ON = 4 # Variable c_int
ATM_STR_PARAM_GEN_CDVT = 4 # Variable c_int
FR_TRIG_COMP1_OR_COMP2 = 4 # Variable c_int
WN_CARD_CLK_INTERNAL = 1 # Variable c_int
NS_MULTI_TX_STACK = 12 # Variable c_int
SERVER_CLOSE_4WAY = 5 # Variable c_int
SONET_LINE_AIS_ALARMS = 16 # Variable c_int
FLUSH_ERROR = -39 # Variable c_int
WN_DS1_E1_B8ZS_ALARM = 32 # Variable c_int
XENPAK_S_64_2A = 2 # Variable c_int
ATM_STR_PARAM_SIG_FW_PCR_01 = 6 # Variable c_int
NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_0 = 7 # Variable c_int
NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_1 = 8 # Variable c_int
PMC_VPN_HW_TEST_PASS = 0 # Variable c_int
NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_3 = 10 # Variable c_int
NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_4 = 11 # Variable c_int
NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_5 = 12 # Variable c_int
NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_6 = 13 # Variable c_int
NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_7 = 14 # Variable c_int
NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_8 = 15 # Variable c_int
NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_9 = 16 # Variable c_int
WN_PVC_CTRL = 6080 # Variable c_int
LOGFILE_SIZE_1024 = 1024 # Variable c_int
L3_WRITE_DATA_CHECK = 24834 # Variable c_int
TR_ERR_FRAME_COPY = 2 # Variable c_int
NORMAL_UNLINK = 0 # Variable c_int
POS_CARD_PORT_ENCAP_INFO = 24867 # Variable c_int
STREAM_BIND_VC = 1 # Variable c_int
ATM_B_BC_CLASS_A = 1 # Variable c_int
NS_WIS_PATH_AIS_ALARM = 64 # Variable c_int
UNI_DTE = 0 # Variable c_int
CAUSE_CLIR = 23 # Variable c_int
NS_PMC_HIFN_MEM_TEST_INFO = 26120 # Variable c_int
ATM_ELAN_MIN_ARP_RESPONSE_TIME = 1 # Variable c_int
CM_L3_6710 = 21 # Variable c_int
RXLED_OVERSIZEAB = 9 # Variable c_int
AT_VC_CLIP_COUNTER_INFO = 39181 # Variable c_int
PPP_CONFIGURE_MRU = 1500 # Variable c_int
CT_DEFAULT_FILENAME = '/tmp/port' # Variable STRING
ATM_STR_STATE_CONN_PROCEEDING = 4 # Variable c_int
WN_TRIG_COMP2_ONLY = 2 # Variable c_int
FR_NRZ_ENCODE = 1 # Variable c_int
WN_STREAM_EXT_CFG = 6090 # Variable c_int
ATM_LED_STATUS_ALARM_YELLOW = 12 # Variable c_int
IP_DEC_SRC_IP_AND_DST_MAC = 29 # Variable c_int
POS_SONET_PAYLOAD_TYPE_SYNCHRONOUS = 16 # Variable c_int
ISMB_STD_RXTRIGGER = 5 # Variable c_int
TR_LINEERRORS = 4 # Variable c_long
MULTICAST_SOURCE_ADDRESS = 1 # Variable c_int
IATM_TX_AAL_PDU = 49 # Variable c_int
XFP_AUX_MONITORING_PLUS_5V_SUPPLY_CURRENT = 10 # Variable c_int
FR_PVC_CTRL = 43 # Variable c_int
FR_CLK_FALLING_EDGE = 1 # Variable c_int
HT_CBA_8 = 8 # Variable c_int
ETH_PHY_AUTONEGOTIATE_MODE_25 = 33554432 # Variable c_int
ETH_PHY_AUTONEGOTIATE_MODE_24 = 16777216 # Variable c_int
WN_PORT_INFO = 6223 # Variable c_int
ETH_PHY_AUTONEGOTIATE_MODE_26 = 67108864 # Variable c_int
TCP_CONN_STATE_INFO = 28740 # Variable c_int
ATM_STR_PARAM_DEST_ATM_ADDR = 26 # Variable c_int
POS_CLOCK_SOURCE_LOOP_TIMED = 1 # Variable c_int
L3_RECEIVE_CAPTURE_TRIGGERS = 4 # Variable c_int
ATTRIB_CONNECT_V35 = 22 # Variable c_int
FR_START_CMD = 104 # Variable c_int
MII_REGISTER_AN_EXPANSION = 6 # Variable c_int
GIG_STATUS_1420B = 16384 # Variable c_long
L3_VFD_STATIC = 0 # Variable c_int
FRAME_TCP_HEADER_LENGTH = 53 # Variable c_int
ATM_STREAM_PARAMS_MODIFY = 732 # Variable c_int
ATM_UNCORRECTABLEHEADERS = 4 # Variable c_long
L3_USB_PORT_ENABLED = 4194304 # Variable c_int
FRAME_ACK_BIT = 73 # Variable c_int
IATM_TX_CELLS = 48 # Variable c_int
MII_REGISTER_AN_ADVERTISEMENT = 4 # Variable c_int
FC_MAX_NUM_LINKS = 225 # Variable c_int
ATM_ATM_DS3_E3_OOF_ALARM = 2 # Variable c_int
INVALID_NODE_OR_FABRIC_NAME = 8 # Variable c_int
PORTS_PER_ACTIVE_CARD = 1 # Variable c_int
FST_CAP_ENTIRE_FRAME = 0 # Variable c_int
ATM_STR_STATE_ADDR_RES_FAILED = 2 # Variable c_int
CM_POS_3510A = 57 # Variable c_int
ISMB_STD_ERR_CRC = 6 # Variable c_int
NS_TRIGGER_OUT_RX = 1 # Variable c_int
ATM1_SAR_BOOT_FW_VERSION = 1 # Variable c_int
CLIENT_CLOSE_RST = 2 # Variable c_int
XFP_TRANSCEIVER_V_64_3 = 32 # Variable c_int
ETH_QOS_COUNTER_INFO = 20504 # Variable c_int
SMB_STD_RXFRAMES = 8 # Variable c_long
XFP_OPTIONAL_ACTIVE_FEC_CONTROLS = 4 # Variable c_int
XENPAK_OPTICAL_LC_TYPE = 2 # Variable c_int
XENPAK_NVR_STANDARDS_COMPLIANCE_CODES = 17 # Variable c_int
L3_RECEIVE_TRACKING_LATENCY = 2 # Variable c_int
IGMPV3_INCLUDE_FILTER_MODE = 0 # Variable c_int
L3_VFD_OFF = 4 # Variable c_int
FRAME_TCP_SEQUENCE = 58 # Variable c_int
NS_CAPTURE_STATUS_DATA_INTEGRITY_MARKER = 2048 # Variable c_int
L3MS_FIELD_GATEWAY = 7 # Variable c_int
L3_RECEIVE_CAPTURE_OFF = 0 # Variable c_int
NS_RUNTIME_ENHANCED_HIST_STATS = 39526 # Variable c_int
WN_T1E1_LINE_DEL = 6065 # Variable c_int
VG_CFG_ETHERNET = 0 # Variable c_int
PPP_SESSION_STATS_INFO = 21028 # Variable c_int
SONET_PATH_YELLOW_ALARM = 256 # Variable c_int
ATM_CONNECTION = 724 # Variable c_int
FR_IP_SUBNET_REG = 25 # Variable c_int
FR_LINE_SPEED_56000L = 56000 # Variable c_long
CAPTURE_RXTRIG = 1 # Variable c_int
NS_STREAM_MULTI_CONFIG_MODE_MOD = 1 # Variable c_int
NS_EN_RUNTIME_TIMESTAMP = 64 # Variable c_int
AT_SONET_LINE_AIS_ALARM = 32 # Variable c_int
FR_LINE_SPEED_1344000L = 1344000 # Variable c_long
FR_MAX_IPSUBNET_ID = 255 # Variable c_int
ENCAP_BRIDGE_FR = 7 # Variable c_int
HTTRANSMIT_STD = 1 # Variable c_int
AT_HEC_ERROR_HANDLING_CORRECT = 2 # Variable c_int
VG_CFG_TOKENRING = 1 # Variable c_int
FC_NODE_N_PORT = 1 # Variable c_int
L3_TRANSMIT_GETADDRESS = 12 # Variable c_int
FST_CAP_STOP_ON_CONDITION = 1 # Variable c_int
ATM_CALL_PARAM_CALL_DELAY_FROM_START = 14 # Variable c_int
CM_SC_6305 = 2 # Variable c_int
AT_STREAM_TX_COUNTER_INFO = 39178 # Variable c_int
POS_LOOPBACK_MODE_OFF = 0 # Variable c_int
CM_AT_3453A = 62 # Variable c_int
ATM_B_BC_CLASS_VP = 24 # Variable c_int
IP_INC_IP_AND_MAC_SRC = 24 # Variable c_int
AT_PORT_ALLOW_ALL_FRAME_SIZES = 1 # Variable c_int
NS_HIST_LATENCY_OVER_TIME = 12322 # Variable c_int
STR_RATE_CLASS_UBR = 2 # Variable c_int
ETDP_INCR8 = 13 # Variable c_int
MPLS_EXPLICIT_ROUTE_OBJECT_CREATE = 38929 # Variable c_int
PORT_IDENTIFIER_NOT_REGISTERED = 12 # Variable c_int
TR_STATUS_16MB = 32768 # Variable c_long
FR_LINE_SPEED_1152000L = 1152000 # Variable c_long
FRAME_TYPE_SERVICE = 54 # Variable c_int
FR_HIST_DATA_TYPE_INFO = 64 # Variable c_int
L3_ENGINE_RECEIVE = 1 # Variable c_int
PPP_STATUS_LCP_STATE = 1 # Variable c_int
AT_LOOPBACK_DISABLED = 0 # Variable c_int
WN_DS3_M13_LINE_FRAMING = 1 # Variable c_int
ADDRESS_AUTOCONFIG_RUNNING = 16 # Variable c_int
MII_AN_FLOW_CONTROL = 1024 # Variable c_int
TR_MAC_LINEERRORS = 512 # Variable c_long
MPLS_ATTRIBUTE_OBJECT_CREATE = 38927 # Variable c_int
FST_CAP_START_ON_CONDITION = 0 # Variable c_int
IATM_TIMEOUT = 50 # Variable c_int
OFFSET_FROM_IP_HEADER = 1 # Variable c_int
ATM_STR_PARAM_ELAN_INST = 30 # Variable c_int
CM_WN_3415 = 25 # Variable c_int
PPP_OE_LOCAL_IPV6_ADDR = 34 # Variable c_int
FR_VFD_RANDOM = 1 # Variable c_int
FR_TRIG_NO_TRIG = 0 # Variable c_int
GIG_MULTIBURST_MODE = 3 # Variable c_int
MIN_TFOM_LIMIT = 0 # Variable c_int
L3_MODIFY_STREAMS = 80 # Variable c_int
ETLOOPBACK_ON = 1 # Variable c_int
NS_MULTI_IPV6_PING_REPLIES_RX = 48 # Variable c_int
ETBNC_EXTCLK = 26 # Variable c_int
L3_TX_RETRIES = 2 # Variable c_long
GIG_STRUC_TX = 36870 # Variable c_int
NS_HIST_TEST_COMBO_PER_STREAM = 16 # Variable c_int
ENABLE_ROUTER_DISCOVERY = 1 # Variable c_int
ISMB_STD_TXTRIGGER = 2 # Variable c_int
CA_DUPLEX_HALF = 8 # Variable c_long
GIG_STRUC_VFD3_READBACK = 36898 # Variable c_int
CT_MAX_FRAME_LENGTH = 2048 # Variable c_int
DOT1X_SUPPLICANT_SESSION_AUTHENTICATED = 4 # Variable c_int
CM_LAN_3710AS = 51 # Variable c_int
CM_LAN_3710AL = 52 # Variable c_int
ATM_STR_STATUS_ARP_RETRY_COUNT = 4 # Variable c_int
STR_RATE_CLASS_CBR = 0 # Variable c_int
FC_PORT_CONFIG = 13569 # Variable c_int
BUFFER_CONTINUOUS = 0 # Variable c_int
FR_LINE_SPEED_640000L = 640000 # Variable c_long
CM_LAN_3710AE = 53 # Variable c_int
ETBNC_TXEB = 8 # Variable c_int
VCDB_RENUMBERED = 1048576 # Variable c_int
XAUI_MODULE_10GBASE = 1 # Variable c_int
NSU64IsLE = 6 # Variable c_int
XAUI_PRBS_TEST_RUNNING = 1 # Variable c_int
CALL_STATE_RELEASE_REQUEST = 11 # Variable c_int
WN_DS3_CBIT_LINE_FRAMING = 0 # Variable c_int
WRONG_HUB_CARD_TYPE = -13 # Variable c_int
XENPAK_NVR_CONFIG_INFO = 36931 # Variable c_int
ISMB_STD_TXBYTES = 1 # Variable c_int
XFP_TRANSCEIVER_2xFC_SMF = 16 # Variable c_int
NSU64IsLT = 4 # Variable c_int
XFP_TRANSCEIVER_10GBASE_LR = 64 # Variable c_int
NS_CT_CLEAR_BUFFER = 39339 # Variable c_int
WN_TRIGGER_DEL_ALL = 6103 # Variable c_int
ATM_CALL_PARAM_CALL_LENGTH = 16 # Variable c_int
SOURCE_ADDRESS_SELECT_PASSED = 2048 # Variable c_int
ARP_INNER_VLAN_TAG = 1 # Variable c_int
FR_DUP_PVC_MAP = 18 # Variable c_int
ATM_STR_STATE_CONN_FAILED = 7 # Variable c_int
TRIGLED_RX = 2 # Variable c_int
ATM_CALL_DIST_RANDOM = 2 # Variable c_int
ATM_CALL_PARAM_SCR = 3 # Variable c_int
CM_AT_9034B = 46 # Variable c_int
POS_CONFIG = 24857 # Variable c_int
PET_SSCOP_TMR_ACTIVITY = 32 # Variable c_int
FR_HIST_SCALE = 63 # Variable c_int
WN_DS1_B8ZS_ENCODING = 1 # Variable c_int
TR_MAC_ABORTTX = 8192 # Variable c_long
WN_CARD_CFG_INFO = 6201 # Variable c_int
GIG_STATUS_10MHZ = 131072 # Variable c_long
CAPTURE_MODE_STOP_ON_EVENTS = 2 # Variable c_int
PPP_OE_PADO_SENT = 2 # Variable c_int
PPP_OE_ACNAME = 31 # Variable c_int
ISMB_STD_TXFRAMES = 0 # Variable c_int
MAX_FILL_PATTERN_SIZE = 2044 # Variable c_int
L3_ETHERNET_ON = 1 # Variable c_int
MII_AN_100BASE_TX = 128 # Variable c_int
PPP_CHAPMS = 128 # Variable c_int
FC_CONFIG_COMMIT = 1 # Variable c_int
FC_HBA_MODE_START = 13632 # Variable c_int
PUBLIC_MODE = 1 # Variable c_int
ETH_PHY_DESCRAMBLER_LOCKED = 512 # Variable c_int
FR_RX_AGGREGATE_PVC_INFO = 34 # Variable c_int
PHY_MODE_LAN = 1 # Variable c_int
CA_CONNECT_TP = 32 # Variable c_long
FRAME_IDENTIFIER = 88 # Variable c_int
AFSIG_RESTART_SUCCESS = 2 # Variable c_int
GIG_STRUC_UPLOAD_ERROR_LOG = 36917 # Variable c_int
CAUSE_INV_CALL_REF = 81 # Variable c_int
CT_POS = 11 # Variable c_int
CAPTURE_EVENTS_SIGNATURE = 2048 # Variable c_int
MII_AN_100BASE_T4 = 512 # Variable c_int
XENPAK_I_64_2R = 4 # Variable c_int
FR_MAX_VFD_PATTERNS = 4 # Variable c_int
NS_CT_ENABLE_PROCESS = 39336 # Variable c_int
CM_FBC_3602A = 55 # Variable c_int
MPLS_EXPLICIT_ROUTE_IPV4 = 1 # Variable c_int
GIG_STRUC_IMAGE_DOWNLOAD = 36903 # Variable c_int
ATM2_RXT_FPGA_VERSION = 5 # Variable c_int
NS_IGMP_JOIN_VLAN = 28707 # Variable c_int
CA_SIGNALRATE_1000MB = 131072 # Variable c_long
NS_STREAM_ARP_STATUS_INFO = 39527 # Variable c_int
NS_IPV4_OPTION_HEADER = 4 # Variable c_int
L3_RECEIVE_GETCAPTUREPACKET = 1 # Variable c_int
TCP_ADD_ACCEPTOR_ADDR = 1020 # Variable c_int
NS_MULTI_LFS_LOCAL_CONTINUE = 64 # Variable c_int
CM_LAN_3321A = 70 # Variable c_int
CA_SIGNALRATE_4MB = 1024 # Variable c_long
FR_NIC_EIA_RD_RTS = 2097152 # Variable c_long
HUB_SLOT_PORT_UNAVAILABLE = -17 # Variable c_int
NS_TRIGGER_CONFIG_INFO = 39481 # Variable c_int
NS_MLD_CONFIG = 39435 # Variable c_int
GIG_STRUC_CAP_INFO_REQUEST = 116 # Variable c_int
NS_MOD_IPV6_EXT_ROUTING = 39448 # Variable c_int
L3MS_FIELD_FC_COS = 59 # Variable c_int
IN_SVC_DONT_ADD_TO_DATABASE = 0 # Variable c_int
ATM_STR_PARAM_SIG_FW_TD_TYPE = 17 # Variable c_int
NS_HIST_MULTICAST_LATENCY_PER_STREAM = 12882 # Variable c_int
RUNTIME_MODE_OFF = 3 # Variable c_int
FR_UNI_UP = 2 # Variable c_int
FR_PVC = 3 # Variable c_int
ATTRIB_SPEED_8MB = 23 # Variable c_int
GIG_STRUC_TX_READ_WRITE = 36899 # Variable c_int
ATM_B_BC_TYPE_CBR = 4 # Variable c_int
PPPO_USECHAPAUTH = 16 # Variable c_int
IP_INC_SRC_MAC_DST_MAC = 33 # Variable c_int
L3_CAPTURE_PACKET_DATA_INFO_MT = 1 # Variable c_int
NS_MULTI_IPV4_ICMP_UNREACHABLE_RX = 51 # Variable c_int
PORT_MAPPING_NATIVE = 1 # Variable c_int
ETH_PHY_LINK_GOOD = 256 # Variable c_int
FC_PUBLIC_DISCOVERY = 13579 # Variable c_int
NS_MULTI_TX_SIGNATURE_MPLS_FRAMES = 26 # Variable c_int
HIST_SEQ_TRACK = 1 # Variable c_int
COS_NOT_REGISTERED = 15 # Variable c_int
FW_FC_FS_QUERY_STATS = 28969 # Variable c_int
ISMB_VG_PRIO_PROM_PKT = 35 # Variable c_int
ETH_FILL_PATTERN_INFO = 53250 # Variable c_int
FRAME_DST_PORT = 69 # Variable c_int
HTHUBID_2 = 2 # Variable c_int
HTHUBID_3 = 3 # Variable c_int
HTHUBID_1 = 1 # Variable c_int
NS_IGMPV3_CONFIG = 39377 # Variable c_int
HTHUBID_4 = 4 # Variable c_int
L3_MULTIBURST_MODE = 3 # Variable c_int
ATTRIB_TERAMETRICS = 34 # Variable c_int
CLIENT_CLOSE_4WAY = 6 # Variable c_int
L3MS_FIELD_VFD1_CYCLE_COUNT = 63 # Variable c_int
DOT1X_SUPPLICANT_SRC_MAC = 10 # Variable c_int
NS_UDP_IPV6_STREAM_INFO = 39386 # Variable c_int
ETBAUD_38400 = 4 # Variable c_int
RXLED_ERRORA = 1 # Variable c_int
FR_STEP_CMD = 105 # Variable c_int
ETH_TRIGGER2_ONLY = 2 # Variable c_int
NS_HIST_COMBO_PER_STREAM = 12321 # Variable c_int
FR_CARD_CLK_INTERNAL = 1 # Variable c_int
NS_MULTI_IPV6_ICMP_UNREACHABLE_RX = 52 # Variable c_int
OAM_PACKET_TYPE_NONE_OAM = 0 # Variable c_int
ATM2_RXD_FPGA_VERSION = 6 # Variable c_int
DOT1X_SUPPLICANT_REAUTHENTICATE = 6 # Variable c_int
POS_SONET_PAYLOAD_TYPE_UNEQUIPPED = 0 # Variable c_int
ATM_SONET_INFO = 707 # Variable c_int
TR_RXMAC = 1 # Variable c_long
HT_CBA_DEFAULT = 0 # Variable c_int
NS_MLDV1_LISTEN = 39438 # Variable c_int
SSCOP_DEFAULT_TMR_NO_RESP_3_1 = 700 # Variable c_int
NS_HIST_LATENCY_DIST_PER_STREAM = 12324 # Variable c_int
IP_OPTION_RECORD_ROUTE = 7 # Variable c_int
XENPAK_NVR_OPTICAL_CONNECTOR = 12 # Variable c_int
PPP_LCP_IPCP_REQSENT = 6 # Variable c_int
CM_AT_9025 = 11 # Variable c_int
L3MS_FIELD_DIPV6 = 40 # Variable c_int
DISABLE_NON_BLOCKING_MODE = 0 # Variable c_int
FR_LINE_SPEED_576000L = 576000 # Variable c_long
L3_VFD_RANDOM = 3 # Variable c_int
L3MS_FIELD_FC_EOF = 70 # Variable c_int
PORT_LINK_DOWN = 1 # Variable c_int
SLOT_RESERVED_BY_USER = 1 # Variable c_int
MLD_FORCE_RESPONSE = 16 # Variable c_int
NS_IPV6_EXT_ESP_HEADER = 16 # Variable c_int
NS_IGMPV3_GROUP_INFO = 39375 # Variable c_int
FR_UNI_DISABLED = 0 # Variable c_int
FR_DS3_M13_LINE_FRAMING = 3 # Variable c_int
MICRO_SCALE = 2 # Variable c_int
DOT1X_ALL = 65535 # Variable c_int
ITR_MAC_RXCONGESTED = 47 # Variable c_int
ATM_STM4_FRAMING = 3 # Variable c_int
ISMB_STD_RXFRAMES = 3 # Variable c_int
GIG_VFD3_ON = 1 # Variable c_int
XAUI_PRBS_TEST_DISABLE = 0 # Variable c_int
HTLED_ORANGE = 3 # Variable c_int
HTLED_LINK_10MHZ = 131072 # Variable c_long
TCP_GET_RX_LOG_2 = 28683 # Variable c_int
ATM_STR_STATUS_STREAM_INDEX = 0 # Variable c_int
ATM_CONN_TYPE_SVC = 1 # Variable c_int
NS_SONET_LINE_BIP_ALARM = 64 # Variable c_int
ISMB_VG_INV_PKTMARK = 32 # Variable c_int
IL3_ARP_REQ = 39 # Variable c_int
FR_LOOP_TIMED_CLOCK = 0 # Variable c_int
GIG_STRUC_RESTART = 36905 # Variable c_int
CAPTURE_EVENTS_RUNNING_DISPARITY_ERRORS = 128 # Variable c_int
STREAM_PROTOCOL_UDP_IPV6_VLAN = 20 # Variable c_int
NS_RUNTIME_HIST_COMBO_PER_STREAM_INFO = 39510 # Variable c_int
WN_FEATURES_PER_PVC_RATE = 4 # Variable c_int
WN_PVC_AGGREGATE_CNT_MAX = 16 # Variable c_int
AT_SPEED_OC12 = 1 # Variable c_int
NS_VFD_INCR = 1 # Variable c_int
HARD_ADDRESS_NOT_REGISTERED = 24 # Variable c_int
ATM_E1_AMI_ENCODING = 2 # Variable c_int
FC_NODE_CONFIG_INFO = 13669 # Variable c_int
CM_NOT_PRESENT = 0 # Variable c_int
ETGAP_100NS = 1 # Variable c_int
PMC_DISK_MEM_TEST_FAILURE = 1 # Variable c_int
NS_PORT_TRANSMIT = 20491 # Variable c_int
CAPTURE_CRC = 2 # Variable c_int
LOGFILE_SIZE_16384 = 16384 # Variable c_int
XENPAK_TYPE = 1 # Variable c_int
ATMV_FIELD_BURST_GAP = 9 # Variable c_int
NS_MULTI_TX_IPV4_FRAMES = 15 # Variable c_int
FR_NO_ENCAP = 0 # Variable c_int
GIG_STRUC_FILL_PATTERN = 36878 # Variable c_int
VC_TYPE_SVC = 2 # Variable c_int
FR_LMP_ANNEX_D_PARM = 2 # Variable c_int
FR_LINE_SPEED_704000L = 704000 # Variable c_long
L3_HIST_TEST_LATENCY_DISTRIBUTION = 4 # Variable c_int
NS_MULTI_HW_RX_FRAMES = 62 # Variable c_int
PPP_OE_USE_ZEROLEN_SVCNAME = 4 # Variable c_int
WN_E1_HDB3_ENCODING = 1 # Variable c_int
ITR_TOKEN_RT = 52 # Variable c_int
GIG_AFN_RESERVED11 = 2048 # Variable c_int
GIG_AFN_RESERVED10 = 1024 # Variable c_int
FC_FSPF_CONFIG_INFO = 13649 # Variable c_int
L3MS_FIELD_GATEWAYA = 19 # Variable c_int
L3MS_FIELD_GATEWAYB = 20 # Variable c_int
L3MS_FIELD_GATEWAYC = 21 # Variable c_int
L3MS_FIELD_GATEWAYD = 22 # Variable c_int
DOT1X_EAP_TYPE_PHASE2_MSCHAPV2 = 1 # Variable c_int
MII_STATUS_100BASE_X_FULL = 16384 # Variable c_int
FR_E1_75_OHM_HIRL = 2 # Variable c_int
XFP_OPTIONAL_SMU_SUPPORT_MODE = 1 # Variable c_int
WN_E1_120_OHM_NORMAL = 3 # Variable c_int
ATM_ELAN_REGISTER = 735 # Variable c_int
RENUMBERED_FLAG = 4 # Variable c_int
FR_LINE_SPEED_8192000L = 8192000 # Variable c_long
WN_HIST_CTRL = 6123 # Variable c_int
PPPO_USEPAPAUTH = 32 # Variable c_int
MLDV1_STOP_LISTEN = 2 # Variable c_int
NS_MULTI_RX_IPV4_FRAMES = 16 # Variable c_int
CT_TOKENRING = 4 # Variable c_int
XFP_TRANSCEIVER_I_64_1r = 128 # Variable c_int
FR_ETSTAT_UNI_UP = 32768 # Variable c_int
ATM_ILMI_UME_INACTIVE = 0 # Variable c_int
CAUSE_INCOMP_DEST = 88 # Variable c_int
NS_TRACK_STREAM_ID = 2 # Variable c_int
XFP_IDENTIFIER_GBIC = 1 # Variable c_int
NS_WIS_SONET_FRAMING = 0 # Variable c_int
NS_WIS_SDH_FRAMING = 1 # Variable c_int
PPP_MRU = 21 # Variable c_int
ATM_ELAN_MIN_CONTROL_TIMEOUT = 10 # Variable c_int
NS_DECISION_ABORT = 0 # Variable c_int
NS_ALTERNATE_KEY_INVERSE_TRIG_PREFILTER = 3 # Variable c_int
ATM_STREAM_VCC_INFO = 120 # Variable c_int
TR_MAC_INTERNALERRORS = 1024 # Variable c_long
NS_M_GET_L3_STAT_INFO = 39372 # Variable c_int
FW_FC_FS_RUN_TEST = 28968 # Variable c_int
NS_LAT_SCALE_1_MILLISECOND = 0 # Variable c_int
ITR_MAC_TOKENERROR = 50 # Variable c_int
CAUSE_LOC_TRANS_NET = 3 # Variable c_int
NS_WIS_INJECT_PATH_BIP_ERRORS = 8 # Variable c_int
XFP_TRANSCEIVER_I_64_1 = 64 # Variable c_int
XFP_AUX_MONITORING_PLUS_5V_SUPPLY_VOLTAGE = 6 # Variable c_int
XENPAK_NVR_VENDOR_OUI = 47 # Variable c_int
XFP_CONNECTOR_FC_STYLE_2 = 3 # Variable c_int
XFP_CONNECTOR_FC_STYLE_1 = 2 # Variable c_int
SSCOP_STATE_IN_CONN_PEND = 3 # Variable c_int
WN_DS3_FRMR_STATUS_FERF = 16 # Variable c_int
NS_EN_RUNTIME_MIN_LATENCY_INDEX = 1 # Variable c_int
L3_RECEIVE_ARPTIMES_REPORT = 6 # Variable c_int
XFP_AUX_MONITORING_LASER_WAVELENGTH = 5 # Variable c_int
XFP_TRANSCEIVER_I_64_2 = 16 # Variable c_int
FC_LOG_LEVEL_INFO = 7 # Variable c_int
DOT1X_SUPPLICANT_DELETE = 4 # Variable c_int
DATA_BASE_EMPTY = 27 # Variable c_int
SCHED_TYPE_EQUALLY = 1 # Variable c_int
FC_FSPF_START = 13664 # Variable c_int
FRAME_PROTOCOL_IP = 1 # Variable c_int
GIG_STRUC_AFN_CONFIG = 36925 # Variable c_int
DOT1X_SUPPLICANT_FAILURE_AUTH_PERIOD_TIMEOUT = 8 # Variable c_int
NS_MOD_IPV6_EXT_FRAGMENT = 39449 # Variable c_int
NS_MULTI_RX_DROPPED_FRAMES = 14 # Variable c_int
REENTRANT_ERROR = -19 # Variable c_int
MPLS_RSVP_ATTRIBUTE = 1 # Variable c_int
ATM_TD_AGGR_PEAK_RATE = 4 # Variable c_int
L3MS_FIELD_DATA_INTEGRITY_ERROR_ENABLE = 55 # Variable c_int
ITR_LATENCY = 51 # Variable c_int
L3_SET_MULTIDEFINESTREAMS = 18 # Variable c_int
L3_ARP_SEND = 256 # Variable c_long
IP_DEC_SRC_IP = 21 # Variable c_int
ATM_INCOMING_SVC_METHOD = 47 # Variable c_int
L3_DATA_INTEGRITY_ERRORS = 8192 # Variable c_long
ADDRESS_AUTOCONFIG_COMPLETED = 32 # Variable c_int
SIG_TRACE_STOP_ON_TRACE_BUFFER_FULL = 1 # Variable c_int
AN_REGISTERS_UNTOUCHED = 2 # Variable c_int
NS_MAX_STREAMS = 30000 # Variable c_int
CA_GBIC = 2147483648L # Variable c_ulong
XENPAK_TX_ALARM_PMA_PMD_TRANSMITTER_LOCAL_FAULT_ENABLE = 4 # Variable c_int
NS_DECISION_RETRY_ONCE = 1 # Variable c_int
NS_RPM_LIST_INFO = 20529 # Variable c_int
NS_APPEND = 0 # Variable c_int
RTP_PAYLOAD_G711U = 0 # Variable c_int
NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_12 = 19 # Variable c_int
CAUSE_NUMBER_CHANGED = 22 # Variable c_int
PPP_REQUESTED_OPTIONS = 0 # Variable c_int
NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_13 = 20 # Variable c_int
NS_MULTI_RX_CRC_ERROR = 19 # Variable c_int
XENPAK_OPTICAL_PIGTAIL_TYPE = 6 # Variable c_int
ETLNM_ON = 1 # Variable c_int
L3_CAPTURE_STATUS_ALIGNMENT = 128 # Variable c_int
NS_IGMP_COUNTER_INFO = 28706 # Variable c_int
ATM_PER_PORT_BURST = 705 # Variable c_int
FR_STATUS_GROUP_MEMBER = 1024 # Variable c_long
ATTRIB_CONNECT_FIBER = 19 # Variable c_int
FR_ETSTAT_LINKINTEGRITY = 512 # Variable c_int
WN_DS3_BUILDOUT_GT225 = 1 # Variable c_int
NS_ETH_PHY_COUNTERS = 39460 # Variable c_int
NEXT_HOP_SIMPLE_MODE = 0 # Variable c_int
GIG_STRUC_TRIGGER_READBACK = 36891 # Variable c_int
HUB_DEFAULT_ACTION = 0 # Variable c_int
PPP_STATUS_OSI_RX_ALIGNMENT = 23 # Variable c_int
XENPAK_S_64_1 = 1 # Variable c_int
FR_SET_RELEASE_CAP_CNT = 51 # Variable c_int
L3MS_FIELD_IP_MAN_MODE = 34 # Variable c_int
GIG_CMD_CLEAR_STATS = 36883 # Variable c_int
GIG_STRUC_LOAD_FPGA = 36916 # Variable c_int
ATM_VCDB_CLEAR_FLAG = 94 # Variable c_int
L3_USB_ON = 0 # Variable c_int
HIST_LAT_DISTRIBUTION = 4 # Variable c_int
STREAM_PROTOCOL_UDP_PPPOA = 24 # Variable c_int
SSCOP_DEFAULT_MAX_CC = 4 # Variable c_int
TCP_CLOSE_ONE = 28675 # Variable c_int
XFP_TRANSCEIVER_L_64_1 = 128 # Variable c_int
XENPAK_MODULE_10GBASE_LX4 = 67 # Variable c_int
L3_ENGINE_TRANSMIT = 0 # Variable c_int
CM_LAN_3320A = 69 # Variable c_int
XFP_CONNECTOR_MU = 9 # Variable c_int
CAUSE_IE_INV_OR_NOT_AVAIL = 99 # Variable c_int
NS_IGMP_JOIN = 28695 # Variable c_int
NS_PMC_DEVICE_INFO = 26114 # Variable c_int
PORT_LINK_INITIALIZING = 2 # Variable c_int
STATS_MODE_NORMAL = 0 # Variable c_int
ATM_SAAL_ESTABLISH = 40 # Variable c_int
ATM_STR_PARAM_GEN_MBS = 3 # Variable c_int
DOT1X_SUPPLICANT_SESSION_PENDING_TO_START = 2 # Variable c_int
FC_SWITCH_TOPOLOGY_CORE_EDGE = 4 # Variable c_int
FR_MOD_PVC_MAP = 21 # Variable c_int
MPLS_SERVICE_OBJECT_CREATE = 38925 # Variable c_int
ATTRIB_SPEED_10GB = 36 # Variable c_int
FR_ETSTAT_GROUPMEMBER = 1024 # Variable c_int
GIG_STRUC_VFD3 = 36877 # Variable c_int
XFP_TRANSCEIVER_1200_SM_LL_L = 64 # Variable c_int
AT_ENCAP_TYPE_VCMUX_MPLS = 2 # Variable c_int
PVCAD_DEFAULT_OUTSTANDING_REQID_TIMEOUT = 100 # Variable c_int
OAM_PACKET_TYPE_IDLE_OAM = 2 # Variable c_int
ATM_TXD_MEMORY_FAILURE = 128 # Variable c_int
XENPAK_I_64_2 = 8 # Variable c_int
ETMF_PACKET_LENGTH = 0 # Variable c_int
ATM_CALL_LENGTH_FOREVER = 3 # Variable c_int
GIG_CONTROL_VLAN_GENERATE = 4 # Variable c_int
DOT1X_PORT_MODE_MULTI_AUTHENTICATION = 1 # Variable c_int
EXPRESS_UNLINK = 1 # Variable c_int
ETMF_GAP_TIME = 8 # Variable c_int
CM_AT_3452A = 61 # Variable c_int
L3_TRANSMIT_GETSTREAMCOUNT = 11 # Variable c_int
XENPAK_PHY_CONFIG = 36928 # Variable c_int
HIST_RAW_TAGS = 5 # Variable c_int
MII_STATUS_EXT_CAP = 1 # Variable c_int
NS_WIS_LINE_FERF_ALARM = 16 # Variable c_int
DOT1X_SUPPLICANT_ID = 5 # Variable c_int
ATM_CALL_PARAM_CALL_ADDR_INDEX = 8 # Variable c_int
NS_MULTI_VLAN_PRI_3_RX = 56 # Variable c_int
L3_IGMP_JOIN = 28710 # Variable c_int
HTTRIGGER_OFF = 0 # Variable c_int
XFP_IDENTIFIER_XENPAK = 5 # Variable c_int
NEXT_HOP_COMPLETED = 256 # Variable c_int
PRIVATE_MODE = 0 # Variable c_int
NS_PMC_VPN_INFO = 26116 # Variable c_int
PPP_STATUS_PPPOE_STATE = 13 # Variable c_int
INVALID_SOURCE_ADDRESS = 2 # Variable c_int
ATM_COMP1_AND_COMP2 = 2 # Variable c_int
GIG_STRUC_AUTO_NEGO_READBACK = 36892 # Variable c_int
WN_DS3_CARD_BASE = 6000 # Variable c_int
PET_SSCOP_API_TRAFFIC = 2 # Variable c_int
NS_MLDV2_LISTENER_REPORT_CONFIG = 39473 # Variable c_int
SSCOP_DEFAULT_MAX_STAT = 67 # Variable c_int
NS_IPV6_CONFIG = 39406 # Variable c_int
XENPAK_ALARM_CONFIG = 36932 # Variable c_int
XENPAK_NVR_VENDOR_NAME = 51 # Variable c_int
ATM_DS3_E3_LOS_ALARM = 32 # Variable c_int
NS_CARD_HARDWARE_INFO = 39333 # Variable c_int
ATTRIB_SPEED_2_048MB = 28 # Variable c_int
NS_VERSION_UNRELEASED = 0 # Variable c_int
MAX_PASSIVE_SLOTS = 256 # Variable c_int
CUT_THROUGH_MODE = 1 # Variable c_int
WN_TRIG_COMP1_ONLY = 1 # Variable c_int
ETH_PHY_MLT3_CODE_ERROR = 1 # Variable c_int
MPLS_RSVP_PHP_ENABLE = 8 # Variable c_int
FR_HIST_L3_LATENCYDISTRIBUTION = 4 # Variable c_int
ATM_FEATURES_PER_CONN_BURST = 2 # Variable c_int
NS_HIST_RAW_SIGNATURE = 12320 # Variable c_int
FST_MAX_CAPTURE_FRAMES = 96 # Variable c_int
FRAME_URGENT_POINTER = 80 # Variable c_int
FR_CAPTURE_INFO = 53 # Variable c_int
XFP_AUX_MONITORING_APD_BIAS_VOLTAGE = 1 # Variable c_int
PORT_NAME_NOT_REGISTERED = 13 # Variable c_int
PORT_FABRIC_LOGIN_ERROR = 16 # Variable c_int
NS_MOD_IPV6_EXT_AUTHENTICATION = 39451 # Variable c_int
FC_SEND_CUSTOM = 13592 # Variable c_int
PPP_STATUS_LATENCY = 12 # Variable c_int
WN_COMMIT_CFG = 6401 # Variable c_int
GIG_STRUC_TEST_RAM = 36911 # Variable c_int
POS_SET_SPEED = 1830 # Variable c_int
CAUSE_NO_VPCI_VCI_AVAILABLE = 45 # Variable c_int
ETH_PHY_LINK_PARTNER_NEXT_PAGE_CAPABLE = 524288 # Variable c_int
TIME_TAG_ON = 1 # Variable c_int
MFTYPERATE = 1 # Variable c_int
TR_STATUS_BADSTREAM = 512 # Variable c_long
FR_CAP_CNT_INFO = 52 # Variable c_int
FC_LOG_LEVEL_FATAL = 2 # Variable c_int
SIG_EMUL_TEARDOWN = 1 # Variable c_int
NS_WIS_INJECT_SECTION_BIP_ERRORS = 2 # Variable c_int
INVALID_SOLICITED_FLAG = 2 # Variable c_int
AT_SPEED_OC3 = 0 # Variable c_int
CAPTURE_EVENTS_OUT_OF_SEQUENCE = 1024 # Variable c_int
FR_PVC_INFO = 32 # Variable c_int
ETBNC_RDATB = 6 # Variable c_int
ETBNC_RDATA = 5 # Variable c_int
ISMB_STD_RXBYTES = 4 # Variable c_int
SONET_LINE_BIP96_ERRORS = 4 # Variable c_int
IL3_PINGREP_SENT = 42 # Variable c_int
WN_CHANNEL_STATUS = 6242 # Variable c_int
CM_XLW_3721A = 67 # Variable c_int
ETDP_INCR16 = 14 # Variable c_int
USE_RANDOM = 2 # Variable c_int
NS_MLD_STOP_LISTEN = 39471 # Variable c_int
LCP_CLOSE_AUTH_FAILURE_NO_RSP = 1 # Variable c_int
CAPTURE_ALIGN = 4 # Variable c_int
GIG_CAP_CRC = 8 # Variable c_int
IGMP_FORCE_RESPONSE = 32 # Variable c_int
SONET_PATH_FERF_ALARM = 128 # Variable c_int
FC_FSPF_SHUTDOWN = 13665 # Variable c_int
PPP_MOD_SRCMAC = 8 # Variable c_int
MII_AN_ACKNOWLEDGE = 16384 # Variable c_int
HTTRANSMIT_COL = 2 # Variable c_int
NS_EN_RUNTIME_RETRIEVE_AFTER_TEST = 1073741824 # Variable c_int
PPP_NO_ACTION = 0 # Variable c_int
WN_DS1_D4_LINE_FRAMING = 0 # Variable c_int
L3_SET_MODIFYSTREAM = 17 # Variable c_int
FR_SET_PORT_LMI_ENQ = 46 # Variable c_int
PPP_NCPS_INIT = 0 # Variable c_int
MLDV1_FORCE_UNSOLICITED_LISTEN_REPORTS = 8 # Variable c_int
CAPTURE_EVENTS_IP_CHECKSUM_ERROR = 16 # Variable c_int
HTTRANSMIT_OFF = 0 # Variable c_int
ETH_PHY_PARALLEL_LINK_FAULT = 8388608 # Variable c_int
FST_PROTOCOL_COUNTER_INFO = 1291 # Variable c_int
PPP_LCP_IPCP_STOPPED = 3 # Variable c_int
DOT1X_PORT_MODE_SINGLE_HOST = 2 # Variable c_int
NSTCL_PARAMETER_RANGE = -503 # Variable c_int
ATM_25_MAX_PORTS = 1 # Variable c_int
FST_CAPTURE_STATUS_ALIGNMENT = 2 # Variable c_int
NS_PMC_DISK_INFO = 26118 # Variable c_int
NS_PHY_DEFAULT_CONFIG_INFO = 39502 # Variable c_int
FC_STATS_TYPE_FSPF = 1 # Variable c_int
L3_RECEIVE_TRACKING_JITTER_COMBO = 14 # Variable c_int
DOT1X_SUPPLICANT_STATUS_SUPPICANT_STATE = 1 # Variable c_int
ATM_CONN_COPY = 725 # Variable c_int
MII_CTRL_AUTONEGOTIATE = 4096 # Variable c_int
ATM_ELAN_UNAVAILABLE = 8 # Variable c_int
NS_EN_RUNTIME_LATENCY_BUCKETS = 128 # Variable c_int
ATM_DCC_AFI = 57 # Variable c_int
ATM_TRIGGER_DIR_RX = 0 # Variable c_int
MAX_ACTIVE_SLOTS = 128 # Variable c_int
MAX_REPORT_ERRORS = 100 # Variable c_int
FR_TRIG_COMP1_AND_COMP2 = 3 # Variable c_int
INVALID_SOURCE_LINK_LAYER_OPTION = 4 # Variable c_int
TCP_FLAG_SYN = 2 # Variable c_int
ATM_UNI_VERSION_40 = 40 # Variable c_int
XENPAK_NVR_VENDOR_DAY_CODE = 107 # Variable c_int
XENPAK_NVR_VENDOR_FIELD_ADDRESS = 7 # Variable c_int
CAPTURE_EVENTS_OAM_FRAME_ONLY = 16384 # Variable c_int
NS_MULTI_LINK_FAULT_SIGNALING_COUNTERS = 4096 # Variable c_int
HIST_OFF = 0 # Variable c_int
MFPORT_B = 1 # Variable c_int
MPLS_RSVP_UDP_ENABLE = 1 # Variable c_int
GIG_STATUS_CAPTURED_FRAMES = 2048 # Variable c_long
TCP_REARP_ALL = 28691 # Variable c_int
ATM1_GAP_FPGA_VERSION = 4 # Variable c_int
MAX_ATM_PORT_BURST_SIZE = 4294967295L # Variable c_uint
ATM_155_MAX_PORTS = 1 # Variable c_int
WN_TRIGGER_DEL = 6102 # Variable c_int
L3_RECEIVE_TRACKING_START = 4 # Variable c_int
VG_CFG_PRIORITY_PROMO = 1 # Variable c_int
NS_EN_RUNTIME_TOTAL_FRAMES_INDEX = 3 # Variable c_int
XFP_TRANSCEIVER_OC_48_LR = 2 # Variable c_int
PPP_CONFIGURE_ECHOFREQ = 1 # Variable c_int
ATM_25_LINE_CELL_RATE = 59259 # Variable c_long
FR_STREAMID_NOT_DEFINED = 65535 # Variable c_int
CAPTURE_MODE_FILTER_ON_EVENTS = 0 # Variable c_int
STR_RATE_CLASS_ABR = 3 # Variable c_int
CAUSE_NO_ROUTE_TO_TRANSIT_NET = 2 # Variable c_int
NS_NTP_CLIENT_ENABLE = 1 # Variable c_int
DEVICE_NOT_FOUND_ERROR = -20 # Variable c_int
SLOT_AVAILABLE = 2 # Variable c_int
L3_STREAM_TRANSMIT_STREAM_MODE = 0 # Variable c_int
FR_NIC_EIA_RD_CTS = 131072 # Variable c_long
NS_CT_CONFIG_INFO = 39478 # Variable c_int
NS_PHY_DEFAULT_FULL_DUPLEX = 32 # Variable c_int
ATM_SEVERE_ERROR_CB_RATIO = 1024 # Variable c_long
ATM_DS1_CELL_FRAMING = 9 # Variable c_int
FRAME_PROTOCOL_TCP = 3 # Variable c_int
POS_TRIGGER_OFF = 4 # Variable c_int
AT_SONET_SECTION_BIP_ALARM = 512 # Variable c_int
WN_PVC_FILL_CFG = 6083 # Variable c_int
ATM_ELAN_INFO = 20 # Variable c_int
FR_HIST_L3_LONGSTREAMLATENCY = 7 # Variable c_int
FLOWCONTROL_DISABLED = 0 # Variable c_int
CAUSE_LOC_PRIV_LOCAL = 1 # Variable c_int
ATM_FEATURES_STREAM_COPY_PASTE = 16 # Variable c_int
CT_FILTER_OPERATOR_MATCH_ALL = 0 # Variable c_int
ATM_RATE_CLASS_CBR = 0 # Variable c_int
GPS_STATUS_NOT_READY = 2 # Variable c_int
L3_RNDIS_ON = 2 # Variable c_int
WN_TRIGGER_CFG = 6101 # Variable c_int
NS_WIS_SECTION_OOF_ALARM = 2 # Variable c_int
WN_E1_75_OHM_HIRL = 2 # Variable c_int
ETRUN_STOP = 0 # Variable c_int
NS_COMMIT_CONFIG = 39399 # Variable c_int
NS_IPV6_IPV4_ADDRESS_MAP_INFO = 39417 # Variable c_int
TCP_GET_TEST_STATUS = 28775 # Variable c_int
FR_LMP_ANNEX_A_PARM = 3 # Variable c_int
START_ADDRESS_AUTOCONFIGURATION = 4 # Variable c_int
WN_CHANNEL_PHYS_CFG = 6040 # Variable c_int
CM_WN_3441A = 44 # Variable c_int
DOT1X_SUPPLICANT_STATUS_SETUP_TIME = 3 # Variable c_int
TCP_HTTP_START_VERIFICATION = 28768 # Variable c_int
ENCAP_ATM_SVC_CLASSICAL_IP = 5 # Variable c_int
SSCOP_STATE_DATA_XFER_RDY = 10 # Variable c_int
PPP_SESSION_CLOSE_USER = 14 # Variable c_int
XENPAK_10GFC = 2 # Variable c_int
NS_HALF_DUPLEX_COUNTER_INFO = 39368 # Variable c_int
ATM_DS1_E1_LINE_PARAM = 717 # Variable c_int
ATM_LOOPBACK_LOCAL_PHY = 1 # Variable c_int
GIG_SINGLE_BURST_MODE = 1 # Variable c_int
DOT1X_SUPPLICANT_SESSION_IDLE = 1 # Variable c_int
ET_CMDLOG_SHOW_IOTYPE = 2 # Variable c_long
NS_MLD_GROUP_COUNT_INFO = 39480 # Variable c_int
NS_CT_CONFIG_STORAGE_FILE = 39338 # Variable c_int
LCP_AUTH = 2 # Variable c_int
NS_TX_CONFIG = 21 # Variable c_int
NS_MULTI_RX_VLAN = 32 # Variable c_int
ATM_CALL_PARAM_CELL_HEADER = 6 # Variable c_int
LOGFILE_SIZE_4096 = 4096 # Variable c_int
XFP_AUX_MONITORING_TEC_CURRENT = 3 # Variable c_int
ATM_CALL_ADDR_LIST = 733 # Variable c_int
L3_CONTINUOUS_MODE = 0 # Variable c_int
NS_IPV6_STATUS_INFO = 39409 # Variable c_int
NS_NTP_CLIENT_DISABLE = 0 # Variable c_int
SSCOP_STATE_CC_RESYNC_PEND = 11 # Variable c_int
RESERVE_ALL = 1 # Variable c_int
ETBNC_20MHZ = 24 # Variable c_int
L3_CTRL_IPV6_ND_RESPONSES = 1 # Variable c_int
PPP_CONFIG_QUERY = 21013 # Variable c_int
ETRUN_STEP = 1 # Variable c_int
WN_DS1_E1_YELLOW_ALARM = 8 # Variable c_int
SIG_EVENT_OUTGOING_RELEASE = 7 # Variable c_int
ENABLE_NON_BLOCKING_MODE = 1 # Variable c_int
NS_TRIGGER1_AND_TRIGGER2 = 4 # Variable c_int
IP_INC_DST_IP_AND_DST_MAC = 23 # Variable c_int
PORT_INVALID_STATE_ERROR = 128 # Variable c_int
PORT_IP_ADDRESS_NOT_REGISTERED = 22 # Variable c_int
ATM_CONN_PARAMS_RESET = 36 # Variable c_int
SERVICE_PARM_RECP_CTRL = 3 # Variable c_int
XENPAK_TX_ALARM_TRASMITTER_FAULT_ENABLE = 6 # Variable c_int
ATM_E1_CELL_LINE_CELL_RATE = 4528 # Variable c_int
TCP_CONN_GAP_CFG = 28737 # Variable c_int
NS_INTERNAL_CLOCK = 0 # Variable c_int
WN_FEATURES_PER_PORT_BURST = 2 # Variable c_int
SYNC_NONE = 0 # Variable c_int
ETH_LATENCY_INFO = 20500 # Variable c_int
CAUSE_AAL_NOT_SUPPORTED_3_0 = 93 # Variable c_int
PORT_NOT_LINKED = -2 # Variable c_int
PPP_STATUS_PPPOE_SOURCE_MAC = 16 # Variable c_int
C_LMI_PARM = 1 # Variable c_int
LOGFILE_SIZE_20480 = 20480 # Variable c_int
CT_MODE_START_ON_REQUEST = 32 # Variable c_int
L3_RECEIVE_TRACKING_LATENCYPERSTREAM = 3 # Variable c_int
PPP_LCP_IPCP_CLOSING = 4 # Variable c_int
NS_IPV6_STATELESS_ADDRESS_COUNT_INFO = 39414 # Variable c_int
ETH_PHY_LINK_PARTNER_RX_NEW_PAGE = 2097152 # Variable c_int
NS_TRIGGER_OUT_TX = 0 # Variable c_int
HTLED_MGMTLOFYELLOW = 12 # Variable c_long
FR_LINE_SPEED_19200L = 19200 # Variable c_long
LCP_CLOSE_LINK_DOWN = 15 # Variable c_int
TCP_FLAG_RST = 4 # Variable c_int
ATM_ELAN_MAX_ARP_RESPONSE_TIME = 30 # Variable c_int
HUB_ACT_INDEPENDENTLY = 2 # Variable c_int
FR_CARD_DCE = 1 # Variable c_int
XENPAK_RX_ALARM_PMA_PMD_RECEIVER_LOCAL_FAULT_ENABLE = 4 # Variable c_int
AT_SONET_SECTION_LOF_ALARM = 256 # Variable c_int
GIG_FILL_RANDOM = 1 # Variable c_int
XENPAK_PHY_MODE_POS = 0 # Variable c_int
ATM_STR_PARAM_SIG_TRAFFIC_TYPE = 23 # Variable c_int
XENPAK_10GBASE_SW = 16 # Variable c_int
ATM_PER_STREAM_BURST = 716 # Variable c_int
PET_XDATA = 512 # Variable c_int
PAT_INCB = 9 # Variable c_int
GIG_STRUC_BG1 = 36879 # Variable c_int
FR_ETSTAT_TRANSMITTING = 2048 # Variable c_int
TCP_GET_CONNECTIONS_INFO = 28689 # Variable c_int
RUN_NON_BLOCKING_MASK = 255 # Variable c_int
HBA_EMULATION_MODE = 2 # Variable c_int
L3_READ_DATA_CHECK = 24835 # Variable c_int
WN_CHANNEL_CTRL = 6030 # Variable c_int
FR_MAX_PROTOCOL_STREAMS = 256 # Variable c_int
L3_IGMP_INIT = 28709 # Variable c_int
BUFFER_ONESHOT = 1 # Variable c_int
NS_MLD_ALL_GROUP_INFO = 39474 # Variable c_int
AT_VC_INTERLEAVE_ALL = 8191 # Variable c_int
WN_DS3_LINE_CFG_INFO = 6220 # Variable c_int
ATM_B_BC_UNI40_ABR = 12 # Variable c_int
PPP_IPX_NET = 16 # Variable c_int
L3_DHCP_ACTION_DECLINE = 4 # Variable c_int
AT_CELL_SCRAMBLING_HEADER = 1 # Variable c_int
PPP_NCPS_STOPPED = 3 # Variable c_int
FC_STATS_TYPE_PORT_COUNTS = 0 # Variable c_int
AT_CELL_SCRAMBLING_OFF = 0 # Variable c_int
FC_LOG_LEVEL_ERROR = 3 # Variable c_int
FR_LINE_SPEED_48400L = 48400 # Variable c_long
WN_CAPTURE_ADD_LINE = 6300 # Variable c_int
PPP_STATS_RESET = 21015 # Variable c_int
NS_WIS_LOCD_ALARM = 512 # Variable c_int
ATM_CELLSLOST = 8 # Variable c_long
TR_MASK = 2097151 # Variable c_long
L3_RECEIVE_TRACKING_SUMMARY = 12 # Variable c_int
NS_MULTI_RX_DATA_INTEGRITY_ERROR = 20 # Variable c_int
ETH_PHY_AUTONEGOTIATE_ACK_DETECT = 536870912 # Variable c_int
WN_TRIG_DIR_RX = 0 # Variable c_int
L3_IP_CHECKSUM_ERRORS = 16384 # Variable c_long
ATM_ELAN_INACTIVE = 0 # Variable c_int
NS_WIS_CONFIG_INFO = 39507 # Variable c_int
MAX_AGENT = 20 # Variable c_int
SSCOP_STATE_OUT_DISCONN_PEND = 4 # Variable c_int
L3MS_FIELD_DIPD = 14 # Variable c_int
NS_IPV6_EXT_DESTINATION_HEADER = 13 # Variable c_int
NS_HIST_TEST_SEQUENCE_PER_STREAM = 18 # Variable c_int
NS_PORT_TRANSMIT_INFO = 53249 # Variable c_int
DOT1X_SUPPLICANT_KEY_PASSWORD = 16 # Variable c_int
ITR_RXABORTFRAMES = 33 # Variable c_int
PPP_OE_SVC_ERR = 11 # Variable c_int
NS_IPV4_COUNTERS = 39463 # Variable c_int
CAUSE_BC_NOT_AVAILABLE = 58 # Variable c_int
L3MS_FIELD_DMAC_WITH_SKIP = 72 # Variable c_int
FR_HIST_L3_LATENCYBYSTREAM = 3 # Variable c_int
AN_INVALID_MII_ADDRESS = -1103 # Variable c_int
AT_ENCAP_TYPE_LLC_ROUTED = 8 # Variable c_int
ATM_DS3_E3_LINE_PARAM = 56 # Variable c_int
FR_STREAM_CNT_MAX = 256 # Variable c_int
XENPAK_NVR_EXT_VENDOR_FIELD_ADDRESS = 8 # Variable c_int
LCP_CONFIG_FAILURE = 4 # Variable c_int
FRAME_AC_PAD = 9 # Variable c_int
FC_FABRIC_LINK_CONFIG = 13652 # Variable c_int
ET_CMDLOG_NOWRITE = 32 # Variable c_long
L3MS_FIELD_DMAC_BYTE01_WITH_SKIP = 73 # Variable c_int
ETH_VLAN_CFI_RIF_PRESENT = 1 # Variable c_int
FRAME_TIME_TO_LIVE = 61 # Variable c_int
L3_DHCP_STATE_RENEWING = 7 # Variable c_int
L3_RECEIVE_GETCAPTURECOUNT = 7 # Variable c_int
FR_ETSTAT_CARDCONFIG = 16384 # Variable c_int
TRIGLED_MISSING = 0 # Variable c_int
DOT1X_SUPPLICANT_AUTHENTICATING = 5 # Variable c_int
PPP_STOP = 6 # Variable c_int
CM_SE_6205 = 1 # Variable c_int
ATM_PVCAD_SEND_GETNEXT = 71 # Variable c_int
FR_LINE_SPEED_384000L = 384000 # Variable c_long
L3MS_FIELD_IP_BITS_OFFSET = 35 # Variable c_int
CM_AT_9155 = 12 # Variable c_int
MAX_REPORT_ERROR_STRING = 256 # Variable c_int
FST_PROTOCOL_GENERATE_ARP = 1 # Variable c_int
NS_IGMPV2_ALL_INFO = 39423 # Variable c_int
ETH_VLAN_PRI_4 = 4 # Variable c_int
L3_ARPS_NOT_RESOLVED = 1048576 # Variable c_int
AT_VC_RX_CT_BUFFER_SIZE = 1500 # Variable c_int
ARP_VIRTUAL_MODE = 1 # Variable c_int
FR_LINE_SPEED_1856000L = 1856000 # Variable c_long
POS_TRIGGER1_AND_TRIGGER2 = 2 # Variable c_int
ATM_LED_STATUS_RX = 32 # Variable c_int
ATM_STR_PARAM_SIG_FW_SCR_01 = 8 # Variable c_int
ATM_DS1_PLCP_FRAMING = 10 # Variable c_int
ISMB_STD_ERR_UNDERSIZE = 8 # Variable c_int
ATM_ELAN_MTU_1516 = 1 # Variable c_int
L3MS_FIELD_SIPA = 15 # Variable c_int
WN_RFC1490_RTD_NLPID = 2 # Variable c_int
FRAME_OPERATION = 86 # Variable c_int
FRAME_ICMP_HEADER_CRC = 94 # Variable c_int
WN_E1_CRC4_DISABLE = 0 # Variable c_int
CLEAR_STACK_ERRORS = 1073741824 # Variable c_int
FR_GROUP_START_CMD = 101 # Variable c_int
SSCOP_DEFAULT_TMR_POLL_3_0 = 10 # Variable c_int
ATTRIB_DUPLEX_HALF = 4 # Variable c_int
STREAM_PROTOCOL_ICMP_IPV6 = 30 # Variable c_int
ATM_LED_STATUS_LOS = 16 # Variable c_int
COS2_UNSUPPORTED = 9 # Variable c_int
IATM_CELLS = 32 # Variable c_int
L3_READ_STREAM_BG = 1877 # Variable c_int
ATM_CALL_SETUPEX = 201 # Variable c_int
PROTOCOL_ERROR = 5 # Variable c_int
CT_TRAFFIC_DIRECTION_TX = 1 # Variable c_int
SOCKET_RECONNECT_SUCCESS = -1005 # Variable c_int
GIG_STRUC_ALT_TX_READBACK = 36890 # Variable c_int
DOT1X_EAP_TYPE_MSCHAPV2 = 8 # Variable c_int
PPP_ECHO_START = 3 # Variable c_int
PPP_OE_RETRYTIMER = 25 # Variable c_int
ITR_CLAIMEVENTS = 39 # Variable c_int
L3MS_FIELD_CUSTOM_STREAM_ID_ENABLE = 58 # Variable c_int
ATM_STR_PARAM_SIG_BC_CLASS = 21 # Variable c_int
SIG_EVENT_SAAL_ESTABLISH = 1 # Variable c_int
NS_SONET_SECTION_BIP_ALARM = 512 # Variable c_int
PPPO_MRU = 1 # Variable c_int
ATM_ELAN_TYPE_802_3 = 0 # Variable c_int
CT_DEFAULT_SLICE_COUNT = 1 # Variable c_int
NS_CAPTURE_STATUS_SIGNATURE = 1024 # Variable c_int
XFP_CDR_SUPPORT_FOR_9_95_GBS = 128 # Variable c_int
CM_ML_5710A = 24 # Variable c_int
FC_LOG_LEVEL_MESSAGE = 6 # Variable c_int
HT_LATENCY_TX = 2 # Variable c_int
HTSTEP = 1 # Variable c_int
ATTRIB_CAN_COLLIDE = 13 # Variable c_int
ETH_PHY_MDI_CROSSOVER = 8192 # Variable c_int
NS_PHY_CONFIG_INFO = 39457 # Variable c_int
XFP_CONNECTOR_HSSDC_II = 32 # Variable c_int
L3_STREAM_TRANSMIT_GROUP_MODE = 1 # Variable c_int
NS_HIST_TEST_LATENCY_DIST_PER_STREAM = 19 # Variable c_int
MII_STATUS_100BASE_X_HALF = 8192 # Variable c_int
PROTOCOL_TYPE_ARP = 5 # Variable c_int
CHANNEL_DOWN = 1 # Variable c_int
ATM_ELAN_MTU_9234 = 3 # Variable c_int
NS_OAM_CONFIG = 39390 # Variable c_int
GIG_FILL_SELECTED = 0 # Variable c_int
FR_HIST_L3_LATENCYBYTIME = 2 # Variable c_int
XENPAK_10GBASE_SR = 1 # Variable c_int
PPP_STATUS_MAX_PEER_IPV6_ADDR = 27 # Variable c_int
L3_CTRL_PING_RESPONSES = 2 # Variable c_int
FR_PVC_STREAM_MAP_CFG = 13 # Variable c_int
ENCAP_ATM_SVC_LANE802_3 = 3 # Variable c_int
ITR_MAC_FRAMECOPIED = 48 # Variable c_int
XFP_CDR_SUPPORT_FOR_10_3_GBS = 64 # Variable c_int
NS_MULTI_IPV4_ARP_REQUESTS_TX = 37 # Variable c_int
FR_SET_PROTO_STACK = 28 # Variable c_int
NS_MLD_RESET = 39436 # Variable c_int
GID_PN_FAILED_DISCOVERY = 30 # Variable c_int
ATM_STREAM_TRIGGER_INFO = 126 # Variable c_int
ATTRIB_SPEED_1_544MB = 27 # Variable c_int
XENPAK_ALL_FIELD = 1 # Variable c_int
NS_MAX_STREAM_CONFIG_OBJECTS = 30000 # Variable c_int
ETH_PROTOCOL_RESPOND_PING = 2 # Variable c_int
L3MS_FIELD_SMAC_BYTE01 = 38 # Variable c_int
ATM_SIG_EMUL_INFO = 30 # Variable c_int
PPP_NCPS_STOPPING = 5 # Variable c_int
ETBURST_ON = 1 # Variable c_int
NS_HIST_LATENCY_DIST_PER_STREAM_INFO = 12329 # Variable c_int
TRANSMIT_ENGINE_MODE = 0 # Variable c_int
NS_IPV6_EXT_HOP_BY_HOP_HEADER = 11 # Variable c_int
MAX_10GIG_DATA_BUFFER = 1920 # Variable c_int
XENPAK_ALARM_CONFIG_INFO = 36933 # Variable c_int
FR_RFC1490_MAX_TYPE = 4 # Variable c_int
FR_TX_CONTINUOUS = 0 # Variable c_int
WN_T1E1_LINE_CFG_INFO = 6250 # Variable c_int
SCHEDULE_MODE_FRAME_RATE = 1 # Variable c_int
QUEUE_ENABLE = 1 # Variable c_int
NS_WIS_PATH_YELLOW_ALARM = 256 # Variable c_int
HTRUN = 2 # Variable c_int
FC_CARD_BASE = 13568 # Variable c_int
XENPAK_NVR_VENDOR_YEAR_CODE = 101 # Variable c_int
UL_UNMODIFIED = 3 # Variable c_int
MPLS_RSVP_REFRESH_ACK_DESIRED = 16 # Variable c_int
TCP_SET_TEARDOWN_TIME_MODE = 28745 # Variable c_int
DOT1X_SUPPLICANT_STATUS_FAILURE_CODE = 2 # Variable c_int
NS_VLAN_HEADER = 2 # Variable c_int
L2_READ_COUNTERS = 24848 # Variable c_int
CT_FILTER_OPERATOR_PAT2_ONLY = 2 # Variable c_int
GRE_PAYLOAD_IPV6 = 2269 # Variable c_int
NS_SONET_ALARM_COUNTER_INFO = 24865 # Variable c_int
GRE_PAYLOAD_IPV4 = 2048 # Variable c_int
FR_E1_CRC4_ENABLE = 1 # Variable c_int
MII_AN_100BASE_TX_FULL = 256 # Variable c_int
FRAME_LEC_ID = 8 # Variable c_int
PORT_B = 0 # Variable c_int
IP_INC_DST_IP = 18 # Variable c_int
FRAME_PAD = 12 # Variable c_int
CT_ATM = 7 # Variable c_int
CT_MAX_FILENAME_LENGTH = 64 # Variable c_int
ATM_CALL_TMR_TICKS_PER_SEC = 1000 # Variable c_int
RTP_PAYLOAD_G711A = 8 # Variable c_int
ATTRIB_CONNECT_TP = 6 # Variable c_int
PORT_A = 1 # Variable c_int
ETH_PROTOCOL_PARAMETER_INFO = 20506 # Variable c_int
STR_ENCAP_TYPE_RFC1577 = 3 # Variable c_int
ATM_STR_PARAM_SIG_BW_TD_TYPE = 18 # Variable c_int
STREAM_PROTOCOL_IP_PPPOA = 23 # Variable c_int
FC_NAME_SERVER_EVENT_CONFIG = 13670 # Variable c_int
MII_STATUS10_1000BASE_FULL = 256 # Variable c_int
NS_ICMP_HEADER = 9 # Variable c_int
UNI_DCE = 1 # Variable c_int
NS_MULTI_ALIGNMENT_ERROR = 23 # Variable c_int
LISTENACK = 1 # Variable c_int
NS_DOT1X_SUPPLICANT_FILL = 39494 # Variable c_int
NS_DOT1X_SUPPLICANT_RESET = 39489 # Variable c_int
ATM_STR_ACTION_RESET = 0 # Variable c_int
PORT_DEVICE_LOGIN_COMPLETE = 16 # Variable c_int
FR_PVC_STATUS_INFO = 38 # Variable c_int
NS_DEFINE_IPV6_EXT_FRAGMENT = 39443 # Variable c_int
FC_EPORT_SETTING_CONFIG_INFO = 13673 # Variable c_int
ET_CMDLOG_FIELDNAMES = 1024 # Variable c_long
ETBAUD_9600 = 2 # Variable c_int
NS_PORT_CONFIG_INFO = 39476 # Variable c_int
PPP_STATUS_IPXCP_STATE = 3 # Variable c_int
PMC_DISK_ERROR = 2 # Variable c_int
TRFC_PCF_AMP = 5 # Variable c_int
MEDIA_AUTO_SENSE_MODE = 1 # Variable c_int
NS_MULTI_TX_BYTES = 4 # Variable c_int
STREAM_PROTOCOL_ARP = 5 # Variable c_int
WN_CHAN_PHYS_MOD_CFG = 6043 # Variable c_int
FR_NIC_EIA_RD_DCD = 262144 # Variable c_long
GPS_SYNC_RETRY_ERROR = -45 # Variable c_int
WN_CAPTURE_DEL_LINE = 6301 # Variable c_int
NS_EN_RUNTIME_OUT_SEQUENCE = 32 # Variable c_int
DOT1X_SUPPLICANT_FAILURE_UNKNOWN = 1 # Variable c_int
ATM_SIG_EMUL_RESET = 713 # Variable c_int
ATM_STR_PARAM_SIG_FW_QOS = 19 # Variable c_int
XFP_TRANSCEIVER_V_64_2a = 128 # Variable c_int
WN_FEATURES_STATE_TRACKING = 32 # Variable c_int
HIST_LAT_SORT = 4 # Variable c_int
CT_FILTER_PROTOCOL_ID_UDP = 16 # Variable c_int
CT_DEFAULT_STOP_ON_FULL = 0 # Variable c_int
ATM_B_BC_UNI40_NONE = 0 # Variable c_int
CALL_STATE_INCOMING_CALL_PRES = 6 # Variable c_int
LOCAL_MODE = 0 # Variable c_int
NS_SONET_PATH_RDI_ALARM = 2 # Variable c_int
IL3_ARP_SEND = 40 # Variable c_int
WN_DS3_FRMR_STATUS_LOS = 1 # Variable c_int
NS_TCP_HEADER = 6 # Variable c_int
ATM_CALL_LENGTH_FOREVER_FREE = 4 # Variable c_int
MAX_ENCAPHEADER_LEN = 16 # Variable c_int
MII_CTRL_POWERDOWN = 2048 # Variable c_int
WN_CHAN_CFG_INFO = 6230 # Variable c_int
GIG_VFD_RANDOM = 3 # Variable c_int
WN_CHANNEL_DEL_ALL = 6032 # Variable c_int
NS_MULTI_IPV6_PING_COUNTERS = 512 # Variable c_int
CAUSE_VPCI_VCI_UNAVAILABLE = 35 # Variable c_int
CAPTURE_EVENTS_ABORT = 144 # Variable c_int
PPP_OE_USE_DOUBLE_TIMEOUT = 4096 # Variable c_int
CM_XFP_3730A = 75 # Variable c_int
INVALID_LS_CMD = 1 # Variable c_int
COLLISION_OFF = 0 # Variable c_int
NS_CAPTURE_DATA_INFO = 8197 # Variable c_int
NS_PHY_DEFAULT_SPEED_10MHZ = 10 # Variable c_int
TCP_FLAG_ACK = 16 # Variable c_int
PET_MEM = 4096 # Variable c_int
ATM_CARD_INFO = 706 # Variable c_int
L3_MASK = 20479 # Variable c_long
VLAN_PRI_6 = 6 # Variable c_int
VLAN_PRI_4 = 4 # Variable c_int
VLAN_PRI_5 = 5 # Variable c_int
VLAN_PRI_2 = 2 # Variable c_int
VLAN_PRI_3 = 3 # Variable c_int
VLAN_PRI_1 = 1 # Variable c_int
NS_MULTI_TX_MPLS_FRAMES = 24 # Variable c_int
UNI_VERSION_4_0_NET = 2147483712L # Variable c_ulong
PROTOCOL_TYPE_IPX = 3 # Variable c_int
MPLS_RSVP_SERVICE_GUARANTEED_OBJECT = 3 # Variable c_int
FC_SWITCH_TOPOLOGY_CUSTOM = 0 # Variable c_int
XFP_TRANSCEIVER_I_64_5 = 4 # Variable c_int
MAX_FFOM_LIMIT = 3 # Variable c_int
NS_MULTI_VLAN_PRI_7_RX = 60 # Variable c_int
AT_PORT_COUNTER_INFO = 39179 # Variable c_int
XFP_TRANSCEIVER_I_64_3 = 8 # Variable c_int
ATM_DS3_CELL_FRAMING = 5 # Variable c_int
FR_NIC_EIA_RD_DTR = 1048576 # Variable c_long
GIG_STRUC_CAPTURE_SETUP = 36869 # Variable c_int
CT_MODE_STOP_ON_REQUEST = 2048 # Variable c_int
HTLED_XENPAK_MODULE_CHANGE = 524288 # Variable c_long
NS_SONET_PATH_BIP_ALARM = 8 # Variable c_int
CM_FBC_3601A = 54 # Variable c_int
AT_VC_COPY = 39175 # Variable c_int
WN_FEATURES_PER_CHAN_BURST = 2 # Variable c_int
COMMAND_MODE_LOG_ONLY = 1 # Variable c_int
WN_PERIODIC_CFG_INFO = 6202 # Variable c_int
SERIAL_PORT_TIMEOUT = -98 # Variable c_int
FRAME_TCP_HEADER_CRC = 65 # Variable c_int
NS_IPV6_EXTENSION_HEADER = 11 # Variable c_int
TRFC_DEFAULT = 64 # Variable c_int
HVFD_INCR = 2 # Variable c_int
NSU64IsNEq = 2 # Variable c_int
FR_HIST_V2_LATENCY_DE_INFO = 12305 # Variable c_int
ETH_PHY_TX_ERROR = 4 # Variable c_int
GIG_AFN_PAUSE2 = 256 # Variable c_int
WN_CHANNEL_ATTRIB_CFG = 6050 # Variable c_int
GIG_AFN_PAUSE1 = 128 # Variable c_int
MII_REGISTER_CONTROL = 0 # Variable c_int
LOGFILE_SIZE_2048 = 2048 # Variable c_int
HIGH_DENSITY_CONTROLLER_ERROR = -32 # Variable c_int
ATTRIB_SPEED_2488MB = 33 # Variable c_int
NSTCL_PARAMETER_TYPE = -501 # Variable c_int
NS_PATH_SIGNAL_LABEL_ATM = 19 # Variable c_int
FR_NIC_EIA_RD_LLB = 8388608 # Variable c_long
FR_STATUS_EIA_DTR = 1048576 # Variable c_long
NS_WIS_INJECT_SECTION_LOS_ALARM = 128 # Variable c_int
NS_MPLS_LIST_SIZE = 32 # Variable c_int
MLD_FORCE_LEAVE_RECORDS = 128 # Variable c_int
ETDP_5555 = 4 # Variable c_int
ATM_STR_PARAM_SIG_FW_MBS_01 = 10 # Variable c_int
MAX_URL_LEN = 8 # Variable c_int
STREAM_PROTOCOL_IPV6_VLAN = 19 # Variable c_int
WN_CHAN_ATTRIB_CFG_INFO = 6240 # Variable c_int
CORP_B = 4 # Variable c_int
NO_FAILURE = 8 # Variable c_int
WN_PVC_DEL = 6085 # Variable c_int
PET_SERR = 1 # Variable c_int
MFPORT_A = 0 # Variable c_int
WN_CAPTURE_CTRL = 6128 # Variable c_int
ATM_CONN_TYPE_PVC = 0 # Variable c_int
GIG_TRANSMIT = 2 # Variable c_int
NS_MULTI_VLAN_PRI_2_RX = 55 # Variable c_int
ATM_SAR_MEMORY_FAILURE = 32 # Variable c_int
LCP_CLOSE_AUTH_FAILURE_LOCAL_REJ = 2 # Variable c_int
XFP_CONNECTOR_MT_RJ = 8 # Variable c_int
DIFFSERV_AGGREGATE_IPV4_IPV6_COUNTERS = 3 # Variable c_int
NS_DEFINE_IPV6_OVER_IPV4_TUNNELING = 39453 # Variable c_int
L3_RECEIVE_CAPTURE_ALL = 1 # Variable c_int
CORP_A = 3 # Variable c_int
WN_E1_75_OHM_NORMAL = 1 # Variable c_int
MII_STATUS_100BASE_T4 = 32768 # Variable c_int
L3MS_FIELD_FC_SOF = 69 # Variable c_int
GET_IPV6_FROM_IPV4 = 2 # Variable c_int
PORT_PUBLIC_DISCOVERY = 32 # Variable c_int
ATM_MULTI_BURST_ENABLE = 2 # Variable c_int
SYMBOL_OFF = 0 # Variable c_int
ATM_DS3_E3_PLCP_LOF_ALARM = 256 # Variable c_int
AN_DISABLE_AUTONEGOTIATION = 0 # Variable c_int
AT_PORT_CLIP_COUNTER_INFO = 39182 # Variable c_int
FR_TRIG_DIR_TX = 1 # Variable c_int
L3_DHCP_ACTION_DISCOVER = 0 # Variable c_int
L3MS_FIELD_DIPC = 13 # Variable c_int
PPP_OE_CLIENT = 1 # Variable c_int
L3MS_FIELD_DIPA = 11 # Variable c_int
GIG_PREAMB_LEN_28_BYTES = 6 # Variable c_int
ATM1_AM29240_VERSION = 6 # Variable c_int
L4MS_FIELD_TCP_FLAGS = 26 # Variable c_int
FR_VFD_STATIC = 4 # Variable c_int
ATM_OAM_F5 = 128 # Variable c_long
ATM_OAM_F4 = 64 # Variable c_long
NS_DOT1X_SUPPLICANT_MODIFY = 39493 # Variable c_int
SONET_LINE_FERF_ALARM = 16 # Variable c_int
TCP_CONN_REQUEST_TRIGGER = 1005 # Variable c_int
CA_HASVFDREPEATCOUNT = 268435456 # Variable c_long
ETBNC_RXEB = 2 # Variable c_int
PPP_OPEN_LCP = 1 # Variable c_int
AN_LINK_PARTNER_INCAPABLE = -1102 # Variable c_int
L3_DHCP_STATE_REBOOTING = 4 # Variable c_int
CA_SIGNALRATE_45MB = 16777216 # Variable c_long
ETRUN = 2 # Variable c_int
ATM_LOGFILE_CONTROL = 111 # Variable c_int
WN_STREAM_CFG = 6071 # Variable c_int
WN_E1_CRC4_ENABLE = 1 # Variable c_int
XENPAK_V_64_3 = 4 # Variable c_int
FR_HIST_L3_RX_DELTA = 8 # Variable c_int
NS_PROTOCOL_HEADER_INFO = 39519 # Variable c_int
DOT1X_EAP_TYPE_SIM = 32 # Variable c_int
PPP_PEER_IPADDR = 14 # Variable c_int
L3_PINGREQ_SENT = 2048 # Variable c_long
NS_IPX_HEADER = 17 # Variable c_int
PPP_RESTART_TIMER = 20 # Variable c_int
ATM_STR_PARAM_DEST_IP_ADDR = 28 # Variable c_int
DOT1X_TTLS_PHASE2_PAP = 1 # Variable c_int
NCP_UP = 0 # Variable c_int
PPP_DEL_SESSION = 21010 # Variable c_int
PORT_LOSS_OF_SYNC = 1 # Variable c_int
NS_MULTI_NEIGHBOR_SOLICITATION_RX = 44 # Variable c_int
HTLED_TXGREEN = 2 # Variable c_long
NS_MULTI_IPV6_PING_REQUESTS_RX = 50 # Variable c_int
XENPAK_NVR_VENDOR_SERIAL_NUMBER = 85 # Variable c_int
ETDP_00000000FFFFFFFF = 11 # Variable c_int
DATA_NOT_AVAILABLE = -34 # Variable c_int
TCP_GET_ALL_CONNECTIONS_STATUS = 28713 # Variable c_int
RUN_FIXED_TIME_FLAG = 512 # Variable c_int
FC_DEVICE_LOGIN_STATE = 2 # Variable c_int
SERVER_CLOSE_RST = 1 # Variable c_int
ATM_COMP1_OR_COMP2 = 3 # Variable c_int
HVFD_DECR = 3 # Variable c_int
WN_HIST_CTRL_ALL = 6124 # Variable c_int
NS_PER_STREAM_COUNTER_INFO = 39346 # Variable c_int
PPP_STATUS_PEER_IPADDR = 7 # Variable c_int
ATM_B_BC_END_TO_END_TIMING = 1 # Variable c_int
FR_LOOPBACK_DISABLED = 0 # Variable c_int
PORTS_PER_PASSIVE_CARD = 2 # Variable c_int
L3_READ_COUNTERS = 1555 # Variable c_int
GIG_STRUC_AUTO_FIBER_NEGOTIATE = 36872 # Variable c_int
IGMPV3_SUPPRESS_IGMPV3_RECORDS = 64 # Variable c_int
SSCOP_STATE_OUT_CONN_PEND = 2 # Variable c_int
UNSPECIFIED_ERROR = -1 # Variable c_int
XENPAK_PHY_MODE_WAN = 2 # Variable c_int
GIG_PREAMB_LEN_4_BYTES = 0 # Variable c_int
ATM_SAAL_TIMEOUT = 10 # Variable c_int
NS_PHY_CONFIG = 39456 # Variable c_int
class tagATMAddress(Structure):
    pass
tagATMAddress._fields_ = [
    ('ucPrefix', c_ubyte * 13),
    ('ucEsi', c_ubyte * 6),
    ('ucSel', c_ubyte),
]
assert sizeof(tagATMAddress) == 20, sizeof(tagATMAddress)
assert alignment(tagATMAddress) == 1, alignment(tagATMAddress)
ATMAddress = tagATMAddress
class tagATMLineParams(Structure):
    pass
tagATMLineParams._fields_ = [
    ('ucFramingMode', c_ubyte),
    ('ucTxClockSource', c_ubyte),
    ('ucCellScrambling', c_ubyte),
    ('ucHecCoset', c_ubyte),
    ('ucRxErroredCells', c_ubyte),
    ('ucLoopbackEnable', c_ubyte),
    ('ucIdleCellHeader', c_ubyte * 4),
]
assert sizeof(tagATMLineParams) == 10, sizeof(tagATMLineParams)
assert alignment(tagATMLineParams) == 1, alignment(tagATMLineParams)
ATMLineParams = tagATMLineParams
class tagATMDS3E3LineParams(Structure):
    pass
tagATMDS3E3LineParams._fields_ = [
    ('ucFramingMode', c_ubyte),
    ('ucTxClockSource', c_ubyte),
    ('ucCellScrambling', c_ubyte),
    ('ucHecCoset', c_ubyte),
    ('ucRxErroredCells', c_ubyte),
    ('ucLoopbackEnable', c_ubyte),
    ('ucLineBuildout', c_ubyte),
    ('ucIdleCellHeader', c_ubyte * 4),
]
assert sizeof(tagATMDS3E3LineParams) == 11, sizeof(tagATMDS3E3LineParams)
assert alignment(tagATMDS3E3LineParams) == 1, alignment(tagATMDS3E3LineParams)
ATMDS3E3LineParams = tagATMDS3E3LineParams
class tagATMDS1E1LineParams(Structure):
    pass
tagATMDS1E1LineParams._fields_ = [
    ('ucFramingMode', c_ubyte),
    ('ucTxClockSource', c_ubyte),
    ('ucCellScrambling', c_ubyte),
    ('ucHecCoset', c_ubyte),
    ('ucRxErroredCells', c_ubyte),
    ('ucLoopbackEnable', c_ubyte),
    ('ucLineBuildout', c_ubyte),
    ('ucLineCoding', c_ubyte),
    ('ucLineFraming', c_ubyte),
    ('ucIdleCellHeader', c_ubyte * 4),
]
assert sizeof(tagATMDS1E1LineParams) == 13, sizeof(tagATMDS1E1LineParams)
assert alignment(tagATMDS1E1LineParams) == 1, alignment(tagATMDS1E1LineParams)
ATMDS1E1LineParams = tagATMDS1E1LineParams
ATMCellTime = c_long
class tagATMStream(Structure):
    pass
tagATMStream._fields_ = [
    ('uiIndex', c_ushort),
    ('ucConnType', c_ubyte),
    ('ucEncapType', c_ubyte),
    ('ucGenRateClass', c_ubyte),
    ('ulGenPCR', c_ulong),
    ('ulGenSCR', c_ulong),
    ('ulGenMBS', c_ulong),
    ('ctGenCDVT', ATMCellTime),
    ('ucFwdTdType', c_ubyte),
    ('ulFwdPCR0', c_ulong),
    ('ulFwdPCR01', c_ulong),
    ('ulFwdSCR0', c_ulong),
    ('ulFwdSCR01', c_ulong),
    ('ulFwdMBS0', c_ulong),
    ('ulFwdMBS01', c_ulong),
    ('ucBwdTdType', c_ubyte),
    ('ulBwdPCR0', c_ulong),
    ('ulBwdPCR01', c_ulong),
    ('ulBwdSCR0', c_ulong),
    ('ulBwdSCR01', c_ulong),
    ('ulBwdMBS0', c_ulong),
    ('ulBwdMBS01', c_ulong),
    ('ucFwdQoS', c_ubyte),
    ('ucBwdQoS', c_ubyte),
    ('ucBcClass', c_ubyte),
    ('ucTimingReq', c_ubyte),
    ('ucTrafficType', c_ubyte),
    ('ucClipping', c_ubyte),
    ('ulCellHeader', c_ulong),
    ('ucDestAtmAddr', c_ubyte * 20),
    ('ucDestMacAddr', c_ubyte * 6),
    ('ucDestIpAddr', c_ubyte * 4),
    ('ucSnapHeader', c_ubyte * 5),
    ('ucElanInst', c_ubyte),
]
assert sizeof(tagATMStream) == 128, sizeof(tagATMStream)
assert alignment(tagATMStream) == 4, alignment(tagATMStream)
ATMStream = tagATMStream
class tagATMFrameDefinition(Structure):
    pass
tagATMFrameDefinition._fields_ = [
    ('uiStreamIndex', c_ushort),
    ('uiFrameLength', c_ushort),
    ('uiDataLength', c_ushort),
    ('uiFrameFillPattern', c_ushort),
    ('ulFrameFlags', c_ulong),
    ('ucFrameData', c_ubyte * 2048),
]
assert sizeof(tagATMFrameDefinition) == 2060, sizeof(tagATMFrameDefinition)
assert alignment(tagATMFrameDefinition) == 4, alignment(tagATMFrameDefinition)
ATMFrameDefinition = tagATMFrameDefinition
class tagATMConnection(Structure):
    pass
tagATMConnection._fields_ = [
    ('ulIndex', c_ulong),
    ('ucType', c_ubyte),
    ('ucRateClass', c_ubyte),
    ('ulRatePCR', c_ulong),
    ('ulRateSCR', c_ulong),
    ('ulRateMBS', c_ulong),
    ('ctCellDelayVar', ATMCellTime),
    ('ulCellHeader', c_ulong),
    ('uiCallSetupIndex', c_ushort),
    ('uiAddressIndex', c_ushort),
    ('ucCallDistType', c_ubyte),
    ('ucCallLengthType', c_ubyte),
    ('ucStopOnError', c_ubyte),
    ('ucLogEvents', c_ubyte),
    ('ucEnableCellLoadGen', c_ubyte),
    ('ulCallStartDelay', c_ulong),
    ('ulCallCountLimit', c_ulong),
    ('ulCallLength', c_ulong),
    ('ulRandomLengthDelta', c_ulong),
    ('ulInterCallGap', c_ulong),
    ('ulRandomGapDelta', c_ulong),
    ('ulBurstCount', c_ulong),
    ('ulInterBurstGap', c_ulong),
]
assert sizeof(tagATMConnection) == 72, sizeof(tagATMConnection)
assert alignment(tagATMConnection) == 4, alignment(tagATMConnection)
ATMConnection = tagATMConnection
class tagATMConnectionEx(Structure):
    pass
tagATMConnectionEx._fields_ = [
    ('ulIndex', c_ulong),
    ('ucType', c_ubyte),
    ('ucRateClass', c_ubyte),
    ('ulRatePCR', c_ulong),
    ('ulRateSCR', c_ulong),
    ('ulRateMBS', c_ulong),
    ('ctCellDelayVar', ATMCellTime),
    ('ulCellHeader', c_ulong),
    ('uiCallSetupIndex', c_ushort),
    ('uiAddressIndex', c_ushort),
    ('ucCallDistType', c_ubyte),
    ('ucCallLengthType', c_ubyte),
    ('ucStopOnError', c_ubyte),
    ('ucLogEvents', c_ubyte),
    ('ucEnableCellLoadGen', c_ubyte),
    ('ulCallStartDelay', c_ulong),
    ('ulCallCountLimit', c_ulong),
    ('ulCallLength', c_ulong),
    ('ulRandomLengthDelta', c_ulong),
    ('ulInterCallGap', c_ulong),
    ('ulRandomGapDelta', c_ulong),
    ('ulBurstCount', c_ulong),
    ('ulInterBurstGap', c_ulong),
    ('ulRateMCR', c_ulong),
]
assert sizeof(tagATMConnectionEx) == 76, sizeof(tagATMConnectionEx)
assert alignment(tagATMConnectionEx) == 4, alignment(tagATMConnectionEx)
ATMConnectionEx = tagATMConnectionEx
class tagATMConnectionCopyParams(Structure):
    pass
tagATMConnectionCopyParams._fields_ = [
    ('ulSrcIndex', c_ulong),
    ('ulDstIndex', c_ulong),
    ('ulCount', c_ulong),
]
assert sizeof(tagATMConnectionCopyParams) == 12, sizeof(tagATMConnectionCopyParams)
assert alignment(tagATMConnectionCopyParams) == 4, alignment(tagATMConnectionCopyParams)
ATMConnectionCopyParams = tagATMConnectionCopyParams
class tagATMConnectionModify(Structure):
    pass
tagATMConnectionModify._fields_ = [
    ('ulSrcIndex', c_ulong),
    ('ulCount', c_ulong),
    ('ulType', c_ulong),
    ('lDelta', c_long),
]
assert sizeof(tagATMConnectionModify) == 16, sizeof(tagATMConnectionModify)
assert alignment(tagATMConnectionModify) == 4, alignment(tagATMConnectionModify)
ATMConnectionModify = tagATMConnectionModify
class tagATMConnectionModifyArray(Structure):
    pass
tagATMConnectionModifyArray._fields_ = [
    ('ulSrcIndex', c_ulong),
    ('ulCount', c_ulong),
    ('ulID', c_ulong),
    ('ulArraySize', c_ulong),
    ('ulValues', c_ulong * 2048),
]
assert sizeof(tagATMConnectionModifyArray) == 8208, sizeof(tagATMConnectionModifyArray)
assert alignment(tagATMConnectionModifyArray) == 4, alignment(tagATMConnectionModifyArray)
ATMConnectionModifyArray = tagATMConnectionModifyArray
class tagATMCallSetupParams(Structure):
    pass
tagATMCallSetupParams._fields_ = [
    ('uiCallSetupIndex', c_ushort),
    ('ulFwdTrafficDescriptorType', c_ulong),
    ('ulFwdPCR_0', c_ulong),
    ('ulFwdPCR_01', c_ulong),
    ('ulFwdSCR_0', c_ulong),
    ('ulFwdSCR_01', c_ulong),
    ('ulFwdMBS_0', c_ulong),
    ('ulFwdMBS_01', c_ulong),
    ('ulBwdTrafficDescriptorType', c_ulong),
    ('ulBwdPCR_0', c_ulong),
    ('ulBwdPCR_01', c_ulong),
    ('ulBwdSCR_0', c_ulong),
    ('ulBwdSCR_01', c_ulong),
    ('ulBwdMBS_0', c_ulong),
    ('ulBwdMBS_01', c_ulong),
    ('ucFwdQOS', c_ubyte),
    ('ucBwdQOS', c_ubyte),
    ('ucBbcClass', c_ubyte),
    ('ucBbcTimingReq', c_ubyte),
    ('ucBbcTrafficType', c_ubyte),
    ('ucBbcSusceptibleToClipping', c_ubyte),
]
assert sizeof(tagATMCallSetupParams) == 68, sizeof(tagATMCallSetupParams)
assert alignment(tagATMCallSetupParams) == 4, alignment(tagATMCallSetupParams)
ATMCallSetupParams = tagATMCallSetupParams
class tagATMCallSetupParamsEx(Structure):
    pass
tagATMCallSetupParamsEx._fields_ = [
    ('uiCallSetupIndex', c_ushort),
    ('ulFwdTrafficDescriptorType', c_ulong),
    ('ulFwdPCR_0', c_ulong),
    ('ulFwdPCR_01', c_ulong),
    ('ulFwdSCR_0', c_ulong),
    ('ulFwdSCR_01', c_ulong),
    ('ulFwdMBS_0', c_ulong),
    ('ulFwdMBS_01', c_ulong),
    ('ulBwdTrafficDescriptorType', c_ulong),
    ('ulBwdPCR_0', c_ulong),
    ('ulBwdPCR_01', c_ulong),
    ('ulBwdSCR_0', c_ulong),
    ('ulBwdSCR_01', c_ulong),
    ('ulBwdMBS_0', c_ulong),
    ('ulBwdMBS_01', c_ulong),
    ('ucFwdQOS', c_ubyte),
    ('ucBwdQOS', c_ubyte),
    ('ucBbcClass', c_ubyte),
    ('ucBbcTimingReq', c_ubyte),
    ('ucBbcTrafficType', c_ubyte),
    ('ucBbcSusceptibleToClipping', c_ubyte),
    ('ulFwdMCR_01', c_ulong),
    ('ulBwdMCR_01', c_ulong),
    ('ucATC', c_ubyte),
    ('ucATC_present', c_ubyte),
    ('ucInc', c_ubyte),
    ('ulRM_FRTT', c_ulong),
    ('ulFwdICR_01', c_ulong),
    ('ulFwdTBE_01', c_ulong),
    ('ulFwdRIF_01', c_ulong),
    ('ulFwdRDF_01', c_ulong),
    ('ulBwdICR_01', c_ulong),
    ('ulBwdTBE_01', c_ulong),
    ('ulBwdRIF_01', c_ulong),
    ('ulBwdRDF_01', c_ulong),
    ('ucFwdNrm_present', c_ubyte),
    ('ucFwdTrm_present', c_ubyte),
    ('ucFwdCdf_present', c_ubyte),
    ('ucFwdAdtf_present', c_ubyte),
    ('usFwdNrm', c_ushort),
    ('usFwdTrm', c_ushort),
    ('usFwdCdf', c_ushort),
    ('usFwdAdtf', c_ushort),
    ('ucBwdNrm_present', c_ubyte),
    ('ucBwdTrm_present', c_ubyte),
    ('ucBwdCdf_present', c_ubyte),
    ('ucBwdAdtf_present', c_ubyte),
    ('usBwdNrm', c_ushort),
    ('usBwdTrm', c_ushort),
    ('usBwdCdf', c_ushort),
    ('usBwdAdtf', c_ushort),
    ('ucEnableABRSetupParam', c_ubyte),
    ('ucEnableABRAddlParam', c_ubyte),
]
assert sizeof(tagATMCallSetupParamsEx) == 144, sizeof(tagATMCallSetupParamsEx)
assert alignment(tagATMCallSetupParamsEx) == 4, alignment(tagATMCallSetupParamsEx)
ATMCallSetupParamsEx = tagATMCallSetupParamsEx
class tagATMCallAddrList(Structure):
    pass
tagATMCallAddrList._fields_ = [
    ('uiStartAddrIndex', c_ushort),
    ('uiCount', c_ushort),
    ('atmAddress', ATMAddress * 128),
]
assert sizeof(tagATMCallAddrList) == 2564, sizeof(tagATMCallAddrList)
assert alignment(tagATMCallAddrList) == 2, alignment(tagATMCallAddrList)
ATMCallAddrList = tagATMCallAddrList
class tagATMILMIParams(Structure):
    pass
tagATMILMIParams._fields_ = [
    ('ulColdStartTimer', c_ulong),
    ('ulRegTimeoutTimer', c_ulong),
    ('ucESI', c_ubyte * 6),
]
assert sizeof(tagATMILMIParams) == 16, sizeof(tagATMILMIParams)
assert alignment(tagATMILMIParams) == 4, alignment(tagATMILMIParams)
ATMILMIParams = tagATMILMIParams
class tagATMILMIStaticParams(Structure):
    pass
tagATMILMIStaticParams._fields_ = [
    ('atmAddress', ATMAddress),
]
assert sizeof(tagATMILMIStaticParams) == 20, sizeof(tagATMILMIStaticParams)
assert alignment(tagATMILMIStaticParams) == 1, alignment(tagATMILMIStaticParams)
ATMILMIStaticParams = tagATMILMIStaticParams
class tagATMSSCOPParams(Structure):
    pass
tagATMSSCOPParams._fields_ = [
    ('ulMaxCC', c_ulong),
    ('ulMaxPD', c_ulong),
    ('ulMaxStat', c_ulong),
    ('ulMaxReseq', c_ulong),
    ('ulRxWindow', c_ulong),
    ('ulTmrCC', c_ulong),
    ('ulTmrKeepAlive', c_ulong),
    ('ulTmrNoResp', c_ulong),
    ('ulTmrPoll', c_ulong),
    ('ulTmrIdle', c_ulong),
]
assert sizeof(tagATMSSCOPParams) == 40, sizeof(tagATMSSCOPParams)
assert alignment(tagATMSSCOPParams) == 4, alignment(tagATMSSCOPParams)
ATMSSCOPParams = tagATMSSCOPParams
class tagATMUNIParams(Structure):
    pass
tagATMUNIParams._fields_ = [
    ('ulVer', c_ulong),
    ('ulTmrT303', c_ulong),
    ('ulTmrT308', c_ulong),
    ('ulTmrT310', c_ulong),
    ('ulTmrT313', c_ulong),
    ('ulTmrT322', c_ulong),
    ('ulTmrT398', c_ulong),
    ('ulTmrT399', c_ulong),
    ('ulTmrT309', c_ulong),
    ('ulTmrT316', c_ulong),
    ('ulTmrT317', c_ulong),
    ('ulTmrTeardown', c_ulong),
]
assert sizeof(tagATMUNIParams) == 48, sizeof(tagATMUNIParams)
assert alignment(tagATMUNIParams) == 4, alignment(tagATMUNIParams)
ATMUNIParams = tagATMUNIParams
class tagATMELANRegister(Structure):
    pass
tagATMELANRegister._fields_ = [
    ('ucInstance', c_ubyte),
    ('ucInitMethod', c_ubyte),
    ('ManualAtmAddr', ATMAddress),
    ('ucC2Type', c_ubyte),
    ('ucC3Mtu', c_ubyte),
    ('ucC5Name', c_ubyte * 32),
    ('ucC6MacAddr', c_ubyte * 6),
    ('uiC7ControlTimeout', c_ushort),
    ('uiC13ArpRetryCount', c_ushort),
    ('uiC20ArpResponseTime', c_ushort),
]
assert sizeof(tagATMELANRegister) == 68, sizeof(tagATMELANRegister)
assert alignment(tagATMELANRegister) == 2, alignment(tagATMELANRegister)
ATMELANRegister = tagATMELANRegister
class tagATMELANDeregister(Structure):
    pass
tagATMELANDeregister._fields_ = [
    ('ucInstance', c_ubyte),
]
assert sizeof(tagATMELANDeregister) == 1, sizeof(tagATMELANDeregister)
assert alignment(tagATMELANDeregister) == 1, alignment(tagATMELANDeregister)
ATMELANDeregister = tagATMELANDeregister
class tagATMClassicalIP(Structure):
    pass
tagATMClassicalIP._fields_ = [
    ('ucArpServerAtmAddr', c_ubyte * 20),
    ('ucArpClientIpAddr', c_ubyte * 4),
    ('ulInterArpGap', c_ulong),
    ('ulInterCallGap', c_ulong),
    ('uiArpRetries', c_ushort),
    ('ucInvArpReplyOff', c_ubyte),
]
assert sizeof(tagATMClassicalIP) == 36, sizeof(tagATMClassicalIP)
assert alignment(tagATMClassicalIP) == 4, alignment(tagATMClassicalIP)
ATMClassicalIP = tagATMClassicalIP
class tagATMStartCardSetupParams(Structure):
    pass
tagATMStartCardSetupParams._fields_ = [
    ('ulConnIndex', c_ulong),
    ('ulCount', c_ulong),
]
assert sizeof(tagATMStartCardSetupParams) == 8, sizeof(tagATMStartCardSetupParams)
assert alignment(tagATMStartCardSetupParams) == 4, alignment(tagATMStartCardSetupParams)
ATMStartCardSetupParams = tagATMStartCardSetupParams
class tagATMStopCardSetupParams(Structure):
    pass
tagATMStopCardSetupParams._fields_ = [
    ('ulConnIndex', c_ulong),
    ('ulCount', c_ulong),
    ('ucStopNewCalls', c_ubyte),
    ('ucStopCellLoadGen', c_ubyte),
    ('ucTeardownCalls', c_ubyte),
]
assert sizeof(tagATMStopCardSetupParams) == 12, sizeof(tagATMStopCardSetupParams)
assert alignment(tagATMStopCardSetupParams) == 4, alignment(tagATMStopCardSetupParams)
ATMStopCardSetupParams = tagATMStopCardSetupParams
class tagATMStreamControl(Structure):
    pass
tagATMStreamControl._fields_ = [
    ('ucAction', c_ubyte),
    ('ulStreamIndex', c_ulong),
    ('ulStreamCount', c_ulong),
]
assert sizeof(tagATMStreamControl) == 12, sizeof(tagATMStreamControl)
assert alignment(tagATMStreamControl) == 4, alignment(tagATMStreamControl)
ATMStreamControl = tagATMStreamControl
class tagATMTrigger(Structure):
    pass
tagATMTrigger._fields_ = [
    ('ucEnable', c_ubyte),
    ('ucMode', c_ubyte),
    ('ucDirection', c_ubyte),
    ('ucCompCombo', c_ubyte),
    ('ucHeaderNoMatch', c_ubyte),
    ('ucComp1NoMatch', c_ubyte),
    ('ucComp2NoMatch', c_ubyte),
    ('ulHeaderPattern', c_ulong),
    ('ulHeaderMask', c_ulong),
    ('uiComp1Offset', c_ushort),
    ('uiComp1Range', c_ushort),
    ('ucComp1Pattern', c_ubyte * 6),
    ('ucComp1Mask', c_ubyte * 6),
    ('uiComp2Offset', c_ushort),
    ('uiComp2Range', c_ushort),
    ('ucComp2Pattern', c_ubyte * 6),
    ('ucComp2Mask', c_ubyte * 6),
]
assert sizeof(tagATMTrigger) == 48, sizeof(tagATMTrigger)
assert alignment(tagATMTrigger) == 4, alignment(tagATMTrigger)
ATMTrigger = tagATMTrigger
class tagATMGlobalTrigger(Structure):
    pass
tagATMGlobalTrigger._fields_ = [
    ('ucEnable', c_ubyte),
    ('ucCompCombo', c_ubyte),
    ('ulComp2Pattern', c_ulong),
    ('uiComp1Offset', c_ushort),
    ('uiComp2Offset', c_ushort),
    ('ulComp1Mask', c_ulong),
    ('ulComp2Mask', c_ulong),
]
assert sizeof(tagATMGlobalTrigger) == 20, sizeof(tagATMGlobalTrigger)
assert alignment(tagATMGlobalTrigger) == 4, alignment(tagATMGlobalTrigger)
ATMGlobalTrigger = tagATMGlobalTrigger
class tagATMConnTriggerParams(Structure):
    pass
tagATMConnTriggerParams._fields_ = [
    ('uiConnIndex', c_ushort),
    ('ulComp1Pattern', c_ulong),
]
assert sizeof(tagATMConnTriggerParams) == 8, sizeof(tagATMConnTriggerParams)
assert alignment(tagATMConnTriggerParams) == 4, alignment(tagATMConnTriggerParams)
ATMConnTriggerParams = tagATMConnTriggerParams
class tagATMCardInfo(Structure):
    pass
tagATMCardInfo._fields_ = [
    ('uiMainFwVersion', c_ushort),
    ('uiSarBootFwVersion', c_ushort),
    ('uiSarMainFwVersion', c_ushort),
    ('uiPciFpgaVersion', c_ushort),
    ('uiGapFpgaVersion', c_ushort),
    ('uiBptrgFpgaVersion', c_ushort),
    ('uiAm29240Revision', c_ushort),
    ('uiBt8222Revision', c_ushort),
    ('uiL64363Revision', c_ushort),
    ('uiImageCheck', c_ushort),
    ('uiDiagFlags', c_ushort),
    ('uiProductCode', c_ushort),
]
assert sizeof(tagATMCardInfo) == 24, sizeof(tagATMCardInfo)
assert alignment(tagATMCardInfo) == 2, alignment(tagATMCardInfo)
ATMCardInfo = tagATMCardInfo
class tagATMCardType(Structure):
    pass
tagATMCardType._fields_ = [
    ('uiProductCode', c_ushort),
    ('uiReserved', c_ushort * 15),
]
assert sizeof(tagATMCardType) == 32, sizeof(tagATMCardType)
assert alignment(tagATMCardType) == 2, alignment(tagATMCardType)
ATMCardType = tagATMCardType
class tagATMCardCapabilities(Structure):
    pass
tagATMCardCapabilities._fields_ = [
    ('ulLineCellRate', c_ulong),
    ('uiMaxStream', c_ushort),
    ('uiMaxConnection', c_ushort),
    ('uiMaxCalls', c_ushort),
    ('uiMaxHostTxBuffer', c_ushort),
    ('uiMaxHostRxBuffer', c_ushort),
    ('uiMaxLaneClients', c_ushort),
    ('uiMaxVPIBits', c_ushort),
    ('uiMaxVCIBits', c_ushort),
    ('uiSupportedFeatures', c_ushort),
    ('uiMaxRateWithTeardown', c_ushort),
    ('uiMaxRateWithoutTeardown', c_ushort),
    ('ucUNI_Version', c_ubyte),
]
assert sizeof(tagATMCardCapabilities) == 28, sizeof(tagATMCardCapabilities)
assert alignment(tagATMCardCapabilities) == 4, alignment(tagATMCardCapabilities)
ATMCardCapabilities = tagATMCardCapabilities
class tagATMSonetLineInfo(Structure):
    pass
tagATMSonetLineInfo._fields_ = [
    ('uiAlarmCurrent', c_ushort),
    ('uiAlarmHistory', c_ushort),
    ('ulSectionBip8', c_ulong),
    ('ulLineBip24', c_ulong),
    ('ulLineFebe', c_ulong),
    ('ulPathBip8', c_ulong),
    ('ulPathFebe', c_ulong),
    ('uiSectionBip8Rate', c_ushort),
    ('uiLineBip24Rate', c_ushort),
    ('uiLineFebeRate', c_ushort),
    ('uiPathBip8Rate', c_ushort),
    ('uiPathFebeRate', c_ushort),
]
assert sizeof(tagATMSonetLineInfo) == 36, sizeof(tagATMSonetLineInfo)
assert alignment(tagATMSonetLineInfo) == 4, alignment(tagATMSonetLineInfo)
ATMSonetLineInfo = tagATMSonetLineInfo
class tagATMDS3E3LineInfo(Structure):
    pass
tagATMDS3E3LineInfo._fields_ = [
    ('uiAlarmCurrent', c_ushort),
    ('uiAlarmHistory', c_ushort),
    ('ulCodeViolationCount', c_ulong),
    ('ulFrameErrorCount', c_ulong),
    ('ulParityErrorCount', c_ulong),
    ('ulCParityErrorCount', c_ulong),
    ('ulFebeErrorCount', c_ulong),
    ('ulFerfErrorCount', c_ulong),
    ('ulPlcpFrameErrorCount', c_ulong),
    ('ulPlcpBipErrorCount', c_ulong),
    ('ulPlcpFebeErrorCount', c_ulong),
    ('ulCodeViolationRate', c_ulong),
    ('ulFrameErrorRate', c_ulong),
    ('ulParityErrorRate', c_ulong),
    ('ulCParityErrorRate', c_ulong),
    ('ulFebeErrorRate', c_ulong),
    ('ulFerfErrorRate', c_ulong),
    ('ulPlcpFrameErrorRate', c_ulong),
    ('ulPlcpBipErrorRate', c_ulong),
    ('ulPlcpFebeErrorRate', c_ulong),
]
assert sizeof(tagATMDS3E3LineInfo) == 76, sizeof(tagATMDS3E3LineInfo)
assert alignment(tagATMDS3E3LineInfo) == 4, alignment(tagATMDS3E3LineInfo)
ATMDS3E3LineInfo = tagATMDS3E3LineInfo
class tagATMDS1E1LineInfo(Structure):
    pass
tagATMDS1E1LineInfo._fields_ = [
    ('uiAlarmCurrent', c_ushort),
    ('uiAlarmHistory', c_ushort),
    ('ulCodeViolationCount', c_ulong),
    ('ulFrameErrorCount', c_ulong),
    ('ulSyncErrorCount', c_ulong),
    ('ulFebeErrorCount', c_ulong),
    ('ulPlcpOofErrorCount', c_ulong),
    ('ulPlcpFrameErrorCount', c_ulong),
    ('ulPlcpBipErrorCount', c_ulong),
    ('ulPlcpFebeErrorCount', c_ulong),
    ('ulCodeViolationRate', c_ulong),
    ('ulFrameErrorRate', c_ulong),
    ('ulSyncErrorRate', c_ulong),
    ('ulFebeErrorRate', c_ulong),
    ('ulPlcpOofErrorRate', c_ulong),
    ('ulPlcpFrameErrorRate', c_ulong),
    ('ulPlcpBipErrorRate', c_ulong),
    ('ulPlcpFebeErrorRate', c_ulong),
]
assert sizeof(tagATMDS1E1LineInfo) == 68, sizeof(tagATMDS1E1LineInfo)
assert alignment(tagATMDS1E1LineInfo) == 4, alignment(tagATMDS1E1LineInfo)
ATMDS1E1LineInfo = tagATMDS1E1LineInfo
class tagATMLayerInfo(Structure):
    pass
class tagU64(Structure):
    pass
tagU64._fields_ = [
    ('high', c_ulong),
    ('low', c_ulong),
]
assert sizeof(tagU64) == 8, sizeof(tagU64)
assert alignment(tagU64) == 4, alignment(tagU64)
U64 = tagU64
tagATMLayerInfo._fields_ = [
    ('ullTxCell', U64),
    ('ulTxCellRate', c_ulong),
    ('ullRxCell', U64),
    ('ulRxCellRate', c_ulong),
    ('ullRxHecCorrErrors', U64),
    ('ulRxHecCorrErrorsRate', c_ulong),
    ('ullRxHecUncorrErrors', U64),
    ('ulRxHecUncorrErrorsRate', c_ulong),
]
assert sizeof(tagATMLayerInfo) == 48, sizeof(tagATMLayerInfo)
assert alignment(tagATMLayerInfo) == 4, alignment(tagATMLayerInfo)
ATMLayerInfo = tagATMLayerInfo
class tagATMAAL5LayerInfo(Structure):
    pass
tagATMAAL5LayerInfo._fields_ = [
    ('ulTimeStamp', c_ulong),
    ('ulTxCell', c_ulong),
    ('ulTxFrame', c_ulong),
    ('ulRxCell', c_ulong),
    ('ulRxFrame', c_ulong),
    ('ulRxCRC32Errors', c_ulong),
    ('ulRxLengthErrors', c_ulong),
]
assert sizeof(tagATMAAL5LayerInfo) == 28, sizeof(tagATMAAL5LayerInfo)
assert alignment(tagATMAAL5LayerInfo) == 4, alignment(tagATMAAL5LayerInfo)
ATMAAL5LayerInfo = tagATMAAL5LayerInfo
class tagATMVCCIStatus(Structure):
    pass
tagATMVCCIStatus._fields_ = [
    ('ulCellHeader', c_ulong),
    ('ulTimeStamp', c_ulong),
    ('ulTxFrame', c_ulong),
    ('ulRxFrame', c_ulong),
]
assert sizeof(tagATMVCCIStatus) == 16, sizeof(tagATMVCCIStatus)
assert alignment(tagATMVCCIStatus) == 4, alignment(tagATMVCCIStatus)
ATMVCCIStatus = tagATMVCCIStatus
class tagATMVCCInfo(Structure):
    pass
tagATMVCCInfo._fields_ = [
    ('uiIndex', c_ushort),
    ('uiCount', c_ushort),
    ('status', ATMVCCIStatus * 2050),
]
assert sizeof(tagATMVCCInfo) == 32804, sizeof(tagATMVCCInfo)
assert alignment(tagATMVCCInfo) == 4, alignment(tagATMVCCInfo)
ATMVCCInfo = tagATMVCCInfo
class tagATMTriggerInfo(Structure):
    pass
tagATMTriggerInfo._fields_ = [
    ('ulTrigger', c_ulong),
    ('ulLatency', c_ulong),
]
assert sizeof(tagATMTriggerInfo) == 8, sizeof(tagATMTriggerInfo)
assert alignment(tagATMTriggerInfo) == 4, alignment(tagATMTriggerInfo)
ATMTriggerInfo = tagATMTriggerInfo
class tagATMConnTriggerStatus(Structure):
    pass
tagATMConnTriggerStatus._fields_ = [
    ('ulTrigger', c_ulong),
    ('ulTxTimestamp', c_ulong),
    ('ulRxTimestamp', c_ulong),
]
assert sizeof(tagATMConnTriggerStatus) == 12, sizeof(tagATMConnTriggerStatus)
assert alignment(tagATMConnTriggerStatus) == 4, alignment(tagATMConnTriggerStatus)
ATMConnTriggerStatus = tagATMConnTriggerStatus
class tagATMConnTriggerInfo(Structure):
    pass
tagATMConnTriggerInfo._fields_ = [
    ('uiStartConnIndex', c_ushort),
    ('uiConnCount', c_ushort),
    ('status', ATMConnTriggerStatus * 2050),
]
assert sizeof(tagATMConnTriggerInfo) == 24604, sizeof(tagATMConnTriggerInfo)
assert alignment(tagATMConnTriggerInfo) == 4, alignment(tagATMConnTriggerInfo)
ATMConnTriggerInfo = tagATMConnTriggerInfo
class tagATMStreamDetailedStatus(Structure):
    pass
tagATMStreamDetailedStatus._fields_ = [
    ('uiStreamIndex', c_ushort),
    ('uiConnIndex', c_ushort),
    ('ulCellHeader', c_ulong),
    ('ucStreamState', c_ubyte),
    ('ucArpRetryCount', c_ubyte),
    ('ulArpRespLatency', c_ulong),
    ('ucSvcCallState', c_ubyte),
    ('ucSvcCauseLoc', c_ubyte),
    ('ucSvcCauseCode', c_ubyte),
    ('ulSvcSetupLatency', c_ulong),
]
assert sizeof(tagATMStreamDetailedStatus) == 24, sizeof(tagATMStreamDetailedStatus)
assert alignment(tagATMStreamDetailedStatus) == 4, alignment(tagATMStreamDetailedStatus)
ATMStreamDetailedStatus = tagATMStreamDetailedStatus
class tagATMStreamDetailedInfo(Structure):
    pass
tagATMStreamDetailedInfo._fields_ = [
    ('uiStartIndex', c_ushort),
    ('uiCount', c_ushort),
    ('status', ATMStreamDetailedStatus * 2048),
]
assert sizeof(tagATMStreamDetailedInfo) == 49156, sizeof(tagATMStreamDetailedInfo)
assert alignment(tagATMStreamDetailedInfo) == 4, alignment(tagATMStreamDetailedInfo)
ATMStreamDetailedInfo = tagATMStreamDetailedInfo
class tagATMStreamSearchInfo(Structure):
    pass
tagATMStreamSearchInfo._fields_ = [
    ('uiStartIndex', c_ushort),
    ('uiCount', c_ushort),
    ('uiReturnItemId', c_ushort),
    ('uiSearchItemId', c_ushort),
    ('ulSearchRangeLow', c_ulong),
    ('ulSearchRangeHigh', c_ulong),
    ('uiReturnItemSize', c_ushort),
    ('uiReserved', c_ushort),
    ('ulItem', c_ulong * 2048),
]
assert sizeof(tagATMStreamSearchInfo) == 8212, sizeof(tagATMStreamSearchInfo)
assert alignment(tagATMStreamSearchInfo) == 4, alignment(tagATMStreamSearchInfo)
ATMStreamSearchInfo = tagATMStreamSearchInfo
class tagATMConnectionStatus(Structure):
    pass
tagATMConnectionStatus._fields_ = [
    ('ulCellHeader', c_ulong),
    ('ulCallsAttempted', c_ulong),
    ('ulCallsEstablished', c_ulong),
    ('ulCallsFailed', c_ulong),
    ('ulCallsReleasedInError', c_ulong),
    ('ucState', c_ubyte),
    ('ucUNICallState', c_ubyte),
    ('ucLastCauseLoc', c_ubyte),
    ('ucLastCauseCode', c_ubyte),
    ('ulMinRTSetupLatency', c_ulong),
    ('ulMaxRTSetupLatency', c_ulong),
    ('ulTotRTSetupLatency', c_ulong),
    ('ulMinTeardownAckLatency', c_ulong),
    ('ulMaxTeardownAckLatency', c_ulong),
    ('ulTotTeardownAckLatency', c_ulong),
    ('ulTestDuration', c_ulong),
]
assert sizeof(tagATMConnectionStatus) == 52, sizeof(tagATMConnectionStatus)
assert alignment(tagATMConnectionStatus) == 4, alignment(tagATMConnectionStatus)
ATMConnectionStatus = tagATMConnectionStatus
class tagATMConnectionInfo(Structure):
    pass
tagATMConnectionInfo._fields_ = [
    ('ulIndex', c_ulong),
    ('ulCount', c_ulong),
    ('status', ATMConnectionStatus * 512),
]
assert sizeof(tagATMConnectionInfo) == 26632, sizeof(tagATMConnectionInfo)
assert alignment(tagATMConnectionInfo) == 4, alignment(tagATMConnectionInfo)
ATMConnectionInfo = tagATMConnectionInfo
class tagATMConnectionInfoSummary(Structure):
    pass
tagATMConnectionInfoSummary._fields_ = [
    ('ulIndex', c_ulong),
    ('ulCount', c_ulong),
    ('ulCallsAttempted', c_ulong),
    ('ulCallsEstablished', c_ulong),
    ('ulCallsFailed', c_ulong),
    ('ulCallsReleasedInError', c_ulong),
    ('ulCallsActive', c_ulong),
    ('ulMinRTSetupLatency', c_ulong),
    ('ulMaxRTSetupLatency', c_ulong),
    ('ulTotRTSetupLatency', c_ulong),
    ('ulMinTeardownAckLatency', c_ulong),
    ('ulMaxTeardownAckLatency', c_ulong),
    ('ulTotTeardownAckLatency', c_ulong),
    ('ulTestDuration', c_ulong),
    ('ulFirstFailedIndex', c_ulong),
]
assert sizeof(tagATMConnectionInfoSummary) == 60, sizeof(tagATMConnectionInfoSummary)
assert alignment(tagATMConnectionInfoSummary) == 4, alignment(tagATMConnectionInfoSummary)
ATMConnectionInfoSummary = tagATMConnectionInfoSummary
class tagATMConnection64Status(Structure):
    pass
tagATMConnection64Status._fields_ = [
    ('ulCellHeader', c_ulong),
    ('ulCallsAttempted', c_ulong),
    ('ulCallsEstablished', c_ulong),
    ('ulCallsFailed', c_ulong),
    ('ulCallsReleasedInError', c_ulong),
    ('ucState', c_ubyte),
    ('ucUNICallState', c_ubyte),
    ('ucLastCauseLoc', c_ubyte),
    ('ucLastCauseCode', c_ubyte),
    ('ullMinRTSetupLatency', U64),
    ('ullMaxRTSetupLatency', U64),
    ('ullTotRTSetupLatency', U64),
    ('ullMinTeardownAckLatency', U64),
    ('ullMaxTeardownAckLatency', U64),
    ('ullTotTeardownAckLatency', U64),
    ('ullTestDuration', U64),
]
assert sizeof(tagATMConnection64Status) == 80, sizeof(tagATMConnection64Status)
assert alignment(tagATMConnection64Status) == 4, alignment(tagATMConnection64Status)
ATMConnection64Status = tagATMConnection64Status
class tagATMConnection64Info(Structure):
    pass
tagATMConnection64Info._fields_ = [
    ('ulIndex', c_ulong),
    ('ulCount', c_ulong),
    ('status', ATMConnection64Status * 512),
]
assert sizeof(tagATMConnection64Info) == 40968, sizeof(tagATMConnection64Info)
assert alignment(tagATMConnection64Info) == 4, alignment(tagATMConnection64Info)
ATMConnection64Info = tagATMConnection64Info
class tagATMConnection64InfoSummary(Structure):
    pass
tagATMConnection64InfoSummary._fields_ = [
    ('ulIndex', c_ulong),
    ('ulCount', c_ulong),
    ('ulCallsAttempted', c_ulong),
    ('ulCallsEstablished', c_ulong),
    ('ulCallsFailed', c_ulong),
    ('ulCallsReleasedInError', c_ulong),
    ('ulCallsActive', c_ulong),
    ('ullMinRTSetupLatency', U64),
    ('ullMaxRTSetupLatency', U64),
    ('ullTotRTSetupLatency', U64),
    ('ullMinTeardownAckLatency', U64),
    ('ullMaxTeardownAckLatency', U64),
    ('ullTotTeardownAckLatency', U64),
    ('ullTestDuration', U64),
    ('ulFirstFailedIndex', c_ulong),
    ('ulFirstActiveFailedIndex', c_ulong),
]
assert sizeof(tagATMConnection64InfoSummary) == 92, sizeof(tagATMConnection64InfoSummary)
assert alignment(tagATMConnection64InfoSummary) == 4, alignment(tagATMConnection64InfoSummary)
ATMConnection64InfoSummary = tagATMConnection64InfoSummary
class tagATMILMIInfo(Structure):
    pass
tagATMILMIInfo._fields_ = [
    ('ucState', c_ubyte),
    ('uiColdStarts', c_ushort),
    ('uiGoodPackets', c_ushort),
    ('uiBadPackets', c_ushort),
    ('uiSentPackets', c_ushort),
    ('RegAddr', ATMAddress),
]
assert sizeof(tagATMILMIInfo) == 30, sizeof(tagATMILMIInfo)
assert alignment(tagATMILMIInfo) == 2, alignment(tagATMILMIInfo)
ATMILMIInfo = tagATMILMIInfo
class tagATMSAALInfo(Structure):
    pass
tagATMSAALInfo._fields_ = [
    ('ucSscopState', c_ubyte),
    ('ucSaalState', c_ubyte),
    ('ulVtSendState', c_ulong),
    ('ulVtPollSend', c_ulong),
    ('ulVtMaxSend', c_ulong),
    ('ulVtPollData', c_ulong),
    ('ulVrRxState', c_ulong),
    ('ulVrHighestExpected', c_ulong),
    ('ulVrMaxReceive', c_ulong),
]
assert sizeof(tagATMSAALInfo) == 32, sizeof(tagATMSAALInfo)
assert alignment(tagATMSAALInfo) == 4, alignment(tagATMSAALInfo)
ATMSAALInfo = tagATMSAALInfo
class tagATMSigEmulatorInfo(Structure):
    pass
tagATMSigEmulatorInfo._fields_ = [
    ('ulCallsHandled', c_ulong),
    ('ulCallsProgressing', c_ulong),
    ('ulCallsActive', c_ulong),
]
assert sizeof(tagATMSigEmulatorInfo) == 12, sizeof(tagATMSigEmulatorInfo)
assert alignment(tagATMSigEmulatorInfo) == 4, alignment(tagATMSigEmulatorInfo)
ATMSigEmulatorInfo = tagATMSigEmulatorInfo
class tagATMSigRestartAckInfo(Structure):
    pass
tagATMSigRestartAckInfo._fields_ = [
    ('ucCurrentState', c_ubyte),
]
assert sizeof(tagATMSigRestartAckInfo) == 1, sizeof(tagATMSigRestartAckInfo)
assert alignment(tagATMSigRestartAckInfo) == 1, alignment(tagATMSigRestartAckInfo)
ATMSigRestartAckInfo = tagATMSigRestartAckInfo
class tagATMSigTraceParams(Structure):
    pass
tagATMSigTraceParams._fields_ = [
    ('ucStopConfig', c_ubyte),
]
assert sizeof(tagATMSigTraceParams) == 1, sizeof(tagATMSigTraceParams)
assert alignment(tagATMSigTraceParams) == 1, alignment(tagATMSigTraceParams)
ATMSigTraceParams = tagATMSigTraceParams
class tagATMSigTraceEventInfo(Structure):
    pass
tagATMSigTraceEventInfo._fields_ = [
    ('ulEventCount', c_ulong),
]
assert sizeof(tagATMSigTraceEventInfo) == 4, sizeof(tagATMSigTraceEventInfo)
assert alignment(tagATMSigTraceEventInfo) == 4, alignment(tagATMSigTraceEventInfo)
ATMSigTraceEventInfo = tagATMSigTraceEventInfo
class tagATMSigTraceEventData(Structure):
    pass
tagATMSigTraceEventData._fields_ = [
    ('ucEvent', c_ubyte),
    ('ucCardNumber', c_ubyte),
    ('ucCauseLocation', c_ubyte),
    ('ucCauseCode', c_ubyte),
    ('ulCallSeqNumber', c_ulong),
    ('ulTimeStamp', c_ulong),
]
assert sizeof(tagATMSigTraceEventData) == 12, sizeof(tagATMSigTraceEventData)
assert alignment(tagATMSigTraceEventData) == 4, alignment(tagATMSigTraceEventData)
ATMSigTraceEventData = tagATMSigTraceEventData
class tagATMELANInfo(Structure):
    pass
tagATMELANInfo._fields_ = [
    ('ucInstance', c_ubyte),
    ('ucState', c_ubyte),
    ('ucC2Type', c_ubyte),
    ('ucC3MTU', c_ubyte),
    ('ucC5Name', c_ubyte * 32),
    ('uiC14LecIndex', c_ushort),
    ('uiCtrlDirectConnIndex', c_ushort),
    ('uiCtrlDistConnIndex', c_ushort),
    ('uiMcastSendConnIndex', c_ushort),
    ('uiMcastFwdConnIndex', c_ushort),
    ('LesAtmAddr', ATMAddress),
    ('BusAtmAddr', ATMAddress),
]
assert sizeof(tagATMELANInfo) == 86, sizeof(tagATMELANInfo)
assert alignment(tagATMELANInfo) == 2, alignment(tagATMELANInfo)
ATMELANInfo = tagATMELANInfo
class tagATMClassicalIPInfo(Structure):
    pass
tagATMClassicalIPInfo._fields_ = [
    ('ucSvcCallState', c_ubyte),
    ('ucSvcCauseLoc', c_ubyte),
    ('ucSvcCauseCode', c_ubyte),
    ('ucReserved', c_ubyte),
    ('uiArpRequestPackets', c_ushort),
    ('uiArpResponsePackets', c_ushort),
    ('uiInarpRequestPackets', c_ushort),
    ('uiInarpResponsePackets', c_ushort),
]
assert sizeof(tagATMClassicalIPInfo) == 12, sizeof(tagATMClassicalIPInfo)
assert alignment(tagATMClassicalIPInfo) == 2, alignment(tagATMClassicalIPInfo)
ATMClassicalIPInfo = tagATMClassicalIPInfo
class tagATMSigEmulTeardown(Structure):
    pass
tagATMSigEmulTeardown._fields_ = [
    ('ucTeardown', c_ubyte),
    ('ucReserved1', c_ubyte * 3),
    ('ucReserved2', c_ulong * 3),
]
assert sizeof(tagATMSigEmulTeardown) == 16, sizeof(tagATMSigEmulTeardown)
assert alignment(tagATMSigEmulTeardown) == 4, alignment(tagATMSigEmulTeardown)
ATMSigEmulTeardown = tagATMSigEmulTeardown
class tabATMPVCADNewParams(Structure):
    pass
tabATMPVCADNewParams._fields_ = [
    ('ulTmrOutstandingReqid', c_ulong),
    ('ulPort', c_ulong),
]
assert sizeof(tabATMPVCADNewParams) == 8, sizeof(tabATMPVCADNewParams)
assert alignment(tabATMPVCADNewParams) == 4, alignment(tabATMPVCADNewParams)
ATMPVCADNewParams = tabATMPVCADNewParams
class tagATMPVCADVPIVCIForGetnext(Structure):
    pass
tagATMPVCADVPIVCIForGetnext._fields_ = [
    ('ucReserved', c_ubyte),
    ('ucVPI', c_ubyte),
    ('uiVCI', c_ushort),
    ('ulReserved', c_ulong),
]
assert sizeof(tagATMPVCADVPIVCIForGetnext) == 8, sizeof(tagATMPVCADVPIVCIForGetnext)
assert alignment(tagATMPVCADVPIVCIForGetnext) == 4, alignment(tagATMPVCADVPIVCIForGetnext)
ATMPVCADVPIVCIForGetnext = tagATMPVCADVPIVCIForGetnext
class tagATMPVCADResponse(Structure):
    pass
tagATMPVCADResponse._fields_ = [
    ('ucEntryState', c_ubyte),
    ('ucVPI', c_ubyte),
    ('uiVCI', c_ushort),
    ('ulPVCStatus', c_ulong),
    ('ulFwdTrafficDescriptorType', c_ulong),
    ('ulFwdPCR_0', c_ulong),
    ('ulFwdPCR_01', c_ulong),
    ('ulFwdSCR_0', c_ulong),
    ('ulFwdSCR_01', c_ulong),
    ('ulFwdMBS_0', c_ulong),
    ('ulFwdMBS_01', c_ulong),
    ('ulBwdTrafficDescriptorType', c_ulong),
    ('ulBwdPCR_0', c_ulong),
    ('ulBwdPCR_01', c_ulong),
    ('ulBwdSCR_0', c_ulong),
    ('ulBwdSCR_01', c_ulong),
    ('ulBwdMBS_0', c_ulong),
    ('ulBwdMBS_01', c_ulong),
    ('ucFwdQOS', c_ubyte),
    ('ucBwdQOS', c_ubyte),
    ('ucReserved', c_ubyte * 2),
]
assert sizeof(tagATMPVCADResponse) == 68, sizeof(tagATMPVCADResponse)
assert alignment(tagATMPVCADResponse) == 4, alignment(tagATMPVCADResponse)
ATMPVCADResponse = tagATMPVCADResponse
class tagATMVCDBListReq(Structure):
    pass
tagATMVCDBListReq._fields_ = [
    ('ulStartEntryNum', c_ulong),
    ('ucEntryState', c_ubyte),
    ('ucReserved', c_ubyte * 3),
    ('ulEntryCount', c_ulong),
]
assert sizeof(tagATMVCDBListReq) == 12, sizeof(tagATMVCDBListReq)
assert alignment(tagATMVCDBListReq) == 4, alignment(tagATMVCDBListReq)
ATMVCDBListReq = tagATMVCDBListReq
class tagATMVCDBListHdr(Structure):
    pass
tagATMVCDBListHdr._fields_ = [
    ('ulStartEntryNum', c_ulong),
    ('ucEntryState', c_ubyte),
    ('ucReserved', c_ubyte * 3),
    ('ulEntryCount', c_ulong),
]
assert sizeof(tagATMVCDBListHdr) == 12, sizeof(tagATMVCDBListHdr)
assert alignment(tagATMVCDBListHdr) == 4, alignment(tagATMVCDBListHdr)
ATMVCDBListHdr = tagATMVCDBListHdr
class tagATMVCDBEntryParams(Structure):
    pass
tagATMVCDBEntryParams._fields_ = [
    ('ulPVCStatus', c_ulong),
]
assert sizeof(tagATMVCDBEntryParams) == 4, sizeof(tagATMVCDBEntryParams)
assert alignment(tagATMVCDBEntryParams) == 4, alignment(tagATMVCDBEntryParams)
ATMVCDBEntryParams = tagATMVCDBEntryParams
class tagATMVCDBClearFlagReq(Structure):
    pass
tagATMVCDBClearFlagReq._fields_ = [
    ('uiFlags', c_ushort),
]
assert sizeof(tagATMVCDBClearFlagReq) == 2, sizeof(tagATMVCDBClearFlagReq)
assert alignment(tagATMVCDBClearFlagReq) == 2, alignment(tagATMVCDBClearFlagReq)
ATMVCDBClearFlagReq = tagATMVCDBClearFlagReq
class tagATMVCDBEntryRtvl(Structure):
    pass
tagATMVCDBEntryRtvl._fields_ = [
    ('ulEntryNum', c_ulong),
    ('ulStateTimestamp', c_ulong),
    ('ucEntryState', c_ubyte),
    ('ucEncapType', c_ubyte),
    ('ucReserved1', c_ubyte),
    ('ucVPI', c_ubyte),
    ('uiVCI', c_ushort),
    ('uiConnIndex', c_ushort),
    ('ulCallRef', c_ulong),
    ('ulFwdTrafficDescriptorType', c_ulong),
    ('ulFwdPCR_0', c_ulong),
    ('ulFwdPCR_01', c_ulong),
    ('ulFwdSCR_0', c_ulong),
    ('ulFwdSCR_01', c_ulong),
    ('ulFwdMBS_0', c_ulong),
    ('ulFwdMBS_01', c_ulong),
    ('ulBwdTrafficDescriptorType', c_ulong),
    ('ulBwdPCR_0', c_ulong),
    ('ulBwdPCR_01', c_ulong),
    ('ulBwdSCR_0', c_ulong),
    ('ulBwdSCR_01', c_ulong),
    ('ulBwdMBS_0', c_ulong),
    ('ulBwdMBS_01', c_ulong),
    ('ucFwdQOS', c_ubyte),
    ('ucBwdQOS', c_ubyte),
    ('ucReserved2', c_ubyte * 2),
    ('ucBbcClass', c_ubyte),
    ('ucBbcTimingReq', c_ubyte),
    ('ucBbcTrafficType', c_ubyte),
    ('ucBbcSusceptibleToClipping', c_ubyte),
    ('AtmCaller', ATMAddress),
    ('ucIPAddr', c_ubyte * 4),
    ('ucReserved3', c_ubyte * 4),
]
assert sizeof(tagATMVCDBEntryRtvl) == 112, sizeof(tagATMVCDBEntryRtvl)
assert alignment(tagATMVCDBEntryRtvl) == 4, alignment(tagATMVCDBEntryRtvl)
ATMVCDBEntryRtvl = tagATMVCDBEntryRtvl
class tagATMVCDBInfo(Structure):
    pass
tagATMVCDBInfo._fields_ = [
    ('ulStartEntryNum', c_ulong),
    ('ucEntryState', c_ubyte),
    ('ucReserved', c_ubyte * 3),
    ('ulEntryCount', c_ulong),
    ('status', ATMVCDBEntryRtvl * 512),
]
assert sizeof(tagATMVCDBInfo) == 57356, sizeof(tagATMVCDBInfo)
assert alignment(tagATMVCDBInfo) == 4, alignment(tagATMVCDBInfo)
ATMVCDBInfo = tagATMVCDBInfo
class tagATMVCDBPurge(Structure):
    pass
tagATMVCDBPurge._fields_ = [
    ('ucEntryState', c_ubyte),
]
assert sizeof(tagATMVCDBPurge) == 1, sizeof(tagATMVCDBPurge)
assert alignment(tagATMVCDBPurge) == 1, alignment(tagATMVCDBPurge)
ATMVCDBCPurge = tagATMVCDBPurge
class tagATMIncomingSVCMethod(Structure):
    pass
tagATMIncomingSVCMethod._fields_ = [
    ('ucReserved', c_ubyte * 3),
    ('ucMethod', c_ubyte),
]
assert sizeof(tagATMIncomingSVCMethod) == 4, sizeof(tagATMIncomingSVCMethod)
assert alignment(tagATMIncomingSVCMethod) == 1, alignment(tagATMIncomingSVCMethod)
ATMIncomingSVCMethod = tagATMIncomingSVCMethod

# values for enumeration 'PVCAD_STATE'
PVCAD_STATE = c_int # enum
class tagATMVCCounts(Structure):
    pass
tagATMVCCounts._fields_ = [
    ('ulNewSVCCount', c_ulong),
    ('ulStableSVCCount', c_ulong),
    ('ulModifiedSVCCount', c_ulong),
    ('ulDeletedSVCCount', c_ulong),
    ('ulTransitorySVCCount', c_ulong),
]
assert sizeof(tagATMVCCounts) == 20, sizeof(tagATMVCCounts)
assert alignment(tagATMVCCounts) == 4, alignment(tagATMVCCounts)
ATMVCDBCounts = tagATMVCCounts
class tagATMPerConnBurstCount(Structure):
    pass
tagATMPerConnBurstCount._fields_ = [
    ('uiStartConnIdx', c_ushort),
    ('uiConnCount', c_ushort),
    ('ucFunction', c_ubyte),
    ('ucReserved', c_ubyte),
    ('uiMultiBurstCount', c_ushort),
    ('ulInterBurstGap', c_ulong),
    ('ulFrameBurstSize', c_ulong),
]
assert sizeof(tagATMPerConnBurstCount) == 16, sizeof(tagATMPerConnBurstCount)
assert alignment(tagATMPerConnBurstCount) == 4, alignment(tagATMPerConnBurstCount)
ATMPerConnBurstCount = tagATMPerConnBurstCount
class tagATMPerPortBurstCount(Structure):
    pass
tagATMPerPortBurstCount._fields_ = [
    ('ucFunction', c_ubyte),
    ('ucReserved', c_ubyte * 3),
    ('ulReserved', c_ulong),
    ('ulFrameBurstSize', c_ulong),
]
assert sizeof(tagATMPerPortBurstCount) == 12, sizeof(tagATMPerPortBurstCount)
assert alignment(tagATMPerPortBurstCount) == 4, alignment(tagATMPerPortBurstCount)
ATMPerPortBurstCount = tagATMPerPortBurstCount
class tagATMStreamParamsCopy(Structure):
    pass
tagATMStreamParamsCopy._fields_ = [
    ('uiSrcStrNum', c_ushort),
    ('uiDstStrNum', c_ushort),
    ('uiDstStrCount', c_ushort),
    ('uiReserved', c_ushort),
    ('ulReserved', c_ulong),
]
assert sizeof(tagATMStreamParamsCopy) == 12, sizeof(tagATMStreamParamsCopy)
assert alignment(tagATMStreamParamsCopy) == 4, alignment(tagATMStreamParamsCopy)
ATMStreamParamsCopy = tagATMStreamParamsCopy
class tagATMStreamParamsModify(Structure):
    pass
tagATMStreamParamsModify._fields_ = [
    ('uiStartStrNum', c_ushort),
    ('uiStrCount', c_ushort),
    ('uiParamItemID', c_ushort),
    ('uiParamCount', c_ushort),
    ('ucData', c_ubyte * 2048),
]
assert sizeof(tagATMStreamParamsModify) == 2056, sizeof(tagATMStreamParamsModify)
assert alignment(tagATMStreamParamsModify) == 2, alignment(tagATMStreamParamsModify)
ATMStreamParamsModify = tagATMStreamParamsModify
class tagATMStreamParamsFill(Structure):
    pass
tagATMStreamParamsFill._fields_ = [
    ('uiSrcStrNum', c_ushort),
    ('uiDstStrNum', c_ushort),
    ('uiDstStrCount', c_ushort),
    ('uiParamItemID', c_ushort),
    ('ucDelta', c_ubyte * 20),
]
assert sizeof(tagATMStreamParamsFill) == 28, sizeof(tagATMStreamParamsFill)
assert alignment(tagATMStreamParamsFill) == 2, alignment(tagATMStreamParamsFill)
ATMStreamParamsFill = tagATMStreamParamsFill
class tagATMFrameCopyMod(Structure):
    pass
tagATMFrameCopyMod._fields_ = [
    ('uiStrIdx', c_ushort),
    ('uiDataOffset', c_ushort),
    ('ucDataLen', c_ubyte),
    ('ucReserved', c_ubyte * 3),
    ('ucData', c_ubyte * 12),
]
assert sizeof(tagATMFrameCopyMod) == 20, sizeof(tagATMFrameCopyMod)
assert alignment(tagATMFrameCopyMod) == 2, alignment(tagATMFrameCopyMod)
ATMFrameCopyMod = tagATMFrameCopyMod
class tagATMFrameCopyReq(Structure):
    pass
tagATMFrameCopyReq._fields_ = [
    ('uiStartStrNum', c_ushort),
    ('uiStrCount', c_ushort),
    ('uiNumMods', c_ushort),
    ('ModArray', ATMFrameCopyMod * 100),
]
assert sizeof(tagATMFrameCopyReq) == 2006, sizeof(tagATMFrameCopyReq)
assert alignment(tagATMFrameCopyReq) == 2, alignment(tagATMFrameCopyReq)
ATMFrameCopyReq = tagATMFrameCopyReq
class tagATMSchedParams(Structure):
    pass
tagATMSchedParams._fields_ = [
    ('ulUtilization', c_ulong),
    ('uiSchedType', c_ushort),
    ('uiReserved', c_ushort),
    ('ulReserved1', c_ulong),
    ('ulReserved2', c_ulong),
]
assert sizeof(tagATMSchedParams) == 16, sizeof(tagATMSchedParams)
assert alignment(tagATMSchedParams) == 4, alignment(tagATMSchedParams)
ATMSchedParams = tagATMSchedParams
class tagATMPETLogFileReq(Structure):
    pass
tagATMPETLogFileReq._fields_ = [
    ('ucFunction', c_ubyte),
    ('ucReserved', c_ubyte * 3),
    ('ulLogFileSize', c_ulong),
]
assert sizeof(tagATMPETLogFileReq) == 8, sizeof(tagATMPETLogFileReq)
assert alignment(tagATMPETLogFileReq) == 4, alignment(tagATMPETLogFileReq)
ATMPETLogFileReq = tagATMPETLogFileReq
class tagATMPETReq(Structure):
    pass
tagATMPETReq._fields_ = [
    ('ulReserved1', c_ulong),
    ('ulReserved2', c_ulong),
    ('ulConnTraceEvents', c_ulong),
    ('ulILMITraceEvents', c_ulong),
    ('ulLANETraceEvents', c_ulong),
    ('ulSAALTraceEvents', c_ulong),
]
assert sizeof(tagATMPETReq) == 24, sizeof(tagATMPETReq)
assert alignment(tagATMPETReq) == 4, alignment(tagATMPETReq)
ATMPETReq = tagATMPETReq
class tagATMPETReadReq(Structure):
    pass
tagATMPETReadReq._fields_ = [
    ('ulReserved', c_ulong),
    ('uiReserved', c_ushort),
    ('uiEntryCount', c_ushort),
]
assert sizeof(tagATMPETReadReq) == 8, sizeof(tagATMPETReadReq)
assert alignment(tagATMPETReadReq) == 4, alignment(tagATMPETReadReq)
ATMPETReadReq = tagATMPETReadReq
class tagATMPETListHdr(Structure):
    pass
tagATMPETListHdr._fields_ = [
    ('ulReserved', c_ulong),
    ('uiReserved', c_ushort),
    ('uiEntryCount', c_ushort),
]
assert sizeof(tagATMPETListHdr) == 8, sizeof(tagATMPETListHdr)
assert alignment(tagATMPETListHdr) == 4, alignment(tagATMPETListHdr)
ATMPETListHdr = tagATMPETListHdr
class tagATMPETEntryRtvl(Structure):
    pass
tagATMPETEntryRtvl._fields_ = [
    ('ulRefNum', c_ulong),
    ('ulTimeStamp', c_ulong),
    ('ucEventData', c_ubyte * 140),
]
assert sizeof(tagATMPETEntryRtvl) == 148, sizeof(tagATMPETEntryRtvl)
assert alignment(tagATMPETEntryRtvl) == 4, alignment(tagATMPETEntryRtvl)
ATMPETEntryRtvl = tagATMPETEntryRtvl
class tagATMPETInfo(Structure):
    pass
tagATMPETInfo._fields_ = [
    ('ulReserved', c_ulong),
    ('uiReserved', c_ushort),
    ('uiEntryCount', c_ushort),
    ('status', ATMPETEntryRtvl * 512),
]
assert sizeof(tagATMPETInfo) == 75784, sizeof(tagATMPETInfo)
assert alignment(tagATMPETInfo) == 4, alignment(tagATMPETInfo)
ATMPETInfo = tagATMPETInfo
class tagATMExtVCCIStatus(Structure):
    pass
tagATMExtVCCIStatus._fields_ = [
    ('ulConnIndex', c_ulong),
    ('ulCellHeader', c_ulong),
    ('ulTimeStamp', c_ulong),
    ('ulTxFrame', c_ulong),
    ('ulRxFrame', c_ulong),
    ('ulRxCRC32Err', c_ulong),
    ('ulRxTriggerCt', c_ulong),
    ('ulReserved', c_ulong * 2),
]
assert sizeof(tagATMExtVCCIStatus) == 36, sizeof(tagATMExtVCCIStatus)
assert alignment(tagATMExtVCCIStatus) == 4, alignment(tagATMExtVCCIStatus)
ATMExtVCCIStatus = tagATMExtVCCIStatus
class tagATMExtVCCInfo(Structure):
    pass
tagATMExtVCCInfo._fields_ = [
    ('uiIndex', c_ushort),
    ('uiCount', c_ushort),
    ('status', ATMExtVCCIStatus * 2050),
]
assert sizeof(tagATMExtVCCInfo) == 73804, sizeof(tagATMExtVCCInfo)
assert alignment(tagATMExtVCCInfo) == 4, alignment(tagATMExtVCCInfo)
ATMExtVCCInfo = tagATMExtVCCInfo
class tagATMStreamTriggerTimeStatus(Structure):
    pass
tagATMStreamTriggerTimeStatus._fields_ = [
    ('ulTrigger', c_ulong),
    ('ulTxTimestamp', c_ulong),
    ('ulRxTimestamp', c_ulong),
    ('ulTimestamp', c_ulong),
]
assert sizeof(tagATMStreamTriggerTimeStatus) == 16, sizeof(tagATMStreamTriggerTimeStatus)
assert alignment(tagATMStreamTriggerTimeStatus) == 4, alignment(tagATMStreamTriggerTimeStatus)
ATMStreamTriggerTimeStatus = tagATMStreamTriggerTimeStatus
class tagATMStreamTriggerTimeInfo(Structure):
    pass
tagATMStreamTriggerTimeInfo._fields_ = [
    ('uiStartIndex', c_ushort),
    ('uiCount', c_ushort),
    ('status', ATMStreamTriggerTimeStatus * 2050),
]
assert sizeof(tagATMStreamTriggerTimeInfo) == 32804, sizeof(tagATMStreamTriggerTimeInfo)
assert alignment(tagATMStreamTriggerTimeInfo) == 4, alignment(tagATMStreamTriggerTimeInfo)
ATMStreamTriggerTimeInfo = tagATMStreamTriggerTimeInfo
class tagATMConfigureDUT(Structure):
    pass
tagATMConfigureDUT._fields_ = [
    ('iPortID', c_ushort),
    ('iIlmiMethod', c_ushort),
    ('Line', ATMDS1E1LineParams),
    ('Reserved1', c_char * 3),
    ('SSCOP', ATMSSCOPParams),
    ('UNI', ATMUNIParams),
    ('ILMI', ATMILMIParams),
    ('ILMIStatic', ATMILMIStaticParams),
    ('ucConnectionType', c_ubyte),
    ('ucEncaptionType', c_ubyte),
    ('ucVPI', c_ubyte),
    ('ucVCI', c_ubyte * 2),
    ('ClassicalIP', ATMClassicalIP),
    ('Reserved2', c_char * 75),
]
assert sizeof(tagATMConfigureDUT) == 264, sizeof(tagATMConfigureDUT)
assert alignment(tagATMConfigureDUT) == 4, alignment(tagATMConfigureDUT)
ATMConfigureDUT = tagATMConfigureDUT
class tagATPortConfig(Structure):
    pass
tagATPortConfig._fields_ = [
    ('ucInterfaceSpeed', c_ubyte),
    ('ucFramingMode', c_ubyte),
    ('ucTxClockSource', c_ubyte),
    ('ucCellScramblingMode', c_ubyte),
    ('ucHecCosetEnable', c_ubyte),
    ('ucLoopbackMode', c_ubyte),
    ('ucIdleCellHeaderGFC', c_ubyte),
    ('ucIdleCellHeaderPTI', c_ubyte),
    ('ucIdleCellHeaderCLP', c_ubyte),
    ('ucIdleCellPayloadByte', c_ubyte),
    ('ucPathSignalLabel', c_ubyte),
    ('ucHecErrorHandlingMode', c_ubyte),
    ('ucSONETCountMode', c_ubyte),
    ('uiMaxCLIPInARPRate', c_ushort),
    ('ulVCInterleaveDepth', c_ulong),
    ('ulMaxRxCutThroughBufferSize', c_ulong),
    ('ulErrorInjection', c_ulong),
    ('ulFlags', c_ulong),
    ('ulConfiguredCellRate', c_ulong),
    ('ulVCCount', c_ulong),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagATPortConfig) == 104, sizeof(tagATPortConfig)
assert alignment(tagATPortConfig) == 4, alignment(tagATPortConfig)
ATPortConfig = tagATPortConfig
class tagATPortCounterInfo(Structure):
    pass
tagATPortCounterInfo._fields_ = [
    ('u64TxAssignedCells', U64),
    ('u64TxAAL0Cells', U64),
    ('u64TxAAL5Frames', U64),
    ('u64TxAAL5FrameBytes', U64),
    ('u64RxCells', U64),
    ('u64RxTaggedCells', U64),
    ('u64RxCongestedCells', U64),
    ('u64RxHecCorrErrorCells', U64),
    ('u64RxHecUncorrErrorCells', U64),
    ('u64RxAAL0Cells', U64),
    ('u64RxAAL5Frames', U64),
    ('u64RxAAL5FrameBytes', U64),
    ('u64RxCRCErredAAL5Frames', U64),
    ('ulTxCellRate', c_ulong),
    ('ulRxCellRate', c_ulong),
    ('ulRxTaggedCellRate', c_ulong),
    ('ulRxCongestedCellRate', c_ulong),
    ('ulRxHecCorrErrorRate', c_ulong),
    ('ulRxHecUncorrErrorRate', c_ulong),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagATPortCounterInfo) == 192, sizeof(tagATPortCounterInfo)
assert alignment(tagATPortCounterInfo) == 4, alignment(tagATPortCounterInfo)
ATPortCounterInfo = tagATPortCounterInfo
class tagATVC(Structure):
    pass
tagATVC._fields_ = [
    ('ucTxEnable', c_ubyte),
    ('ucRxEnable', c_ubyte),
    ('ucConnType', c_ubyte),
    ('uiVPI', c_ushort),
    ('uiVCI', c_ushort),
    ('ucGFC', c_ubyte),
    ('ucPTI', c_ubyte),
    ('ucAALType', c_ubyte),
    ('ucEncapType', c_ubyte),
    ('ucCustomHeaderEnable', c_ubyte),
    ('ucCustomHeaderLength', c_ubyte),
    ('ucCustomHeader', c_ubyte * 12),
    ('ucReserved1', c_ubyte),
    ('ucCaptureEnable', c_ubyte),
    ('ucRateClass', c_ubyte),
    ('ulPCR', c_ulong),
    ('ulATCDVT', c_ulong),
    ('ulRxCutThroughBufferSize', c_ulong),
    ('ucRxCutThroughFilter', c_ubyte),
    ('uiRxCutThroughNullProtocol', c_ushort),
    ('ulTxMode', c_ulong),
    ('ulBurstCount', c_ulong),
    ('ulMburstCount', c_ulong),
    ('ulBurstGap', c_ulong),
    ('ucCLIPInARPEnable', c_ubyte),
    ('ucCLIPUnSolicitedInARPReplyEnable', c_ubyte),
    ('uiCLIPInARPTimeInterval', c_ushort),
    ('ucCLIPIPAddress', c_ubyte * 4),
    ('ulConfiguredCellRate', c_ulong),
    ('ucReserved', c_ubyte * 50),
]
assert sizeof(tagATVC) == 128, sizeof(tagATVC)
assert alignment(tagATVC) == 4, alignment(tagATVC)
ATVC = tagATVC
class tagATVCCounterInfo(Structure):
    pass
tagATVCCounterInfo._fields_ = [
    ('u64TxCells', U64),
    ('u64TxAAL5Frames', U64),
    ('u64RxCells', U64),
    ('u64RxAAL5Frames', U64),
    ('u64RxCRCErredAAL5Frames', U64),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagATVCCounterInfo) == 104, sizeof(tagATVCCounterInfo)
assert alignment(tagATVCCounterInfo) == 4, alignment(tagATVCCounterInfo)
ATVCCounterInfo = tagATVCCounterInfo
class tagATStreamCounterInfo(Structure):
    pass
tagATStreamCounterInfo._fields_ = [
    ('u64TxFrameCount', U64),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagATStreamCounterInfo) == 72, sizeof(tagATStreamCounterInfo)
assert alignment(tagATStreamCounterInfo) == 4, alignment(tagATStreamCounterInfo)
ATStreamCounterInfo = tagATStreamCounterInfo
class tagATCardSetSpeed(Structure):
    pass
tagATCardSetSpeed._fields_ = [
    ('uiSpeed', c_ushort),
]
assert sizeof(tagATCardSetSpeed) == 2, sizeof(tagATCardSetSpeed)
assert alignment(tagATCardSetSpeed) == 2, alignment(tagATCardSetSpeed)
ATCardSetSpeed = tagATCardSetSpeed
class tagATVCCLIPCounterInfo(Structure):
    pass
tagATVCCLIPCounterInfo._fields_ = [
    ('ulRxInARPRequest', c_ulong),
    ('ulTxInARPRequest', c_ulong),
    ('ulRxInARPReply', c_ulong),
    ('ulTxInARPReply', c_ulong),
    ('ulRxARPRequest', c_ulong),
    ('ulRxARPReply', c_ulong),
    ('ulRxARPNAKs', c_ulong),
    ('ulRxInvalidMessage', c_ulong),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagATVCCLIPCounterInfo) == 96, sizeof(tagATVCCLIPCounterInfo)
assert alignment(tagATVCCLIPCounterInfo) == 4, alignment(tagATVCCLIPCounterInfo)
ATVCCLIPCounterInfo = tagATVCCLIPCounterInfo
class tagATPortCLIPCounterInfo(Structure):
    pass
tagATPortCLIPCounterInfo._fields_ = [
    ('u64RxInARPRequest', U64),
    ('u64TxInARPRequest', U64),
    ('u64RxInARPReply', U64),
    ('u64TxInARPReply', U64),
    ('u64RxARPRequest', U64),
    ('u64RxARPReply', U64),
    ('u64RxARPNAKs', U64),
    ('u64RxInvalidMessage', U64),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagATPortCLIPCounterInfo) == 128, sizeof(tagATPortCLIPCounterInfo)
assert alignment(tagATPortCLIPCounterInfo) == 4, alignment(tagATPortCLIPCounterInfo)
ATPortCLIPCounterInfo = tagATPortCLIPCounterInfo
class tagATModifyVCArray(Structure):
    pass
tagATModifyVCArray._fields_ = [
    ('ulIndex', c_ulong),
    ('ulCount', c_ulong),
    ('ulField', c_ulong),
    ('ulData', c_ulong * 8192),
    ('ucReserved', c_ubyte * 24),
]
assert sizeof(tagATModifyVCArray) == 32804, sizeof(tagATModifyVCArray)
assert alignment(tagATModifyVCArray) == 4, alignment(tagATModifyVCArray)
ATModifyVCArray = tagATModifyVCArray

# values for enumeration 'LINK_PORT_TYPE'
LINK_PORT_TYPE = c_int # enum
class CaptureStructure(Structure):
    pass
CaptureStructure._fields_ = [
    ('Offset', c_uint),
    ('Range', c_uint),
    ('Filter', c_int),
    ('Port', c_int),
    ('BufferMode', c_int),
    ('TimeTag', c_int),
    ('Mode', c_int),
]
assert sizeof(CaptureStructure) == 28, sizeof(CaptureStructure)
assert alignment(CaptureStructure) == 4, alignment(CaptureStructure)
class tagETCapturePacketInfo(Structure):
    pass
tagETCapturePacketInfo._fields_ = [
    ('ulPacketNumber', c_ulong),
    ('ulPacketLength', c_ulong),
    ('uiCaptureFlag', c_uint),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagETCapturePacketInfo) == 28, sizeof(tagETCapturePacketInfo)
assert alignment(tagETCapturePacketInfo) == 4, alignment(tagETCapturePacketInfo)
ETCapturePacketInfo = tagETCapturePacketInfo
class CollisionStructure(Structure):
    pass
CollisionStructure._fields_ = [
    ('Offset', c_uint),
    ('Duration', c_uint),
    ('Count', c_uint),
    ('Mode', c_int),
]
assert sizeof(CollisionStructure) == 16, sizeof(CollisionStructure)
assert alignment(CollisionStructure) == 4, alignment(CollisionStructure)
class CountStructure(Structure):
    pass
CountStructure._fields_ = [
    ('ERAEvent', c_ulong),
    ('ERARate', c_ulong),
    ('ERBEvent', c_ulong),
    ('ERBRate', c_ulong),
    ('TXAEvent', c_ulong),
    ('TXARate', c_ulong),
    ('TXBEvent', c_ulong),
    ('TXBRate', c_ulong),
    ('RXAEvent', c_ulong),
    ('RXARate', c_ulong),
    ('RXBEvent', c_ulong),
    ('RXBRate', c_ulong),
    ('CXAEvent', c_ulong),
    ('CXARate', c_ulong),
    ('CXBEvent', c_ulong),
    ('CXBRate', c_ulong),
    ('ALAEvent', c_ulong),
    ('ALARate', c_ulong),
    ('ALBEvent', c_ulong),
    ('ALBRate', c_ulong),
    ('UPAEvent', c_ulong),
    ('UPARate', c_ulong),
    ('UPBEvent', c_ulong),
    ('UPBRate', c_ulong),
    ('OPAEvent', c_ulong),
    ('OPARate', c_ulong),
    ('OPBEvent', c_ulong),
    ('OPBRate', c_ulong),
    ('MFAEvent', c_ulong),
    ('MFARate', c_ulong),
    ('MFBEvent', c_ulong),
    ('MFBRate', c_ulong),
]
assert sizeof(CountStructure) == 128, sizeof(CountStructure)
assert alignment(CountStructure) == 4, alignment(CountStructure)
class SwitchStructure(Structure):
    pass
SwitchStructure._fields_ = [
    ('Gap', c_ulong),
    ('Data', c_ulong),
    ('Disp', c_uint),
    ('Mode', c_uint),
    ('Run', c_int),
    ('Sel', c_int),
]
assert sizeof(SwitchStructure) == 24, sizeof(SwitchStructure)
assert alignment(SwitchStructure) == 4, alignment(SwitchStructure)
class TimeStructure(Structure):
    pass
TimeStructure._fields_ = [
    ('days', c_uint),
    ('hours', c_uint),
    ('minutes', c_uint),
    ('seconds', c_uint),
    ('milliseconds', c_uint),
    ('microseconds', c_uint),
]
assert sizeof(TimeStructure) == 24, sizeof(TimeStructure)
assert alignment(TimeStructure) == 4, alignment(TimeStructure)
class TriggerStructure(Structure):
    pass
TriggerStructure._fields_ = [
    ('Offset', c_uint),
    ('Range', c_int),
    ('Pattern', c_int * 12),
]
assert sizeof(TriggerStructure) == 56, sizeof(TriggerStructure)
assert alignment(TriggerStructure) == 4, alignment(TriggerStructure)
class VFDStructure(Structure):
    pass
VFDStructure._fields_ = [
    ('Offset', c_uint),
    ('Range', c_uint),
    ('Start', c_int * 4096),
    ('Increment', c_int * 4096),
]
assert sizeof(VFDStructure) == 32776, sizeof(VFDStructure)
assert alignment(VFDStructure) == 4, alignment(VFDStructure)
class HTVFDStructure(Structure):
    pass
HTVFDStructure._fields_ = [
    ('Configuration', c_int),
    ('Range', c_int),
    ('Offset', c_int),
    ('Data', POINTER(c_int)),
    ('DataCount', c_int),
]
assert sizeof(HTVFDStructure) == 20, sizeof(HTVFDStructure)
assert alignment(HTVFDStructure) == 4, alignment(HTVFDStructure)
class TErrorStructure(Structure):
    pass
BOOL = c_int
TErrorStructure._fields_ = [
    ('AlignError', BOOL),
    ('AlignCount', c_int),
    ('DribbleError', BOOL),
    ('DribbleCount', c_int),
    ('CRCError', BOOL),
]
assert sizeof(TErrorStructure) == 20, sizeof(TErrorStructure)
assert alignment(TErrorStructure) == 4, alignment(TErrorStructure)
class HTCountStructure(Structure):
    pass
HTCountStructure._fields_ = [
    ('RcvPkt', c_ulong),
    ('TmtPkt', c_ulong),
    ('Collision', c_ulong),
    ('RcvTrig', c_ulong),
    ('RcvByte', c_ulong),
    ('CRC', c_ulong),
    ('Align', c_ulong),
    ('Oversize', c_ulong),
    ('Undersize', c_ulong),
    ('TmtPktRate', c_ulong),
    ('RcvPktRate', c_ulong),
    ('CRCRate', c_ulong),
    ('OversizeRate', c_ulong),
    ('UndersizeRate', c_ulong),
    ('CollisionRate', c_ulong),
    ('AlignRate', c_ulong),
    ('RcvTrigRate', c_ulong),
    ('RcvByteRate', c_ulong),
]
assert sizeof(HTCountStructure) == 72, sizeof(HTCountStructure)
assert alignment(HTCountStructure) == 4, alignment(HTCountStructure)
class HTTriggerStructure(Structure):
    pass
HTTriggerStructure._fields_ = [
    ('Offset', c_uint),
    ('Range', c_int),
    ('Pattern', c_int * 6),
]
assert sizeof(HTTriggerStructure) == 32, sizeof(HTTriggerStructure)
assert alignment(HTTriggerStructure) == 4, alignment(HTTriggerStructure)
class TriggerMaskStructure(Structure):
    pass
TriggerMaskStructure._fields_ = [
    ('Bit_Offset', c_uint),
    ('Bit_Range', c_int),
    ('Trig_Pattern', c_int * 6),
    ('Bit_Mask', c_int * 6),
]
assert sizeof(TriggerMaskStructure) == 56, sizeof(TriggerMaskStructure)
assert alignment(TriggerMaskStructure) == 4, alignment(TriggerMaskStructure)
class HTLatencyStructure(Structure):
    pass
HTLatencyStructure._fields_ = [
    ('Range', c_int),
    ('Offset', c_int),
    ('iData', c_int * 12),
    ('ulLatency', c_ulong),
]
assert sizeof(HTLatencyStructure) == 60, sizeof(HTLatencyStructure)
assert alignment(HTLatencyStructure) == 4, alignment(HTLatencyStructure)
class EnhancedCounterStructure(Structure):
    pass
EnhancedCounterStructure._fields_ = [
    ('iMode', c_int),
    ('iPortType', c_int),
    ('ulMask1', c_ulong),
    ('ulMask2', c_ulong),
    ('ulData', c_ulong * 64),
]
assert sizeof(EnhancedCounterStructure) == 272, sizeof(EnhancedCounterStructure)
assert alignment(EnhancedCounterStructure) == 4, alignment(EnhancedCounterStructure)
class FirmwareVersionStructure(Structure):
    pass
FirmwareVersionStructure._fields_ = [
    ('ReleaseType', c_int),
    ('MajorNumber', c_int),
    ('MinorNumber', c_int),
    ('BuildNumber', c_int),
    ('PatchNumber', c_int),
]
assert sizeof(FirmwareVersionStructure) == 20, sizeof(FirmwareVersionStructure)
assert alignment(FirmwareVersionStructure) == 4, alignment(FirmwareVersionStructure)
class CardFWVersionStructure(Structure):
    pass
CardFWVersionStructure._fields_ = [
    ('uiReleaseType', c_ushort),
    ('uiMajorNumber', c_ushort),
    ('uiMinorNumber', c_ushort),
    ('uiBuildNumber', c_ushort),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(CardFWVersionStructure) == 24, sizeof(CardFWVersionStructure)
assert alignment(CardFWVersionStructure) == 2, alignment(CardFWVersionStructure)
class tagNSIPAddress(Structure):
    pass
tagNSIPAddress._fields_ = [
    ('ucIPAddress', c_ubyte * 4),
]
assert sizeof(tagNSIPAddress) == 4, sizeof(tagNSIPAddress)
assert alignment(tagNSIPAddress) == 1, alignment(tagNSIPAddress)
NSIPAddress = tagNSIPAddress
class tagHTSlotSharingStructure(Structure):
    pass
tagHTSlotSharingStructure._fields_ = [
    ('uiNumUsers', c_ushort),
    ('User', NSIPAddress * 4),
]
assert sizeof(tagHTSlotSharingStructure) == 18, sizeof(tagHTSlotSharingStructure)
assert alignment(tagHTSlotSharingStructure) == 2, alignment(tagHTSlotSharingStructure)
HTSlotSharingStructure = tagHTSlotSharingStructure
class tagNSFlashData(Structure):
    pass
tagNSFlashData._fields_ = [
    ('uiDataCRC', c_ushort),
    ('uiDataID', c_ushort),
    ('uiDataFormatVersion', c_ushort),
    ('ucControllerProperties', c_ubyte),
    ('ucMaxUsersAllowed', c_ubyte),
    ('uiControllerAttributes', c_ushort),
    ('ucNumberOfPhysicalSlots', c_ubyte),
    ('ucNumberOfCardsPerSlot', c_ubyte),
    ('ulBaseAddressOfFirstCard', c_ulong),
    ('ulBaseAddressDelta', c_ulong),
    ('ucIPAddress', c_ubyte * 4),
    ('ucMACAddress', c_ubyte * 6),
    ('uiTCPListenPortNumber', c_ushort),
    ('ucProductFamilyID', c_ubyte),
    ('ucControllerUniqueID', c_ubyte),
    ('ulProductSerialNumber', c_ulong),
    ('szProductDescription', c_char * 60),
    ('ulIdleConnectionTimeout', c_ulong),
    ('ucReserved1', c_ubyte * 8),
    ('ucProductIDSupported', c_ubyte * 20),
    ('ulCustomerID', c_ulong),
    ('szSecurityPassword', c_char * 8),
    ('ulSecurityEncryption', c_ulong),
    ('ucSecurityLevel', c_ubyte),
    ('ucResetCard', c_ubyte),
    ('ucMaxTelnetSession', c_ubyte),
    ('ucNTPConfigure', c_ubyte),
    ('uiNTPTimeZone', c_ushort),
    ('NTPPeerIPAddress', NSIPAddress * 8),
    ('ucControllerNetmask', c_ubyte * 4),
    ('ucDefaultGateway', c_ubyte * 4),
    ('ucReservedForGateway', c_ubyte * 28),
    ('ucReserved2', c_ubyte * 6),
    ('ulManufactureTestVersion', c_ulong),
    ('szDateManufactured', c_char * 10),
    ('szSaleOrderNum', c_char * 16),
]
assert sizeof(tagNSFlashData) == 260, sizeof(tagNSFlashData)
assert alignment(tagNSFlashData) == 4, alignment(tagNSFlashData)
NSFlashData = tagNSFlashData
class TokenRingMACStructure(Structure):
    pass
TokenRingMACStructure._fields_ = [
    ('UseMAC', c_int),
    ('Stations', c_int),
    ('MACSrc', c_int * 6),
    ('MACDest', c_int * 6),
    ('FramesPerToken', c_int),
    ('FrameControl', c_int),
]
assert sizeof(TokenRingMACStructure) == 64, sizeof(TokenRingMACStructure)
assert alignment(TokenRingMACStructure) == 4, alignment(TokenRingMACStructure)
class TokenRingLLCStructure(Structure):
    pass
TokenRingLLCStructure._fields_ = [
    ('UseLLC', c_int),
    ('DSAP', c_int),
    ('SSAP', c_int),
    ('LLCCommand', c_int),
]
assert sizeof(TokenRingLLCStructure) == 16, sizeof(TokenRingLLCStructure)
assert alignment(TokenRingLLCStructure) == 4, alignment(TokenRingLLCStructure)
class TokenRingPropertyStructure(Structure):
    pass
TokenRingPropertyStructure._fields_ = [
    ('SpeedSetting', c_int),
    ('EarlyTokenRelease', c_int),
    ('DuplexMode', c_int),
    ('DeviceOrMAUMode', c_int),
]
assert sizeof(TokenRingPropertyStructure) == 16, sizeof(TokenRingPropertyStructure)
assert alignment(TokenRingPropertyStructure) == 4, alignment(TokenRingPropertyStructure)
class TokenRingAdvancedStructure(Structure):
    pass
TokenRingAdvancedStructure._fields_ = [
    ('UseHoldingGap', c_int),
    ('GapValue', c_int),
    ('GapScale', c_int),
    ('UseIntermediateFrameBits', c_int),
    ('UseAC', c_int),
    ('ACdata', c_int),
    ('AdvancedControl1', c_int),
    ('AdvancedControl2', c_int),
    ('AReserved1', c_ulong),
    ('AReserved2', c_ulong),
]
assert sizeof(TokenRingAdvancedStructure) == 40, sizeof(TokenRingAdvancedStructure)
assert alignment(TokenRingAdvancedStructure) == 4, alignment(TokenRingAdvancedStructure)
class VGCardPropertyStructure(Structure):
    pass
VGCardPropertyStructure._fields_ = [
    ('EndOrMasterMode', c_int),
    ('PriorityPromotion', c_int),
    ('EtherNetOrTokenRing', c_int),
]
assert sizeof(VGCardPropertyStructure) == 12, sizeof(VGCardPropertyStructure)
assert alignment(VGCardPropertyStructure) == 4, alignment(VGCardPropertyStructure)
NSErrorCallbackFunc = CFUNCTYPE(c_short, c_int, STRING)
class SetLatencyStructure(Structure):
    pass
SetLatencyStructure._fields_ = [
    ('Hub', c_int),
    ('TransmitSlot', c_int),
    ('ReceiveSlot', c_int * 20),
    ('Offset', c_int),
    ('Range', c_int),
    ('Pattern', c_ubyte * 12),
]
assert sizeof(SetLatencyStructure) == 108, sizeof(SetLatencyStructure)
assert alignment(SetLatencyStructure) == 4, alignment(SetLatencyStructure)
class tagETHTransmit(Structure):
    pass
tagETHTransmit._fields_ = [
    ('ucTransmitMode', c_ubyte),
    ('uiDataLength', c_ushort),
    ('ucDuplexMode', c_ubyte),
    ('ucSpeed', c_ubyte),
    ('uiCollisionBackoffAggressiveness', c_ushort),
    ('ulBurstCount', c_ulong),
    ('ulMultiBurstCount', c_ulong),
    ('ulInterFrameGap', c_ulong),
    ('uiInterFrameGapScale', c_ushort),
    ('ulInterBurstGap', c_ulong),
    ('uiInterBurstGapScale', c_ushort),
    ('ucRandomBackground', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucCRCErrors', c_ubyte),
    ('ucAlignErrors', c_ubyte),
    ('ucSymbolErrors', c_ubyte),
    ('uiDribbleBits', c_ushort),
    ('ucVFD1Mode', c_ubyte),
    ('uiVFD1Offset', c_ushort),
    ('iVFD1Range', c_short),
    ('ucVFD1Pattern', c_ubyte * 6),
    ('uiVFD1CycleCount', c_ushort),
    ('uiVFD1BlockCount', c_ushort),
    ('ucVFD2Mode', c_ubyte),
    ('uiVFD2Offset', c_ushort),
    ('iVFD2Range', c_short),
    ('ucVFD2Pattern', c_ubyte * 6),
    ('uiVFD2CycleCount', c_ushort),
    ('uiVFD2BlockCount', c_ushort),
    ('ucVFD3Mode', c_ubyte),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('uiVFD3DataCount', c_ushort),
    ('uiVFD3BlockCount', c_ushort),
    ('ucVFD3Buffer', c_ubyte * 2044),
    ('ucAntiPartitioningEnable', c_ubyte),
    ('ucJumboFrameEnable', c_ubyte),
    ('ucARPOptimizationEnable', c_ubyte),
    ('ucExtendedPPPoEEnable', c_ubyte),
    ('ucReserved', c_ubyte * 60),
]
assert sizeof(tagETHTransmit) == 2188, sizeof(tagETHTransmit)
assert alignment(tagETHTransmit) == 4, alignment(tagETHTransmit)
ETHTransmit = tagETHTransmit
class tagETHTrigger(Structure):
    pass
tagETHTrigger._fields_ = [
    ('ucTriggerMode', c_ubyte),
    ('uiTrigger1Offset', c_ushort),
    ('uiTrigger1Range', c_ushort),
    ('ucTrigger1Pattern', c_ubyte * 6),
    ('uiTrigger2Offset', c_ushort),
    ('uiTrigger2Range', c_ushort),
    ('ucTrigger2Pattern', c_ubyte * 6),
]
assert sizeof(tagETHTrigger) == 22, sizeof(tagETHTrigger)
assert alignment(tagETHTrigger) == 2, alignment(tagETHTrigger)
ETHTrigger = tagETHTrigger
class tagETHLatency(Structure):
    pass
tagETHLatency._fields_ = [
    ('uiMode', c_ushort),
    ('uiRange', c_ushort),
    ('uiOffset', c_ushort),
    ('ucPattern', c_ubyte * 12),
]
assert sizeof(tagETHLatency) == 18, sizeof(tagETHLatency)
assert alignment(tagETHLatency) == 2, alignment(tagETHLatency)
ETHLatency = tagETHLatency
class tagETHCollision(Structure):
    pass
tagETHCollision._fields_ = [
    ('uiOffset', c_uint),
    ('uiDuration', c_uint),
    ('uiCount', c_uint),
    ('uiMode', c_uint),
]
assert sizeof(tagETHCollision) == 16, sizeof(tagETHCollision)
assert alignment(tagETHCollision) == 4, alignment(tagETHCollision)
ETHCollision = tagETHCollision
class tagETHMII(Structure):
    pass
tagETHMII._fields_ = [
    ('uiAddress', c_ushort),
    ('uiRegister', c_ushort),
    ('uiValue', c_ushort),
]
assert sizeof(tagETHMII) == 6, sizeof(tagETHMII)
assert alignment(tagETHMII) == 2, alignment(tagETHMII)
ETHMII = tagETHMII
class tagFSTProtocolParameters(Structure):
    pass
FSTProtocolParameters = tagFSTProtocolParameters
ETHProtocolParameters = FSTProtocolParameters
class tagETHVLAN(Structure):
    pass
tagETHVLAN._fields_ = [
    ('uiTPID', c_ushort),
    ('ucPRI', c_ubyte),
    ('ucCFI', c_ubyte),
    ('uiVID', c_ushort),
]
assert sizeof(tagETHVLAN) == 6, sizeof(tagETHVLAN)
assert alignment(tagETHVLAN) == 2, alignment(tagETHVLAN)
ETHVLAN = tagETHVLAN
class tagETHLink(Structure):
    pass
tagETHLink._fields_ = [
    ('iSpeed', c_short),
    ('iDuplex', c_short),
    ('iFlowControl', c_short),
    ('iMode', c_short),
    ('iTimeout', c_short),
    ('iRetryDecision', c_short),
    ('iReserved', c_short * 1018),
]
assert sizeof(tagETHLink) == 2048, sizeof(tagETHLink)
assert alignment(tagETHLink) == 2, alignment(tagETHLink)
ETHLink = tagETHLink
class tagETHRSMII(Structure):
    pass
tagETHRSMII._fields_ = [
    ('ucRSMIISelect', c_ubyte),
    ('ucMDIOAccessSelect', c_ubyte),
    ('ucReserved', c_ubyte * 4),
]
assert sizeof(tagETHRSMII) == 6, sizeof(tagETHRSMII)
assert alignment(tagETHRSMII) == 1, alignment(tagETHRSMII)
ETHRSMII = tagETHRSMII
class tagETHCardInfo(Structure):
    pass
tagETHCardInfo._fields_ = [
    ('uiCardModel', c_ushort),
    ('szCardModel', c_char * 32),
    ('cPortID', c_char),
    ('uiPortType', c_ushort),
    ('ulPortProperties', c_ulong),
    ('ulHWVersions', c_ulong * 32),
]
assert sizeof(tagETHCardInfo) == 172, sizeof(tagETHCardInfo)
assert alignment(tagETHCardInfo) == 4, alignment(tagETHCardInfo)
ETHCardInfo = tagETHCardInfo
class tagETHCounterInfo(Structure):
    pass
tagETHCounterInfo._fields_ = [
    ('ulRxFrames', c_ulong),
    ('ulTxFrames', c_ulong),
    ('ulCollisions', c_ulong),
    ('ulRxTriggers', c_ulong),
    ('ulRxBytes', c_ulong),
    ('ulCRCErrors', c_ulong),
    ('ulAlignErrors', c_ulong),
    ('ulOversize', c_ulong),
    ('ulUndersize', c_ulong),
    ('ulTxFrameRate', c_ulong),
    ('ulRxFrameRate', c_ulong),
    ('ulCRCErrorRate', c_ulong),
    ('ulOversizeRate', c_ulong),
    ('ulUndersizeRate', c_ulong),
    ('ulCollisionErrorRate', c_ulong),
    ('ulAlignErrorRate', c_ulong),
    ('ulRxTriggerRate', c_ulong),
    ('ulRxByteRate', c_ulong),
]
assert sizeof(tagETHCounterInfo) == 72, sizeof(tagETHCounterInfo)
assert alignment(tagETHCounterInfo) == 4, alignment(tagETHCounterInfo)
ETHCounterInfo = tagETHCounterInfo
class tagETHEnhancedCounterInfo(Structure):
    pass
tagETHEnhancedCounterInfo._fields_ = [
    ('uiMode', c_uint),
    ('uiPortType', c_uint),
    ('ulMask1', c_ulong),
    ('ulMask2', c_ulong),
    ('ulData', c_ulong * 64),
]
assert sizeof(tagETHEnhancedCounterInfo) == 272, sizeof(tagETHEnhancedCounterInfo)
assert alignment(tagETHEnhancedCounterInfo) == 4, alignment(tagETHEnhancedCounterInfo)
ETHEnhancedCounterInfo = tagETHEnhancedCounterInfo
class tagETHEnhancedStatusInfo(Structure):
    pass
tagETHEnhancedStatusInfo._fields_ = [
    ('ulStatus', c_ulong),
]
assert sizeof(tagETHEnhancedStatusInfo) == 4, sizeof(tagETHEnhancedStatusInfo)
assert alignment(tagETHEnhancedStatusInfo) == 4, alignment(tagETHEnhancedStatusInfo)
ETHEnhancedStatusInfo = tagETHEnhancedStatusInfo
class tagETHLatencyInfo(Structure):
    pass
tagETHLatencyInfo._fields_ = [
    ('ulLatency', c_ulong),
]
assert sizeof(tagETHLatencyInfo) == 4, sizeof(tagETHLatencyInfo)
assert alignment(tagETHLatencyInfo) == 4, alignment(tagETHLatencyInfo)
ETHLatencyInfo = tagETHLatencyInfo
ETHMIIInfo = ETHMII
class tagETHExtendedCardInfo(Structure):
    pass
tagETHExtendedCardInfo._fields_ = [
    ('ulLinkStateChanges', c_ulong),
    ('ulTxMgmtFrames', c_ulong),
    ('ulRxMgmtFrames', c_ulong),
    ('ulRxARPRequests', c_ulong),
    ('ulTxARPRequests', c_ulong),
    ('ulTxARPReplies', c_ulong),
    ('ulRxARPReplies', c_ulong),
    ('ulTxPingReplies', c_ulong),
    ('ulTxPingRequests', c_ulong),
    ('ulRxPingRequests', c_ulong),
    ('ulRxPingReplies', c_ulong),
    ('ulRxVLANFrames', c_ulong),
    ('ulRxIPFrames', c_ulong),
    ('ulIPChecksumErrors', c_ulong),
    ('ulMgmtFrameCRCErrors', c_ulong),
    ('ulMgmtFrameIPChecksumErrors', c_ulong),
    ('ulMgmtFrameUnknown', c_ulong),
    ('ulTimecount', c_ulong),
    ('ulReceiveErrors', c_ulong),
    ('ulFalseCarrierSense', c_ulong),
    ('ulRxNOKs', c_ulong),
    ('ulExtendedPHYStatus', c_ulong),
    ('ulReserved', c_ulong * 2),
]
assert sizeof(tagETHExtendedCardInfo) == 96, sizeof(tagETHExtendedCardInfo)
assert alignment(tagETHExtendedCardInfo) == 4, alignment(tagETHExtendedCardInfo)
ETHExtendedCardInfo = tagETHExtendedCardInfo
class tagETHQoSCounterInfo(Structure):
    pass
tagETHQoSCounterInfo._fields_ = [
    ('u64RxTriggers', U64 * 8),
    ('ulReserved', c_ulong * 4),
]
assert sizeof(tagETHQoSCounterInfo) == 80, sizeof(tagETHQoSCounterInfo)
assert alignment(tagETHQoSCounterInfo) == 4, alignment(tagETHQoSCounterInfo)
ETHQoSCounterInfo = tagETHQoSCounterInfo
class tagETHExtendedCounterInfo(Structure):
    pass
tagETHExtendedCounterInfo._fields_ = [
    ('u64RxVLANFrames', U64),
    ('u64RxIPFrames', U64),
    ('u64RxIPChecksumErrors', U64),
    ('ulTxARPReplies', c_ulong),
    ('ulRxARPReplies', c_ulong),
    ('ulTxARPRequests', c_ulong),
    ('ulRxARPRequests', c_ulong),
    ('ulTxPingReplies', c_ulong),
    ('ulRxPingReplies', c_ulong),
    ('ulTxPingRequests', c_ulong),
    ('ulRxPingRequests', c_ulong),
    ('u64RxDataIntegrityErrors', U64),
    ('u64TxSignatureFrames', U64),
    ('u64RxSignatureFrames', U64),
    ('u64RxJumboFrames', U64),
    ('u64TxJumboFrames', U64),
    ('u64RxIPv6Frames', U64),
    ('u64RxMPLSFrames', U64),
    ('u64RxPauseFrames', U64),
    ('ulTxJumboRate', c_ulong),
    ('ulRxJumboRate', c_ulong),
]
assert sizeof(tagETHExtendedCounterInfo) == 128, sizeof(tagETHExtendedCounterInfo)
assert alignment(tagETHExtendedCounterInfo) == 4, alignment(tagETHExtendedCounterInfo)
ETHExtendedCounterInfo = tagETHExtendedCounterInfo
class tagINT64_T(Union):
    pass
class N10tagINT64_T3DOT_0E(Structure):
    pass
N10tagINT64_T3DOT_0E._fields_ = [
    ('low', c_ulong),
    ('high', c_long),
]
assert sizeof(N10tagINT64_T3DOT_0E) == 8, sizeof(N10tagINT64_T3DOT_0E)
assert alignment(N10tagINT64_T3DOT_0E) == 4, alignment(N10tagINT64_T3DOT_0E)
tagINT64_T._pack_ = 4
tagINT64_T._fields_ = [
    ('i64', N10tagINT64_T3DOT_0E),
    ('int64_t', c_longlong),
]
assert sizeof(tagINT64_T) == 8, sizeof(tagINT64_T)
assert alignment(tagINT64_T) == 4, alignment(tagINT64_T)
INT64_T = tagINT64_T
class tagHubSlotPort(Structure):
    pass
tagHubSlotPort._fields_ = [
    ('iHub', c_int),
    ('iSlot', c_int),
    ('iPort', c_int),
]
assert sizeof(tagHubSlotPort) == 12, sizeof(tagHubSlotPort)
assert alignment(tagHubSlotPort) == 4, alignment(tagHubSlotPort)
_HubSlotPort = tagHubSlotPort
class tagU8(Structure):
    pass
tagU8._fields_ = [
    ('uc', c_ubyte),
]
assert sizeof(tagU8) == 1, sizeof(tagU8)
assert alignment(tagU8) == 1, alignment(tagU8)
U8 = tagU8
class tagU16(Structure):
    pass
tagU16._fields_ = [
    ('ui', c_ushort),
]
assert sizeof(tagU16) == 2, sizeof(tagU16)
assert alignment(tagU16) == 2, alignment(tagU16)
U16 = tagU16
class tagU32(Structure):
    pass
tagU32._fields_ = [
    ('ul', c_ulong),
]
assert sizeof(tagU32) == 4, sizeof(tagU32)
assert alignment(tagU32) == 4, alignment(tagU32)
U32 = tagU32
class tagS8(Structure):
    pass
tagS8._fields_ = [
    ('c', c_char),
]
assert sizeof(tagS8) == 1, sizeof(tagS8)
assert alignment(tagS8) == 1, alignment(tagS8)
S8 = tagS8
class tagS16(Structure):
    pass
tagS16._fields_ = [
    ('i', c_short),
]
assert sizeof(tagS16) == 2, sizeof(tagS16)
assert alignment(tagS16) == 2, alignment(tagS16)
S16 = tagS16
class tagS32(Structure):
    pass
tagS32._fields_ = [
    ('l', c_long),
]
assert sizeof(tagS32) == 4, sizeof(tagS32)
assert alignment(tagS32) == 4, alignment(tagS32)
S32 = tagS32
class tagF32(Structure):
    pass
tagF32._fields_ = [
    ('f', c_float),
]
assert sizeof(tagF32) == 4, sizeof(tagF32)
assert alignment(tagF32) == 4, alignment(tagF32)
F32 = tagF32
class tagF64(Structure):
    pass
tagF64._pack_ = 4
tagF64._fields_ = [
    ('d', c_double),
]
assert sizeof(tagF64) == 8, sizeof(tagF64)
assert alignment(tagF64) == 4, alignment(tagF64)
F64 = tagF64
UChar = U8
UShort = U16
UInt = U16
ULong = U32
Char = S8
Short = S16
Int = S16
Long = S32
Float = F32
Double = F64
class tagFCPortConfig(Structure):
    pass
tagFCPortConfig._fields_ = [
    ('ucTopology', c_ubyte),
    ('ucSpeed', c_ubyte),
    ('ucDisableTimer', c_ubyte),
    ('ulRRDYGap', c_ulong),
    ('ulRRDYGapRandomEnable', c_ulong),
    ('ulRRDYGapSeed', c_ulong),
    ('ulRRDYGapMin', c_ulong),
    ('ulRRDYGapMax', c_ulong),
    ('ucAutoNegotiate', c_ubyte),
    ('uiBBCreditConfigRx', c_ushort),
    ('ucStatsMode', c_ubyte),
    ('ucReserved', c_ubyte * 15),
]
assert sizeof(tagFCPortConfig) == 44, sizeof(tagFCPortConfig)
assert alignment(tagFCPortConfig) == 4, alignment(tagFCPortConfig)
FCPortConfig = tagFCPortConfig
class tagFCPortConfigInfo(Structure):
    pass
tagFCPortConfigInfo._fields_ = [
    ('ucTopology', c_ubyte),
    ('ucSpeed', c_ubyte),
    ('ucDisableTimer', c_ubyte),
    ('ulRRDYGap', c_ulong),
    ('ulRRDYGapRandomEnable', c_ulong),
    ('ulRRDYGapSeed', c_ulong),
    ('ulRRDYGapMin', c_ulong),
    ('ulRRDYGapMax', c_ulong),
    ('ucAutoNegotiate', c_ubyte),
    ('uiBBCreditConfigRx', c_ushort),
    ('uiBBCreditConfigTx', c_ushort),
    ('uiBBCreditCurrentRx', c_ushort),
    ('uiBBCreditCurrentTx', c_ushort),
    ('ulRA_TOV', c_ulong),
    ('ulED_TOV', c_ulong),
    ('ucGBICType', c_ubyte),
    ('ucStatsMode', c_ubyte),
    ('ucReserved', c_ubyte * 15),
]
assert sizeof(tagFCPortConfigInfo) == 64, sizeof(tagFCPortConfigInfo)
assert alignment(tagFCPortConfigInfo) == 4, alignment(tagFCPortConfigInfo)
FCPortConfigInfo = tagFCPortConfigInfo
class tagFCStatus(Structure):
    pass
tagFCStatus._fields_ = [
    ('ulState', c_ulong),
    ('ulError', c_ulong),
    ('ulErrorExtendedInfo', c_ulong),
    ('ulErrorDetailedInfo', c_ulong),
    ('u64ErrorWWN', U64),
    ('ulLinkErrorSeen', c_ulong),
    ('uiErrorData', c_ushort),
    ('ucReserved', c_ubyte * 14),
]
assert sizeof(tagFCStatus) == 44, sizeof(tagFCStatus)
assert alignment(tagFCStatus) == 4, alignment(tagFCStatus)
FCStatus = tagFCStatus
class tagFCCounterInfo(Structure):
    pass
tagFCCounterInfo._fields_ = [
    ('ulRcvPkt', c_ulong),
    ('ulTmtPkt', c_ulong),
    ('ulCollision', c_ulong),
    ('ulRcvTrig', c_ulong),
    ('ulRcvByte', c_ulong),
    ('ulCRC', c_ulong),
    ('ulAlign', c_ulong),
    ('ulOversize', c_ulong),
    ('ulUndersize', c_ulong),
    ('ulRcvPktRate', c_ulong),
    ('ulTmtPktRate', c_ulong),
    ('ulCRCRate', c_ulong),
    ('ulOversizeRate', c_ulong),
    ('ulUndersizeRate', c_ulong),
    ('ulCollisionRate', c_ulong),
    ('ulAlignRate', c_ulong),
    ('ulRcvTrigRate', c_ulong),
    ('ulRcvByteRate', c_ulong),
    ('u64TxSigPkt', U64),
    ('u64RxSigPkt', U64),
    ('u64LinkTxWordErr', U64),
    ('ulLinkInit', c_ulong),
    ('ulLinkFailure', c_ulong),
    ('ulLinkLossOfSync', c_ulong),
    ('ulLinkLossOfSig', c_ulong),
    ('ulLinkReset', c_ulong),
    ('ulLinkPrimSeqErr', c_ulong),
    ('u64TxBytes', U64),
    ('u64TxClass2Frames', U64),
    ('u64TxClass3Frames', U64),
    ('u64TxClassFFrames', U64),
    ('u64TxOtherFrames', U64),
    ('u64TxClass2Bytes', U64),
    ('u64TxClass3Bytes', U64),
    ('u64TxClassFBytes', U64),
    ('u64TxOtherBytes', U64),
    ('u64RxClass2Frames', U64),
    ('u64RxClass3Frames', U64),
    ('u64RxClassFFrames', U64),
    ('u64RxOtherFrames', U64),
    ('u64RxClass2Bytes', U64),
    ('u64RxClass3Bytes', U64),
    ('u64RxClassFBytes', U64),
    ('u64RxOtherBytes', U64),
    ('ulTxByteRate', c_ulong),
    ('ulTxClass2FrameRate', c_ulong),
    ('ulTxClass3FrameRate', c_ulong),
    ('ulTxClassFFrameRate', c_ulong),
    ('ulTxOtherFrameRate', c_ulong),
    ('ulTxClass2ByteRate', c_ulong),
    ('ulTxClass3ByteRate', c_ulong),
    ('ulTxClassFByteRate', c_ulong),
    ('ulTxOtherByteRate', c_ulong),
    ('ulRxClass2FrameRate', c_ulong),
    ('ulRxClass3FrameRate', c_ulong),
    ('ulRxClassFFrameRate', c_ulong),
    ('ulRxOtherFrameRate', c_ulong),
    ('ulRxClass2ByteRate', c_ulong),
    ('ulRxClass3ByteRate', c_ulong),
    ('ulRxClassFByteRate', c_ulong),
    ('ulRxOtherByteRate', c_ulong),
    ('ulPLOGIsSent', c_ulong),
    ('ulPLOGIsRx', c_ulong),
    ('ulPLOGIAcceptsSent', c_ulong),
    ('ulPLOGIAccepts', c_ulong),
    ('ulPLOGIsReturned', c_ulong),
    ('ulFLOGIsSent', c_ulong),
    ('ulFLOGIAccepts', c_ulong),
    ('ulFLOGIRejects', c_ulong),
    ('ulFLOGITimeouts', c_ulong),
    ('ulFrameDiscarded', c_ulong),
    ('ulTxCutThroughFrames', c_ulong),
    ('ulRxCutThroughFrames', c_ulong),
    ('ulTxCutThroughBytes', c_ulong),
    ('ulRxCutThroughBytes', c_ulong),
    ('u64TxCreditUnavailable', U64),
    ('u64RxCreditUnavailable', U64),
    ('u64ThrottledCount', U64),
    ('ulCurrentTxBBCredit', c_ulong),
    ('ulCurrentRxBBCredit', c_ulong),
    ('ucReserved', c_ubyte * 96),
]
assert sizeof(tagFCCounterInfo) == 508, sizeof(tagFCCounterInfo)
assert alignment(tagFCCounterInfo) == 4, alignment(tagFCCounterInfo)
FCCounterInfo = tagFCCounterInfo
class tagFCConfig(Structure):
    pass
tagFCConfig._fields_ = [
    ('ucEnableSeqCnt', c_ubyte),
    ('ucCOS', c_ubyte),
    ('ucHalfDuplex', c_ubyte),
    ('ucVerifyAL_PD', c_ubyte),
    ('ucVerifyAL_PS', c_ubyte),
    ('ulSOF', c_ulong),
    ('ucR_CTL', c_ubyte),
    ('u64SourceWWN', U64),
    ('u64DestWWN', U64),
    ('uiCS_CTL', c_ushort),
    ('ucFCType', c_ubyte),
    ('ulF_CTL', c_ulong),
    ('ucSeqID', c_ubyte),
    ('ucDF_CTL', c_ubyte),
    ('uiSeqCnt', c_ushort),
    ('uiOX_ID', c_ushort),
    ('uiRX_ID', c_ushort),
    ('ulParameter', c_ulong),
    ('ulEOF', c_ulong),
    ('ucReserved', c_ubyte * 19),
]
assert sizeof(tagFCConfig) == 76, sizeof(tagFCConfig)
assert alignment(tagFCConfig) == 4, alignment(tagFCConfig)
FCConfig = tagFCConfig
class tagFCWWNCount(Structure):
    pass
tagFCWWNCount._fields_ = [
    ('ulWWNCount', c_ulong),
]
assert sizeof(tagFCWWNCount) == 4, sizeof(tagFCWWNCount)
assert alignment(tagFCWWNCount) == 4, alignment(tagFCWWNCount)
FCWWNCount = tagFCWWNCount
class tagFCWWN(Structure):
    pass
tagFCWWN._fields_ = [
    ('u64WWN', U64),
    ('ucSupportedCOS', c_ubyte),
    ('ucResponseCOS', c_ubyte),
    ('ucPublic', c_ubyte),
    ('ucRemote', c_ubyte),
    ('ulAddressID', c_ulong),
    ('ucReserved', c_ubyte * 4),
]
assert sizeof(tagFCWWN) == 20, sizeof(tagFCWWN)
assert alignment(tagFCWWN) == 4, alignment(tagFCWWN)
FCWWN = tagFCWWN
class tagStreamFC(Structure):
    pass
tagStreamFC._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('ucTagField', c_ubyte),
    ('ucEnableSeqCnt', c_ubyte),
    ('ucCOS', c_ubyte),
    ('ucDuplexMode', c_ubyte),
    ('ucVerifyAL_PD', c_ubyte),
    ('ucVerifyAL_PS', c_ubyte),
    ('ulSOF', c_ulong),
    ('ucR_CTL', c_ubyte),
    ('u64SourceWWN', U64),
    ('u64DestWWN', U64),
    ('uiCS_CTL', c_ushort),
    ('ucFCType', c_ubyte),
    ('ulF_CTL', c_ulong),
    ('ucSeqID', c_ubyte),
    ('ucDF_CTL', c_ubyte),
    ('uiSeqCnt', c_ushort),
    ('uiOX_ID', c_ushort),
    ('uiRX_ID', c_ushort),
    ('ulParameter', c_ulong),
    ('ulEOF', c_ulong),
    ('uiPayLoadLength', c_ushort),
    ('ProtocolHeader', c_ubyte * 28),
    ('ucReserved', c_ubyte * 74),
]
assert sizeof(tagStreamFC) == 164, sizeof(tagStreamFC)
assert alignment(tagStreamFC) == 4, alignment(tagStreamFC)
StreamFC = tagStreamFC
class tagStreamFC128(Structure):
    pass
tagStreamFC128._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('ucTagField', c_ubyte),
    ('ucEnableSeqCnt', c_ubyte),
    ('ucCOS', c_ubyte),
    ('ucDuplexMode', c_ubyte),
    ('ucVerifyAL_PD', c_ubyte),
    ('ucVerifyAL_PS', c_ubyte),
    ('ulSOF', c_ulong),
    ('ucR_CTL', c_ubyte),
    ('u64SourceWWN', U64),
    ('u64DestWWN', U64),
    ('uiCS_CTL', c_ushort),
    ('ucFCType', c_ubyte),
    ('ulF_CTL', c_ulong),
    ('ucSeqID', c_ubyte),
    ('ucDF_CTL', c_ubyte),
    ('uiSeqCnt', c_ushort),
    ('uiOX_ID', c_ushort),
    ('uiRX_ID', c_ushort),
    ('ulParameter', c_ulong),
    ('ulEOF', c_ulong),
    ('uiPayLoadLength', c_ushort),
    ('ProtocolHeader', c_ubyte * 92),
    ('ucReserved', c_ubyte * 74),
]
assert sizeof(tagStreamFC128) == 228, sizeof(tagStreamFC128)
assert alignment(tagStreamFC128) == 4, alignment(tagStreamFC128)
StreamFC128 = tagStreamFC128
class tagFCLinkDown(Structure):
    pass
tagFCLinkDown._fields_ = [
    ('ulDuration', c_ulong),
    ('ucReserved', c_ubyte * 40),
]
assert sizeof(tagFCLinkDown) == 44, sizeof(tagFCLinkDown)
assert alignment(tagFCLinkDown) == 4, alignment(tagFCLinkDown)
FCLinkDown = tagFCLinkDown
class tagFCTransmitMode(Structure):
    pass
tagFCTransmitMode._fields_ = [
    ('ucTxMode', c_ubyte),
    ('ucState', c_ubyte),
    ('ucEnablePublicDiscMode', c_ubyte),
    ('ucReserved', c_ubyte * 5),
]
assert sizeof(tagFCTransmitMode) == 8, sizeof(tagFCTransmitMode)
assert alignment(tagFCTransmitMode) == 1, alignment(tagFCTransmitMode)
FCTransmitMode = tagFCTransmitMode
class tagFCHBAConfig(Structure):
    pass
tagFCHBAConfig._fields_ = [
    ('ulState', c_ulong),
    ('ulInterStateTimer', c_ulong),
    ('ulErrorRetryCount', c_ulong),
    ('ulErrorRetryTimer', c_ulong),
    ('ulPollRetryCount', c_ulong),
    ('ulPollRetryTimer', c_ulong),
    ('ucReserved', c_ubyte * 32),
]
assert sizeof(tagFCHBAConfig) == 56, sizeof(tagFCHBAConfig)
assert alignment(tagFCHBAConfig) == 4, alignment(tagFCHBAConfig)
FCHBAConfig = tagFCHBAConfig
class tagFCCustomFrame(Structure):
    pass
tagFCCustomFrame._fields_ = [
    ('ulLength', c_ulong),
    ('ulTimeToWait', c_ulong),
    ('ulResponseTime', c_ulong),
    ('ucMessageType', c_ubyte),
    ('ucErrorCodeReturned', c_ubyte),
    ('ucPayLoad', c_ubyte * 256),
    ('ucReserved', c_ubyte * 28),
]
assert sizeof(tagFCCustomFrame) == 300, sizeof(tagFCCustomFrame)
assert alignment(tagFCCustomFrame) == 4, alignment(tagFCCustomFrame)
FCCustomFrame = tagFCCustomFrame
class tagFCFSPFConfig(Structure):
    pass
tagFCFSPFConfig._fields_ = [
    ('ucTopology', c_ubyte),
    ('ucSpeed', c_ubyte),
    ('uiBBCreditTx', c_ushort),
    ('uiBBCreditRx', c_ushort),
    ('uiRCFCapable', c_ushort),
    ('ulOUI', c_ulong),
    ('ucDomainManagerLogLevel', c_ubyte),
    ('ucPortManagerLogLevel', c_ubyte),
    ('ucTopologyManagerLogLevel', c_ubyte),
    ('ucZoneManagerLogLevel', c_ubyte),
    ('ucFSPFLogLevel', c_ubyte),
    ('ucNameServerLogLevel', c_ubyte),
    ('ucFabricConfigServerLogLevel', c_ubyte),
    ('ucInterOpMode', c_ubyte),
    ('ulResourceAllocTimeOut', c_ulong),
    ('ulErrorDetectTimeOut', c_ulong),
    ('ucMasterOrNot', c_ubyte),
    ('ucRoundTripTimeOut', c_ubyte),
    ('ucReserved', c_ubyte * 62),
]
assert sizeof(tagFCFSPFConfig) == 92, sizeof(tagFCFSPFConfig)
assert alignment(tagFCFSPFConfig) == 4, alignment(tagFCFSPFConfig)
FCFSPFConfig = tagFCFSPFConfig
class tagFCSwitchConfig(Structure):
    pass
tagFCSwitchConfig._fields_ = [
    ('u64SwitchName', U64),
    ('ucRequestedDomainID', c_ubyte),
    ('ucIndexOnPort', c_ubyte),
    ('ucPort', c_ubyte),
    ('ucReserved', c_ubyte),
]
assert sizeof(tagFCSwitchConfig) == 12, sizeof(tagFCSwitchConfig)
assert alignment(tagFCSwitchConfig) == 4, alignment(tagFCSwitchConfig)
FCSwitchConfig = tagFCSwitchConfig
class tagFCMultiSwitchConfig(Structure):
    pass
tagFCMultiSwitchConfig._fields_ = [
    ('ucCount', c_ubyte),
    ('ucIndex', c_ubyte),
    ('ucTopology', c_ubyte),
    ('ucCommitFlag', c_ubyte),
    ('ucTopologySpecificParam', c_ubyte),
    ('ucDefaultLinkCost', c_ubyte),
    ('ucDefaultLinkSpeed', c_ubyte),
    ('Switches', FCSwitchConfig * 150),
    ('ucReserved', c_ubyte * 65),
]
assert sizeof(tagFCMultiSwitchConfig) == 1876, sizeof(tagFCMultiSwitchConfig)
assert alignment(tagFCMultiSwitchConfig) == 4, alignment(tagFCMultiSwitchConfig)
FCMultiSwitchConfig = tagFCMultiSwitchConfig
class tagFCLinkConfig(Structure):
    pass
tagFCLinkConfig._fields_ = [
    ('ucSourceSwitchIndex', c_ubyte),
    ('ucSourceSwitchPort', c_ubyte),
    ('ucDestSwitchIndex', c_ubyte),
    ('ucDestSwitchPort', c_ubyte),
    ('ucLinkCost', c_ubyte),
    ('ucLinkSpeed', c_ubyte),
    ('ucReserved', c_ubyte * 2),
]
assert sizeof(tagFCLinkConfig) == 8, sizeof(tagFCLinkConfig)
assert alignment(tagFCLinkConfig) == 1, alignment(tagFCLinkConfig)
FCLinkConfig = tagFCLinkConfig
class tagFCFabricLinkConfig(Structure):
    pass
tagFCFabricLinkConfig._fields_ = [
    ('uiCount', c_ushort),
    ('ucOperation', c_ubyte),
    ('Link', FCLinkConfig * 225),
    ('ucReserved', c_ubyte * 65),
]
assert sizeof(tagFCFabricLinkConfig) == 1868, sizeof(tagFCFabricLinkConfig)
assert alignment(tagFCFabricLinkConfig) == 2, alignment(tagFCFabricLinkConfig)
FCFabricLinkConfig = tagFCFabricLinkConfig
class tagFCSwitchDestConfig(Structure):
    pass
tagFCSwitchDestConfig._fields_ = [
    ('ucDestSwitchIndex', c_ubyte),
    ('ucDestSwitchPort', c_ubyte),
    ('ucLinkCost', c_ubyte),
    ('ucLinkSpeed', c_ubyte),
]
assert sizeof(tagFCSwitchDestConfig) == 4, sizeof(tagFCSwitchDestConfig)
assert alignment(tagFCSwitchDestConfig) == 1, alignment(tagFCSwitchDestConfig)
FCSwitchDestConfig = tagFCSwitchDestConfig
class tagFCSwitchMultiLinkConfig(Structure):
    pass
tagFCSwitchMultiLinkConfig._fields_ = [
    ('uiCount', c_ushort),
    ('ucOperation', c_ubyte),
    ('ucSourceSwitchIndex', c_ubyte),
    ('ucSourceSwitchPort', c_ubyte),
    ('SwitchLinks', FCSwitchDestConfig * 450),
    ('ucReserved', c_ubyte * 67),
]
assert sizeof(tagFCSwitchMultiLinkConfig) == 1872, sizeof(tagFCSwitchMultiLinkConfig)
assert alignment(tagFCSwitchMultiLinkConfig) == 2, alignment(tagFCSwitchMultiLinkConfig)
FCSwitchMultiLinkConfig = tagFCSwitchMultiLinkConfig
class tagFCFSPFStatsConfig(Structure):
    pass
tagFCFSPFStatsConfig._fields_ = [
    ('uiPollingInterval', c_ushort),
    ('uiStatsType', c_ushort),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagFCFSPFStatsConfig) == 68, sizeof(tagFCFSPFStatsConfig)
assert alignment(tagFCFSPFStatsConfig) == 2, alignment(tagFCFSPFStatsConfig)
FCFSPFStatsConfig = tagFCFSPFStatsConfig
class tagFCFSPFRealTimeStats(Structure):
    pass
tagFCFSPFRealTimeStats._fields_ = [
    ('ulTimeStamp', c_ulong),
    ('ulRate', c_ulong),
]
assert sizeof(tagFCFSPFRealTimeStats) == 8, sizeof(tagFCFSPFRealTimeStats)
assert alignment(tagFCFSPFRealTimeStats) == 4, alignment(tagFCFSPFRealTimeStats)
FCFSPFRealTimeStats = tagFCFSPFRealTimeStats
class tagFCFSPFRealTimeStatsInfo(Structure):
    pass
tagFCFSPFRealTimeStatsInfo._fields_ = [
    ('ulType', c_ulong),
    ('ulCount', c_ulong),
    ('Stats', FCFSPFRealTimeStats * 255),
]
assert sizeof(tagFCFSPFRealTimeStatsInfo) == 2048, sizeof(tagFCFSPFRealTimeStatsInfo)
assert alignment(tagFCFSPFRealTimeStatsInfo) == 4, alignment(tagFCFSPFRealTimeStatsInfo)
FCFSPFRealTimeStatsInfo = tagFCFSPFRealTimeStatsInfo
class tagFCFSPFStatsInfo(Structure):
    pass
tagFCFSPFStatsInfo._fields_ = [
    ('u64TxELPS', U64),
    ('u64RxELPS', U64),
    ('u64TxESC', U64),
    ('u64RxESC', U64),
    ('u64TxEFPS', U64),
    ('u64RxEFPS', U64),
    ('u64RxDIAS', U64),
    ('u64TxRDI', U64),
    ('u64TxMR', U64),
    ('u64RxMR', U64),
    ('u64TxHLOS', U64),
    ('u64RxHLOS', U64),
    ('u64TxLSUS', U64),
    ('u64RxLSUS', U64),
    ('u64TxLSAS', U64),
    ('u64RxLSAS', U64),
    ('uiLNEDomainManagerState', c_ushort),
    ('uiLNEPortManagerState', c_ushort),
    ('uiLNEToplogyManagerState', c_ushort),
    ('uiLNEFSPFState', c_ushort),
    ('ucReserved', c_ubyte * 128),
]
assert sizeof(tagFCFSPFStatsInfo) == 264, sizeof(tagFCFSPFStatsInfo)
assert alignment(tagFCFSPFStatsInfo) == 4, alignment(tagFCFSPFStatsInfo)
FCFSPFStatsInfo = tagFCFSPFStatsInfo
class tagFCFlogi(Structure):
    pass
tagFCFlogi._fields_ = [
    ('StartOfFrame', c_ulong),
    ('R_CTL', c_ubyte),
    ('D_ID', c_ulong),
    ('CS_CTL', c_ubyte),
    ('S_ID', c_ulong),
    ('Type', c_ubyte),
    ('F_CTL', c_ulong),
    ('SEQ_ID', c_ubyte),
    ('DF_CTL', c_ubyte),
    ('SEQ_CNT', c_ushort),
    ('OX_ID', c_ushort),
    ('RX_ID', c_ushort),
    ('Parameter', c_ulong),
    ('CommandCode', c_ulong),
    ('HighVersion', c_ubyte),
    ('LowVersion', c_ubyte),
    ('BBCredit', c_ushort),
    ('Name', c_ubyte),
    ('BBM', c_ubyte),
    ('MaxRxSize', c_ushort),
    ('Reserved1', c_ulong),
    ('Reserved2', c_ulong),
    ('WWNhigh', c_ulong),
    ('WWNlow', c_ulong),
    ('Reserved3', c_ulong),
    ('Reserved4', c_ulong),
    ('Reserved5', c_ubyte * 32),
    ('C_3Val', c_ulong),
    ('Reserved6', c_ubyte * 44),
    ('EndOfFrame', c_ulong),
]
assert sizeof(tagFCFlogi) == 160, sizeof(tagFCFlogi)
assert alignment(tagFCFlogi) == 4, alignment(tagFCFlogi)
FCFlogi = tagFCFlogi
class tagFCPlogi(Structure):
    pass
tagFCPlogi._fields_ = [
    ('StartOfFrame', c_ulong),
    ('R_CTL', c_ubyte),
    ('D_ID', c_ulong),
    ('CS_CTL', c_ubyte),
    ('S_ID', c_ulong),
    ('Type', c_ubyte),
    ('F_CTL', c_ulong),
    ('SEQ_ID', c_ubyte),
    ('DF_CTL', c_ubyte),
    ('SEQ_CNT', c_ushort),
    ('OX_ID', c_ushort),
    ('RX_ID', c_ushort),
    ('Parameter', c_ulong),
    ('CommandCode', c_ulong),
    ('HighVersion', c_ubyte),
    ('LowVersion', c_ubyte),
    ('BBCredit', c_ushort),
    ('Name', c_ubyte),
    ('BBM', c_ubyte),
    ('MaxRxSize', c_ushort),
    ('NPTCS', c_ushort),
    ('ROIC', c_ushort),
    ('EDTOV', c_ulong),
    ('WWNhigh', c_ulong),
    ('WWNlow', c_ulong),
    ('Reserved3', c_ulong),
    ('Reserved4', c_ulong),
    ('Reserved5', c_ubyte * 32),
    ('C_3Val', c_ulong),
    ('Reserved6', c_ushort),
    ('C_3RxSize', c_ushort),
    ('C_3ConSeq', c_ushort),
    ('Reserved7', c_ushort),
    ('C_3OSPE', c_ushort),
    ('Reserved8', c_ushort),
    ('Reserved9', c_ubyte * 32),
    ('EndOfFrame', c_ulong),
]
assert sizeof(tagFCPlogi) == 160, sizeof(tagFCPlogi)
assert alignment(tagFCPlogi) == 4, alignment(tagFCPlogi)
FCPlogi = tagFCPlogi
class tagFCGetRPN_ID(Structure):
    pass
tagFCGetRPN_ID._fields_ = [
    ('StartOfFrame', c_ulong),
    ('R_CTL', c_ubyte),
    ('D_ID', c_ulong),
    ('CS_CTL', c_ubyte),
    ('S_ID', c_ulong),
    ('Type', c_ubyte),
    ('F_CTL', c_ulong),
    ('SEQ_ID', c_ubyte),
    ('DF_CTL', c_ubyte),
    ('SEQ_CNT', c_ushort),
    ('OX_ID', c_ushort),
    ('RX_ID', c_ushort),
    ('Parameter', c_ulong),
    ('Revision', c_ubyte),
    ('IN_ID', c_ulong),
    ('GS_Type', c_ubyte),
    ('GS_Subtype', c_ubyte),
    ('Options', c_ubyte),
    ('Reserved1', c_ubyte),
    ('Command_Code', c_ushort),
    ('MaximumSize', c_ushort),
    ('Reserved2', c_ubyte),
    ('ReasonCode', c_ubyte),
    ('Explanation', c_ubyte),
    ('VendorUnique', c_ubyte),
    ('Reserved3', c_ubyte),
    ('PortID', c_ulong),
    ('PortName', U64),
    ('EndOfFrame', c_ulong),
]
assert sizeof(tagFCGetRPN_ID) == 80, sizeof(tagFCGetRPN_ID)
assert alignment(tagFCGetRPN_ID) == 4, alignment(tagFCGetRPN_ID)
FCGetRPN_ID = tagFCGetRPN_ID
class tagFCLOG_Out(Structure):
    pass
tagFCLOG_Out._fields_ = [
    ('StartOfFrame', c_ulong),
    ('R_CTL', c_ubyte),
    ('D_ID', c_ulong),
    ('CS_CTL', c_ubyte),
    ('S_ID', c_ulong),
    ('Type', c_ubyte),
    ('F_CTL', c_ulong),
    ('SEQ_ID', c_ubyte),
    ('DF_CTL', c_ubyte),
    ('SEQ_CNT', c_ushort),
    ('OX_ID', c_ushort),
    ('RX_ID', c_ushort),
    ('Parameter', c_ulong),
    ('Command_Code', c_ulong),
    ('Reserved1', c_ubyte),
    ('PortID', c_ulong),
    ('PortName', U64),
    ('EndOfFrame', c_ulong),
]
assert sizeof(tagFCLOG_Out) == 64, sizeof(tagFCLOG_Out)
assert alignment(tagFCLOG_Out) == 4, alignment(tagFCLOG_Out)
FCLOG_Out = tagFCLOG_Out
class tagFCNameServer(Structure):
    pass
tagFCNameServer._fields_ = [
    ('StartOfFrame', c_ulong),
    ('R_CTL', c_ubyte),
    ('D_ID', c_ulong),
    ('CS_CTL', c_ubyte),
    ('S_ID', c_ulong),
    ('Type', c_ubyte),
    ('F_CTL', c_ulong),
    ('SEQ_ID', c_ubyte),
    ('DF_CTL', c_ubyte),
    ('SEQ_CNT', c_ushort),
    ('OX_ID', c_ushort),
    ('RX_ID', c_ushort),
    ('Parameter', c_ulong),
    ('Revision', c_ubyte),
    ('IN_ID', c_ulong),
    ('GS_Type', c_ubyte),
    ('GS_Subtype', c_ubyte),
    ('Options', c_ubyte),
    ('Reserved1', c_ubyte),
    ('Command_Code', c_ushort),
    ('MaximumSize', c_ushort),
    ('Reserved2', c_ubyte),
    ('ReasonCode', c_ubyte),
    ('Explanation', c_ubyte),
    ('VendorUnique', c_ubyte),
    ('TimeToWait', c_ulong),
    ('PayLoadLenght', c_ushort),
    ('PayLoad', c_ubyte * 208),
    ('EndOfFrame', c_ulong),
]
assert sizeof(tagFCNameServer) == 280, sizeof(tagFCNameServer)
assert alignment(tagFCNameServer) == 4, alignment(tagFCNameServer)
FCNameServer = tagFCNameServer
class tagFCGetNext(Structure):
    pass
tagFCGetNext._fields_ = [
    ('StartOfFrame', c_ulong),
    ('R_CTL', c_ubyte),
    ('D_ID', c_ulong),
    ('CS_CTL', c_ubyte),
    ('S_ID', c_ulong),
    ('Type', c_ubyte),
    ('F_CTL', c_ulong),
    ('SEQ_ID', c_ubyte),
    ('DF_CTL', c_ubyte),
    ('SEQ_CNT', c_ushort),
    ('OX_ID', c_ushort),
    ('RX_ID', c_ushort),
    ('Parameter', c_ulong),
    ('Revision', c_ubyte),
    ('IN_ID', c_ulong),
    ('GS_Type', c_ubyte),
    ('GS_Subtype', c_ubyte),
    ('Options', c_ubyte),
    ('Reserved1', c_ubyte),
    ('Command_Code', c_ushort),
    ('MaximumSize', c_ushort),
    ('Reserved2', c_ubyte),
    ('ReasonCode', c_ubyte),
    ('Explanation', c_ubyte),
    ('VendorUnique', c_ubyte),
    ('Reserved3', c_ubyte),
    ('PortID', c_ulong),
    ('EndOfFrame', c_ulong),
]
assert sizeof(tagFCGetNext) == 72, sizeof(tagFCGetNext)
assert alignment(tagFCGetNext) == 4, alignment(tagFCGetNext)
FCGetNext = tagFCGetNext
class tagFCGetCOS_ID(Structure):
    pass
tagFCGetCOS_ID._fields_ = [
    ('StartOfFrame', c_ulong),
    ('R_CTL', c_ubyte),
    ('D_ID', c_ulong),
    ('CS_CTL', c_ubyte),
    ('S_ID', c_ulong),
    ('Type', c_ubyte),
    ('F_CTL', c_ulong),
    ('SEQ_ID', c_ubyte),
    ('DF_CTL', c_ubyte),
    ('SEQ_CNT', c_ushort),
    ('OX_ID', c_ushort),
    ('RX_ID', c_ushort),
    ('Parameter', c_ulong),
    ('Revision', c_ubyte),
    ('IN_ID', c_ulong),
    ('GS_Type', c_ubyte),
    ('GS_Subtype', c_ubyte),
    ('Options', c_ubyte),
    ('Reserved1', c_ubyte),
    ('Command_Code', c_ushort),
    ('MaximumSize', c_ushort),
    ('Reserved2', c_ubyte),
    ('ReasonCode', c_ubyte),
    ('Explanation', c_ubyte),
    ('VendorUnique', c_ubyte),
    ('Reserved3', c_ubyte),
    ('PortID', c_ulong),
    ('EndOfFrame', c_ulong),
]
assert sizeof(tagFCGetCOS_ID) == 72, sizeof(tagFCGetCOS_ID)
assert alignment(tagFCGetCOS_ID) == 4, alignment(tagFCGetCOS_ID)
FCGetCOS_ID = tagFCGetCOS_ID
class tagFCGetGID_PN(Structure):
    pass
tagFCGetGID_PN._fields_ = [
    ('StartOfFrame', c_ulong),
    ('R_CTL', c_ubyte),
    ('D_ID', c_ulong),
    ('CS_CTL', c_ubyte),
    ('S_ID', c_ulong),
    ('Type', c_ubyte),
    ('F_CTL', c_ulong),
    ('SEQ_ID', c_ubyte),
    ('DF_CTL', c_ubyte),
    ('SEQ_CNT', c_ushort),
    ('OX_ID', c_ushort),
    ('RX_ID', c_ushort),
    ('Parameter', c_ulong),
    ('Revision', c_ubyte),
    ('IN_ID', c_ulong),
    ('GS_Type', c_ubyte),
    ('GS_Subtype', c_ubyte),
    ('Options', c_ubyte),
    ('Reserved1', c_ubyte),
    ('Command_Code', c_ushort),
    ('MaximumSize', c_ushort),
    ('Reserved2', c_ubyte),
    ('ReasonCode', c_ubyte),
    ('Explanation', c_ubyte),
    ('VendorUnique', c_ubyte),
    ('WWNhigh', c_ulong),
    ('WWNlow', c_ulong),
    ('EndOfFrame', c_ulong),
]
assert sizeof(tagFCGetGID_PN) == 72, sizeof(tagFCGetGID_PN)
assert alignment(tagFCGetGID_PN) == 4, alignment(tagFCGetGID_PN)
FCGetGID_PN = tagFCGetGID_PN
class tagFCSCReg(Structure):
    pass
tagFCSCReg._fields_ = [
    ('StartOfFrame', c_ulong),
    ('R_CTL', c_ubyte),
    ('D_ID', c_ulong),
    ('CS_CTL', c_ubyte),
    ('S_ID', c_ulong),
    ('Type', c_ubyte),
    ('F_CTL', c_ulong),
    ('SEQ_ID', c_ubyte),
    ('DF_CTL', c_ubyte),
    ('SEQ_CNT', c_ushort),
    ('OX_ID', c_ushort),
    ('RX_ID', c_ushort),
    ('Parameter', c_ulong),
    ('Command', c_ubyte),
    ('Reserved1', c_ubyte),
    ('Reserved2', c_ubyte),
    ('Reserved3', c_ubyte),
    ('Reserved4', c_ubyte),
    ('Reserved5', c_ubyte),
    ('Reserved6', c_ubyte),
    ('RegFunc', c_ubyte),
    ('EndOfFrame', c_ulong),
]
assert sizeof(tagFCSCReg) == 52, sizeof(tagFCSCReg)
assert alignment(tagFCSCReg) == 4, alignment(tagFCSCReg)
FCSCReg = tagFCSCReg
class tagFCNode(Structure):
    pass
tagFCNode._fields_ = [
    ('ucPortType', c_ubyte),
    ('ucClassofService', c_ubyte),
    ('ucIndex', c_ubyte),
    ('u64NodeName', U64),
    ('ulAddressID', c_ulong),
    ('ucIPAddress', c_ubyte * 4),
    ('ucReserved', c_ubyte),
]
assert sizeof(tagFCNode) == 24, sizeof(tagFCNode)
assert alignment(tagFCNode) == 4, alignment(tagFCNode)
FCNode = tagFCNode
class tagFCNodeConfig(Structure):
    pass
tagFCNodeConfig._fields_ = [
    ('ucOwnerSwitchIndex', c_ubyte),
    ('ucOwnerSwitchPort', c_ubyte),
    ('ucNodeCount', c_ubyte),
    ('ucStartNodeID', c_ubyte),
    ('NodeArray', FCNode * 90),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagFCNodeConfig) == 2228, sizeof(tagFCNodeConfig)
assert alignment(tagFCNodeConfig) == 4, alignment(tagFCNodeConfig)
FCNodeConfig = tagFCNodeConfig
class tagFCNameServerEventConfig(Structure):
    pass
tagFCNameServerEventConfig._fields_ = [
    ('ucDomainID', c_ubyte),
    ('ucAreaID', c_ubyte),
    ('ucNodeID', c_ubyte),
    ('ulType', c_ulong),
    ('ulParameter1', c_ulong),
    ('u64Parameter2', U64),
    ('ucReserved', c_ubyte * 256),
]
assert sizeof(tagFCNameServerEventConfig) == 276, sizeof(tagFCNameServerEventConfig)
assert alignment(tagFCNameServerEventConfig) == 4, alignment(tagFCNameServerEventConfig)
FCNameServerEventConfig = tagFCNameServerEventConfig
class tagFCDomainStats(Structure):
    pass
tagFCDomainStats._fields_ = [
    ('ulDomainID', c_ulong),
    ('u64Count', U64),
    ('u64AcceptCount', U64),
    ('u64RejectCount', U64),
    ('ulEntryCount', c_ulong),
    ('ucReserved', c_ubyte * 256),
]
assert sizeof(tagFCDomainStats) == 288, sizeof(tagFCDomainStats)
assert alignment(tagFCDomainStats) == 4, alignment(tagFCDomainStats)
FCDomainStats = tagFCDomainStats
class tagFCNameServerStatsInfo(Structure):
    pass
tagFCNameServerStatsInfo._fields_ = [
    ('ulType', c_ulong),
    ('DomainStatsArray', FCDomainStats * 40),
    ('ucReserved', c_ubyte * 256),
]
assert sizeof(tagFCNameServerStatsInfo) == 11780, sizeof(tagFCNameServerStatsInfo)
assert alignment(tagFCNameServerStatsInfo) == 4, alignment(tagFCNameServerStatsInfo)
FCNameServerStatsInfo = tagFCNameServerStatsInfo
class tagFCEPortSettingConfig(Structure):
    pass
tagFCEPortSettingConfig._fields_ = [
    ('ulr_a_tov', c_ulong),
    ('ule_d_tov', c_ulong),
    ('ucClassofService2Supported', c_ubyte),
    ('ucClassofService3Supported', c_ubyte),
    ('ucLRSupported', c_ubyte),
    ('ucESCSupported', c_ubyte),
    ('ulClassofService2FrameSize', c_ulong),
    ('ulClassofService3FrameSize', c_ulong),
    ('ulMaxClassofServiceFFrameSize', c_ulong),
    ('ulTimer1', c_ulong),
    ('ulTimer2', c_ulong),
    ('ulTimer3', c_ulong),
    ('ulTimer4', c_ulong),
    ('ulTimer5', c_ulong),
    ('ucDMThreshold', c_ubyte),
    ('ucFSPFTHreshold', c_ubyte),
    ('ucNSThreshold', c_ubyte),
    ('ucTestType', c_ubyte),
    ('ucReserved', c_ubyte * 252),
]
assert sizeof(tagFCEPortSettingConfig) == 300, sizeof(tagFCEPortSettingConfig)
assert alignment(tagFCEPortSettingConfig) == 4, alignment(tagFCEPortSettingConfig)
FCEPortSettingConfig = tagFCEPortSettingConfig
class tagFRLineCfg(Structure):
    pass
tagFRLineCfg._fields_ = [
    ('ulSpeed', c_ulong),
    ('ulProgBits', c_ulong),
    ('ulProgBitsLen', c_ulong),
    ('ucLineMode', c_ubyte),
    ('ucClocking', c_ubyte),
    ('ucClkPolarity', c_ubyte),
    ('ucEncoding', c_ubyte),
    ('ucGapCtl', c_ubyte),
    ('ucLoopbackOn', c_ubyte),
    ('ucCrcOff', c_ubyte),
    ('ucUseCRC32', c_ubyte),
    ('ucDataUnchanged', c_ubyte),
    ('ucDsrOn', c_ubyte),
    ('ucCtsOn', c_ubyte),
    ('ucDcdOn', c_ubyte),
    ('ucTmOn', c_ubyte),
    ('ucDtrOn', c_ubyte),
    ('ucRtsOn', c_ubyte),
    ('ucRdlOn', c_ubyte),
    ('ucLlbOn', c_ubyte),
    ('ucRxClocking', c_ubyte),
    ('ucRxClkPolarity', c_ubyte),
    ('ucReserved', c_ubyte * 13),
]
assert sizeof(tagFRLineCfg) == 44, sizeof(tagFRLineCfg)
assert alignment(tagFRLineCfg) == 4, alignment(tagFRLineCfg)
FRLineCfg = tagFRLineCfg
class tagFRT1E1LineCfg(Structure):
    pass
tagFRT1E1LineCfg._fields_ = [
    ('ucLineMode', c_ubyte),
    ('ucClocking', c_ubyte),
    ('ucDataEncoding', c_ubyte),
    ('ucGapCtl', c_ubyte),
    ('ucCrcOff', c_ubyte),
    ('ucUseCRC32', c_ubyte),
    ('ucDataUnchanged', c_ubyte),
    ('ucLoopbackEnable', c_ubyte),
    ('ucLineBuildout', c_ubyte),
    ('ucLineCoding', c_ubyte),
    ('ucLineFraming', c_ubyte),
    ('ucChannels', c_ubyte * 32),
    ('ucReserved', c_ubyte * 9),
]
assert sizeof(tagFRT1E1LineCfg) == 52, sizeof(tagFRT1E1LineCfg)
assert alignment(tagFRT1E1LineCfg) == 1, alignment(tagFRT1E1LineCfg)
FRT1E1LineCfg = tagFRT1E1LineCfg
class tagFRT1E1LineInfo(Structure):
    pass
tagFRT1E1LineInfo._fields_ = [
    ('uiAlarmCurrent', c_ushort),
    ('uiAlarmHistory', c_ushort),
    ('ulCodeVviolationC', c_ulong),
    ('ulFrameErrorC', c_ulong),
    ('ulSyncErrorC', c_ulong),
    ('ulCodeViolationR', c_ulong),
    ('ulFrameErrorR', c_ulong),
    ('ulSyncErrorR', c_ulong),
    ('reserve', c_ulong * 4),
]
assert sizeof(tagFRT1E1LineInfo) == 44, sizeof(tagFRT1E1LineInfo)
assert alignment(tagFRT1E1LineInfo) == 4, alignment(tagFRT1E1LineInfo)
FRT1E1LineInfo = tagFRT1E1LineInfo
class tagFRCardCfg(Structure):
    pass
tagFRCardCfg._fields_ = [
    ('ulMultiBurstCnt', c_ulong),
    ('ulBurstCnt', c_ulong),
    ('ulInterBurstGap', c_ulong),
    ('ulTransmitMode', c_ulong),
    ('ucCardNum', c_ubyte),
    ('ucGroupMember', c_ubyte),
    ('ucMACAddress', c_ubyte * 6),
    ('ucIPAddress', c_ubyte * 4),
    ('ucNetmask', c_ubyte * 4),
    ('ucDefaultGateway', c_ubyte * 4),
    ('ucPingTargetAddress', c_ubyte * 4),
    ('ucLatencyScaling', c_ubyte),
    ('ucHistogramType', c_ubyte),
    ('ucLmiOn', c_ubyte),
    ('ucSnmpFrames', c_ubyte),
    ('ucProtocolFrames', c_ubyte),
    ('ucPingFrames', c_ubyte),
    ('ucRipPeriod', c_ubyte),
    ('ucSnmpPeriod', c_ubyte),
    ('ucPingPeriod', c_ubyte),
    ('ucGeneralIPResponse', c_ubyte),
    ('ucEncapType', c_ubyte),
    ('reserve1', c_ubyte * 3),
    ('ucHistogramNoDE', c_ubyte),
    ('ucFrmDistType', c_ubyte),
    ('ucIntervalTime', c_ubyte),
    ('ucHistogramPerPVC', c_ubyte),
    ('ucReserved', c_ubyte * 11),
]
assert sizeof(tagFRCardCfg) == 72, sizeof(tagFRCardCfg)
assert alignment(tagFRCardCfg) == 4, alignment(tagFRCardCfg)
FRCardCfg = tagFRCardCfg
class tagFRCardProtoCfgParmType(Structure):
    pass
tagFRCardProtoCfgParmType._fields_ = [
    ('ucProtoStack', c_ubyte),
    ('ucEncapType', c_ubyte),
    ('pad', c_ubyte * 2),
    ('reserved', c_ulong * 10),
]
assert sizeof(tagFRCardProtoCfgParmType) == 44, sizeof(tagFRCardProtoCfgParmType)
assert alignment(tagFRCardProtoCfgParmType) == 4, alignment(tagFRCardProtoCfgParmType)
FRCardProtocolCfg = tagFRCardProtoCfgParmType
class tagFRLayer3LongLatencyDEInfo(Structure):
    pass
tagFRLayer3LongLatencyDEInfo._fields_ = [
    ('ulMinimum', c_ulong),
    ('ulMaximum', c_ulong),
    ('u64Total', U64),
    ('ulFrames', c_ulong),
    ('ulDEMinimum', c_ulong),
    ('ulDEMaximum', c_ulong),
    ('u64DETotal', U64),
    ('ulDEFrames', c_ulong),
]
assert sizeof(tagFRLayer3LongLatencyDEInfo) == 40, sizeof(tagFRLayer3LongLatencyDEInfo)
assert alignment(tagFRLayer3LongLatencyDEInfo) == 4, alignment(tagFRLayer3LongLatencyDEInfo)
FRLayer3LongLatencyDEInfo = tagFRLayer3LongLatencyDEInfo
class tagFRTriggerCfg(Structure):
    pass
tagFRTriggerCfg._fields_ = [
    ('ucEnable', c_ubyte),
    ('ucDirection', c_ubyte),
    ('ucCompCombo', c_ubyte),
    ('ucReserved1', c_ubyte),
    ('uiTrig1Offset', c_ushort),
    ('uiTrig1Range', c_ushort),
    ('ucTrig1Pattern', c_ubyte * 6),
    ('ucTrig1Mask', c_ubyte * 6),
    ('uiTrig2Offset', c_ushort),
    ('uiTrig2Range', c_ushort),
    ('ucTrig2Pattern', c_ubyte * 6),
    ('ucTrig2Mask', c_ubyte * 6),
    ('ucReserved', c_ubyte * 20),
]
assert sizeof(tagFRTriggerCfg) == 56, sizeof(tagFRTriggerCfg)
assert alignment(tagFRTriggerCfg) == 2, alignment(tagFRTriggerCfg)
FRTriggerCfg = tagFRTriggerCfg
class tagFRIPSubnetRegister(Structure):
    pass
tagFRIPSubnetRegister._fields_ = [
    ('uiIPSubnetId', c_ushort),
    ('ucIPAddress', c_ubyte * 4),
    ('ucNetmask', c_ubyte * 4),
    ('ucDefaultGateway', c_ubyte * 4),
]
assert sizeof(tagFRIPSubnetRegister) == 14, sizeof(tagFRIPSubnetRegister)
assert alignment(tagFRIPSubnetRegister) == 2, alignment(tagFRIPSubnetRegister)
FRIPSubnetRegister = tagFRIPSubnetRegister
class tagFRIPSubnetDeRegister(Structure):
    pass
tagFRIPSubnetDeRegister._fields_ = [
    ('uiSubnetCount', c_ushort),
    ('uiIPSubnetId', c_ushort),
]
assert sizeof(tagFRIPSubnetDeRegister) == 4, sizeof(tagFRIPSubnetDeRegister)
assert alignment(tagFRIPSubnetDeRegister) == 2, alignment(tagFRIPSubnetDeRegister)
FRIPSubnetDeRegister = tagFRIPSubnetDeRegister
class tagFRPvcTableEntry(Structure):
    pass
tagFRPvcTableEntry._fields_ = [
    ('ulCIR', c_ulong),
    ('uiDLCI', c_ushort),
    ('uiFrameSize', c_ushort),
    ('ulBc', c_ulong),
    ('ulAccessRate', c_ulong),
    ('ulBe', c_ulong),
    ('uiFrameRate', c_ushort),
    ('uiStreamCount', c_ushort),
    ('uiIPSubnetId', c_ushort),
    ('ucReserved', c_ubyte * 12),
]
assert sizeof(tagFRPvcTableEntry) == 40, sizeof(tagFRPvcTableEntry)
assert alignment(tagFRPvcTableEntry) == 4, alignment(tagFRPvcTableEntry)
FRPvcTableEntry = tagFRPvcTableEntry
class tagFRPvcStrmMapCfg(Structure):
    pass
tagFRPvcStrmMapCfg._fields_ = [
    ('ulStreamId', c_ulong),
    ('uiDLCI', c_ushort),
    ('uiVfdState', c_ushort),
    ('uiBgFillLen', c_ushort),
    ('uiMinFrameSize', c_ushort),
    ('uiMaxFrameSize', c_ushort),
    ('ucFcsError', c_ubyte),
    ('ucAbortFlag', c_ubyte),
    ('ucEncapType', c_ubyte),
    ('ucCR', c_ubyte),
    ('ucFECN', c_ubyte),
    ('ucBECN', c_ubyte),
    ('ucDE', c_ubyte),
    ('ucReserved1', c_ubyte),
    ('ucEncapHeader', c_ubyte * 16),
    ('ucReserved', c_ubyte * 12),
]
assert sizeof(tagFRPvcStrmMapCfg) == 52, sizeof(tagFRPvcStrmMapCfg)
assert alignment(tagFRPvcStrmMapCfg) == 4, alignment(tagFRPvcStrmMapCfg)
FRPvcStrmMapCfg = tagFRPvcStrmMapCfg
class tagFRLmiCfg(Structure):
    pass
tagFRLmiCfg._fields_ = [
    ('ucLinkManagement', c_ubyte),
    ('ucUNIMode', c_ubyte),
    ('ucNN1', c_ubyte),
    ('ucNN2', c_ubyte),
    ('ucNN3', c_ubyte),
    ('ucNN4', c_ubyte),
    ('ucNT1', c_ubyte),
    ('ucNT2', c_ubyte),
    ('ucNT3', c_ubyte),
]
assert sizeof(tagFRLmiCfg) == 9, sizeof(tagFRLmiCfg)
assert alignment(tagFRLmiCfg) == 1, alignment(tagFRLmiCfg)
FRLmiCfg = tagFRLmiCfg
class tagFRVersionInfo(Structure):
    pass
tagFRVersionInfo._fields_ = [
    ('uiMainFwVersion', c_ushort),
    ('uiBootFwVersion', c_ushort),
    ('uiFpgaVersion', c_ushort),
]
assert sizeof(tagFRVersionInfo) == 6, sizeof(tagFRVersionInfo)
assert alignment(tagFRVersionInfo) == 2, alignment(tagFRVersionInfo)
FRVersionInfo = tagFRVersionInfo
class tagFRLinkStatusInfo(Structure):
    pass
tagFRLinkStatusInfo._fields_ = [
    ('ulSpeed', c_ulong),
    ('ulReserved', c_ulong * 19),
]
assert sizeof(tagFRLinkStatusInfo) == 80, sizeof(tagFRLinkStatusInfo)
assert alignment(tagFRLinkStatusInfo) == 4, alignment(tagFRLinkStatusInfo)
FRLinkStatusInfo = tagFRLinkStatusInfo
class tagFRPVCStatusInfo(Structure):
    pass
tagFRPVCStatusInfo._fields_ = [
    ('ucBitMap', c_ubyte * 384),
]
assert sizeof(tagFRPVCStatusInfo) == 384, sizeof(tagFRPVCStatusInfo)
assert alignment(tagFRPVCStatusInfo) == 1, alignment(tagFRPVCStatusInfo)
FRPVCStatusInfo = tagFRPVCStatusInfo
class tagFRLinkInfo(Structure):
    pass
tagFRLinkInfo._fields_ = [
    ('ulTimestamp', c_ulong),
    ('ulRxFrameRate', c_ulong),
    ('ulRxByteRate', c_ulong),
    ('ulRxFcsErrRate', c_ulong),
    ('ulRxTriggerRate', c_ulong),
    ('ulRxAbortRate', c_ulong),
    ('ulRxInvLenErrRate', c_ulong),
    ('ulRxNonOctetAlignedErrRate', c_ulong),
    ('ulRxOverflowErrRate', c_ulong),
    ('ulRxFrames', c_ulong),
    ('ulRxBytes', c_ulong),
    ('ulRxFcs_err', c_ulong),
    ('ulRxTrigger', c_ulong),
    ('ulRxAbort', c_ulong),
    ('ulRxInvLenErr', c_ulong),
    ('ulRxNonOctetAlignedErr', c_ulong),
    ('ulRxOverflowErr', c_ulong),
    ('ulRxIdleSeq', c_ulong),
    ('ulRxDeFrames', c_ulong),
    ('ulRxBECNCount', c_ulong),
    ('ulRxFECNCount', c_ulong),
    ('ulRxInvalidPVC', c_ulong),
    ('ulRxTrigLatency', c_ulong),
    ('ulRxTags', c_ulong),
    ('ulRxStack', c_ulong),
    ('ulRxInvARPReq', c_ulong),
    ('ulRxARPReq', c_ulong),
    ('ulRxARPReply', c_ulong),
    ('ulRxPingReq', c_ulong),
    ('ulRxPingReply', c_ulong),
    ('ulTxFrameRate', c_ulong),
    ('ulTxByteRate', c_ulong),
    ('ulTxFcsErrRate', c_ulong),
    ('ulTxAbortRate', c_ulong),
    ('ulTxTriggerRate', c_ulong),
    ('ulTxFrames', c_ulong),
    ('ulTxBytes', c_ulong),
    ('ulTxFcsErr', c_ulong),
    ('ulTxAbort', c_ulong),
    ('ulTxTrigger', c_ulong),
    ('ulTxDeFrames', c_ulong),
    ('ulTxBECNFrames', c_ulong),
    ('ulTxFECNFrames', c_ulong),
    ('ulTxTrigLatency', c_ulong),
    ('ulTxStack', c_ulong),
    ('ulTxInvARPReq', c_ulong),
    ('ulTxARPReq', c_ulong),
    ('ulTxARPReply', c_ulong),
    ('ulTxPingReq', c_ulong),
    ('ulTxPingReply', c_ulong),
    ('ulReserved', c_ulong * 20),
]
assert sizeof(tagFRLinkInfo) == 280, sizeof(tagFRLinkInfo)
assert alignment(tagFRLinkInfo) == 4, alignment(tagFRLinkInfo)
FRLinkInfo = tagFRLinkInfo
class tagFRLmiInfo(Structure):
    pass
tagFRLmiInfo._fields_ = [
    ('ulConfiguredPvc', c_ulong),
    ('ulActivePvc', c_ulong),
    ('ulInactivePvc', c_ulong),
    ('ulDisabledPvc', c_ulong),
    ('ulTxStatusReq', c_ulong),
    ('ulTxStatusMsg', c_ulong),
    ('ulTxFullStatusReq', c_ulong),
    ('ulTxFullStatusMsg', c_ulong),
    ('ulTxStatusUpdate', c_ulong),
    ('ulRxStatusReq', c_ulong),
    ('ulRxStatusMsg', c_ulong),
    ('ulRxFullStatusReq', c_ulong),
    ('ulRxFullStatusMsg', c_ulong),
    ('ulRxStatusUpdate', c_ulong),
    ('ulPvcCongestion', c_ulong),
    ('ulNewPvc', c_ulong),
    ('ulPvcDeleted', c_ulong),
    ('ulPvcDeactivated', c_ulong),
    ('ulMulticastIe', c_ulong),
    ('ulInvalidFrame', c_ulong),
    ('ulReserved', c_ulong * 3),
]
assert sizeof(tagFRLmiInfo) == 92, sizeof(tagFRLmiInfo)
assert alignment(tagFRLmiInfo) == 4, alignment(tagFRLmiInfo)
FRLmiInfo = tagFRLmiInfo
class tagFRPvcMainInfo(Structure):
    pass
tagFRPvcMainInfo._fields_ = [
    ('uiPadding', c_ushort),
    ('uiDLCI', c_ushort),
    ('ulTxFrameRate', c_ulong),
    ('ulTxByteRate', c_ulong),
    ('ulTxFrames', c_ulong),
    ('ulTxBytes', c_ulong),
    ('ulTxDeFrames', c_ulong),
    ('ulTotFECNsSent', c_ulong),
    ('ulTotBECNsSent', c_ulong),
    ('ulTxFcsErr', c_ulong),
    ('ulTxAbort', c_ulong),
    ('ulRxFrameRate', c_ulong),
    ('ulRxByteRate', c_ulong),
    ('ulRxFrames', c_ulong),
    ('ulRxBytes', c_ulong),
    ('ulRxDeFrames', c_ulong),
    ('ulFECN', c_ulong),
    ('ulBECN', c_ulong),
    ('ulReserved', c_ulong * 4),
]
assert sizeof(tagFRPvcMainInfo) == 84, sizeof(tagFRPvcMainInfo)
assert alignment(tagFRPvcMainInfo) == 4, alignment(tagFRPvcMainInfo)
FRPvcMainInfo = tagFRPvcMainInfo
class tagFRStreamControl(Structure):
    pass
tagFRStreamControl._fields_ = [
    ('ulStreamId', c_ulong),
    ('ucEnable', c_ubyte),
    ('ucFcsErr', c_ubyte),
    ('ucAbortFlag', c_ubyte),
    ('ucReserved', c_ubyte),
    ('ulReserved', c_ulong * 4),
]
assert sizeof(tagFRStreamControl) == 24, sizeof(tagFRStreamControl)
assert alignment(tagFRStreamControl) == 4, alignment(tagFRStreamControl)
FRStreamControl = tagFRStreamControl
class tagFRPvcControl(Structure):
    pass
tagFRPvcControl._fields_ = [
    ('uiDLCI', c_ushort),
    ('ucEnable', c_ubyte),
    ('ucReserved', c_ubyte * 3),
    ('ulReserved', c_ulong * 4),
]
assert sizeof(tagFRPvcControl) == 24, sizeof(tagFRPvcControl)
assert alignment(tagFRPvcControl) == 4, alignment(tagFRPvcControl)
FRPvcControl = tagFRPvcControl
class tagFRGetCaptureCountInfo(Structure):
    pass
tagFRGetCaptureCountInfo._fields_ = [
    ('ulCaptureCnt', c_ulong),
]
assert sizeof(tagFRGetCaptureCountInfo) == 4, sizeof(tagFRGetCaptureCountInfo)
assert alignment(tagFRGetCaptureCountInfo) == 4, alignment(tagFRGetCaptureCountInfo)
FRGetCaptureCountInfo = tagFRGetCaptureCountInfo
class tagFRGetCaptureFrameCmdInfo(Structure):
    pass
tagFRGetCaptureFrameCmdInfo._fields_ = [
    ('ulFrameNum', c_ulong),
]
assert sizeof(tagFRGetCaptureFrameCmdInfo) == 4, sizeof(tagFRGetCaptureFrameCmdInfo)
assert alignment(tagFRGetCaptureFrameCmdInfo) == 4, alignment(tagFRGetCaptureFrameCmdInfo)
FRGetCaptureFrameCmdInfo = tagFRGetCaptureFrameCmdInfo
class tagFRReleaseCaptureFrameInfo(Structure):
    pass
tagFRReleaseCaptureFrameInfo._fields_ = [
    ('ulCaptureType', c_ulong),
]
assert sizeof(tagFRReleaseCaptureFrameInfo) == 4, sizeof(tagFRReleaseCaptureFrameInfo)
assert alignment(tagFRReleaseCaptureFrameInfo) == 4, alignment(tagFRReleaseCaptureFrameInfo)
FRReleaseCaptureFrameInfo = tagFRReleaseCaptureFrameInfo
class tagFRMemoryDumpInfo(Structure):
    pass
tagFRMemoryDumpInfo._fields_ = [
    ('ulAddr', c_ulong),
    ('ulLen', c_ulong),
]
assert sizeof(tagFRMemoryDumpInfo) == 8, sizeof(tagFRMemoryDumpInfo)
assert alignment(tagFRMemoryDumpInfo) == 4, alignment(tagFRMemoryDumpInfo)
FRMemoryDumpInfo = tagFRMemoryDumpInfo
class tagFRAssignAddress(Structure):
    pass
tagFRAssignAddress._fields_ = [
    ('ucMACAddress', c_ubyte * 6),
    ('ucIPAddress', c_ubyte * 4),
    ('ucNetmask', c_ubyte * 4),
    ('ucDefaultGateway', c_ubyte * 4),
    ('ucPingTargetAddress', c_ubyte * 4),
    ('ucHistogramType', c_ubyte),
    ('ucSnmpArp', c_ubyte),
    ('ucProtocolFrames', c_ubyte),
    ('ucPingFrames', c_ubyte),
    ('ucRipPeriod', c_ubyte),
    ('ucSnmpPeriod', c_ubyte),
    ('ucPingPeriod', c_ubyte),
]
assert sizeof(tagFRAssignAddress) == 29, sizeof(tagFRAssignAddress)
assert alignment(tagFRAssignAddress) == 1, alignment(tagFRAssignAddress)
FRAssignAddress = tagFRAssignAddress
class tagFRHistogram(Structure):
    pass
tagFRHistogram._fields_ = [
    ('ulHistType', c_ulong),
    ('ulTimeBucket', c_ulong),
    ('ulLatRef', c_ulong * 16),
]
assert sizeof(tagFRHistogram) == 72, sizeof(tagFRHistogram)
assert alignment(tagFRHistogram) == 4, alignment(tagFRHistogram)
FRHistogram = tagFRHistogram
class tagFRHistReset(Structure):
    pass
tagFRHistReset._fields_ = [
    ('ulHistType', c_ulong),
]
assert sizeof(tagFRHistReset) == 4, sizeof(tagFRHistReset)
assert alignment(tagFRHistReset) == 4, alignment(tagFRHistReset)
FRHistReset = tagFRHistReset
class tagFRHistScale(Structure):
    pass
tagFRHistScale._fields_ = [
    ('ulScale', c_ulong),
]
assert sizeof(tagFRHistScale) == 4, sizeof(tagFRHistScale)
assert alignment(tagFRHistScale) == 4, alignment(tagFRHistScale)
FRHistScale = tagFRHistScale
class tagFRHistTypeInfo(Structure):
    pass
tagFRHistTypeInfo._fields_ = [
    ('ulHistType', c_ulong),
    ('ulStart', c_ulong),
    ('ulRange', c_ulong),
]
assert sizeof(tagFRHistTypeInfo) == 12, sizeof(tagFRHistTypeInfo)
assert alignment(tagFRHistTypeInfo) == 4, alignment(tagFRHistTypeInfo)
FRHistDataInfo = tagFRHistTypeInfo
class tagFRIntervalTimeInfo(Structure):
    pass
tagFRIntervalTimeInfo._fields_ = [
    ('ulTxStart', c_ulong),
    ('ulTxStop', c_ulong),
    ('ulRxStart', c_ulong),
    ('ulRxStop', c_ulong),
]
assert sizeof(tagFRIntervalTimeInfo) == 16, sizeof(tagFRIntervalTimeInfo)
assert alignment(tagFRIntervalTimeInfo) == 4, alignment(tagFRIntervalTimeInfo)
FRIntervalTimeInfo = tagFRIntervalTimeInfo
class tagWNCardCfg(Structure):
    pass
tagWNCardCfg._fields_ = [
    ('ulSlotNo', c_ulong),
    ('ulBoxTag', c_ulong),
    ('ucReserved', c_ubyte * 88),
]
assert sizeof(tagWNCardCfg) == 96, sizeof(tagWNCardCfg)
assert alignment(tagWNCardCfg) == 4, alignment(tagWNCardCfg)
WNCardCfg = tagWNCardCfg
class tagWNDS3LineCfg(Structure):
    pass
tagWNDS3LineCfg._fields_ = [
    ('ulCount', c_ulong),
    ('ucLineFraming', c_ubyte),
    ('ucClocking', c_ubyte),
    ('ucLoopbackEnable', c_ubyte),
    ('ucLineEncoding', c_ubyte),
    ('ucChannelized', c_ubyte),
    ('ucActive', c_ubyte),
    ('ucLineBuildout', c_ubyte),
    ('ucReserved', c_ubyte * 9),
]
assert sizeof(tagWNDS3LineCfg) == 20, sizeof(tagWNDS3LineCfg)
assert alignment(tagWNDS3LineCfg) == 4, alignment(tagWNDS3LineCfg)
WNDS3LineCfg = tagWNDS3LineCfg
class tagWNDS3LineCtrl(Structure):
    pass
tagWNDS3LineCtrl._fields_ = [
    ('ulCount', c_ulong),
    ('ucEnable', c_ubyte),
    ('ucReserved', c_ubyte * 7),
]
assert sizeof(tagWNDS3LineCtrl) == 12, sizeof(tagWNDS3LineCtrl)
assert alignment(tagWNDS3LineCtrl) == 4, alignment(tagWNDS3LineCtrl)
WNDS3LineCtrl = tagWNDS3LineCtrl
class tagWNT1E1LineCfg(Structure):
    pass
tagWNT1E1LineCfg._fields_ = [
    ('ulLineNo', c_ulong),
    ('ulCount', c_ulong),
    ('ucClocking', c_ubyte),
    ('ucLoopbackEnable', c_ubyte),
    ('ucLineBuildout', c_ubyte),
    ('ucLineEncoding', c_ubyte),
    ('ucLineFraming', c_ubyte),
    ('ucActive', c_ubyte),
    ('ucReserved', c_ubyte * 6),
]
assert sizeof(tagWNT1E1LineCfg) == 20, sizeof(tagWNT1E1LineCfg)
assert alignment(tagWNT1E1LineCfg) == 4, alignment(tagWNT1E1LineCfg)
WNT1E1LineCfg = tagWNT1E1LineCfg
class tagWNT1E1LineCtrl(Structure):
    pass
tagWNT1E1LineCtrl._fields_ = [
    ('ulLineNo', c_ulong),
    ('ulCount', c_ulong),
    ('ucEnable', c_ubyte),
    ('ucReserved', c_ubyte * 7),
]
assert sizeof(tagWNT1E1LineCtrl) == 16, sizeof(tagWNT1E1LineCtrl)
assert alignment(tagWNT1E1LineCtrl) == 4, alignment(tagWNT1E1LineCtrl)
WNT1E1LineCtrl = tagWNT1E1LineCtrl
class tagWNT1E1LineDel(Structure):
    pass
tagWNT1E1LineDel._fields_ = [
    ('ulLineNo', c_ulong),
    ('ulCount', c_ulong),
]
assert sizeof(tagWNT1E1LineDel) == 8, sizeof(tagWNT1E1LineDel)
assert alignment(tagWNT1E1LineDel) == 4, alignment(tagWNT1E1LineDel)
WNT1E1LineDel = tagWNT1E1LineDel
class tagWNChannelPhysCfg(Structure):
    pass
tagWNChannelPhysCfg._fields_ = [
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ulCount', c_ulong),
    ('ucTimeSlots', c_ubyte * 32),
    ('ucMinFlags', c_ubyte),
    ('ucCRCOff', c_ubyte),
    ('ucUseCRC32', c_ubyte),
    ('ucDataUnchanged', c_ubyte),
    ('ucReserved', c_ubyte * 8),
]
assert sizeof(tagWNChannelPhysCfg) == 56, sizeof(tagWNChannelPhysCfg)
assert alignment(tagWNChannelPhysCfg) == 4, alignment(tagWNChannelPhysCfg)
WNChannelPhysCfg = tagWNChannelPhysCfg
class tagWNChannelAttribCfg(Structure):
    pass
tagWNChannelAttribCfg._fields_ = [
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ulCount', c_ulong),
    ('ucEnable', c_ubyte),
    ('ucConnType', c_ubyte),
    ('ucTXMode', c_ubyte),
    ('ucFCSErr', c_ubyte),
    ('ucAbortFlag', c_ubyte),
    ('ulBurstCount', c_ulong),
    ('ucReserved', c_ubyte * 27),
]
assert sizeof(tagWNChannelAttribCfg) == 52, sizeof(tagWNChannelAttribCfg)
assert alignment(tagWNChannelAttribCfg) == 4, alignment(tagWNChannelAttribCfg)
WNChannelAttribCfg = tagWNChannelAttribCfg
class tagWNChannelCtrl(Structure):
    pass
tagWNChannelCtrl._fields_ = [
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ulCount', c_ulong),
    ('ucEnable', c_ubyte),
    ('ucReserved', c_ubyte * 7),
]
assert sizeof(tagWNChannelCtrl) == 20, sizeof(tagWNChannelCtrl)
assert alignment(tagWNChannelCtrl) == 4, alignment(tagWNChannelCtrl)
WNChannelCtrl = tagWNChannelCtrl
class tagWNChannelDel(Structure):
    pass
tagWNChannelDel._fields_ = [
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ulCount', c_ulong),
]
assert sizeof(tagWNChannelDel) == 12, sizeof(tagWNChannelDel)
assert alignment(tagWNChannelDel) == 4, alignment(tagWNChannelDel)
WNChannelDel = tagWNChannelDel
class tagWNPVCCfg(Structure):
    pass
tagWNPVCCfg._fields_ = [
    ('ulDLCI', c_ulong),
    ('ulDLCICount', c_ulong),
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ucPVCEnable', c_ubyte),
    ('ucEncapType', c_ubyte),
    ('ulCIR', c_ulong),
    ('ulBC', c_ulong),
    ('ulBE', c_ulong),
    ('ucLocalIPAddr', c_ubyte * 4),
    ('ucPeerIPAddr', c_ubyte * 4),
    ('ucNetMask', c_ubyte * 4),
    ('ucReserved', c_ubyte * 2),
]
assert sizeof(tagWNPVCCfg) == 48, sizeof(tagWNPVCCfg)
assert alignment(tagWNPVCCfg) == 4, alignment(tagWNPVCCfg)
WNPVCCfg = tagWNPVCCfg
class tagWNPVCCtrl(Structure):
    pass
tagWNPVCCtrl._fields_ = [
    ('ulDLCI', c_ulong),
    ('ulDLCICount', c_ulong),
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ucEnable', c_ubyte),
    ('ucReserved', c_ubyte * 3),
]
assert sizeof(tagWNPVCCtrl) == 20, sizeof(tagWNPVCCtrl)
assert alignment(tagWNPVCCtrl) == 4, alignment(tagWNPVCCtrl)
WNPVCCtrl = tagWNPVCCtrl
class tagWNPVCDel(Structure):
    pass
tagWNPVCDel._fields_ = [
    ('ulDLCI', c_ulong),
    ('ulDLCICount', c_ulong),
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
]
assert sizeof(tagWNPVCDel) == 16, sizeof(tagWNPVCDel)
assert alignment(tagWNPVCDel) == 4, alignment(tagWNPVCDel)
WNPVCDel = tagWNPVCDel
class tagWNStreamCtrl(Structure):
    pass
tagWNStreamCtrl._fields_ = [
    ('ulCount', c_ulong),
    ('ucEnable', c_ubyte),
    ('ucReserved', c_ubyte * 7),
]
assert sizeof(tagWNStreamCtrl) == 12, sizeof(tagWNStreamCtrl)
assert alignment(tagWNStreamCtrl) == 4, alignment(tagWNStreamCtrl)
WNStreamCtrl = tagWNStreamCtrl
class tagWNStreamDel(Structure):
    pass
tagWNStreamDel._fields_ = [
    ('ulCount', c_ulong),
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ucReserved', c_ubyte * 4),
]
assert sizeof(tagWNStreamDel) == 16, sizeof(tagWNStreamDel)
assert alignment(tagWNStreamDel) == 4, alignment(tagWNStreamDel)
WNStreamDel = tagWNStreamDel
class tagWNStreamExtCfg(Structure):
    pass
tagWNStreamExtCfg._fields_ = [
    ('ulCount', c_ulong),
    ('ulDLCI', c_ulong),
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ucEncapType', c_ubyte),
    ('ucCR', c_ubyte),
    ('ucFECN', c_ubyte),
    ('ucBECN', c_ubyte),
    ('ucDE', c_ubyte),
    ('ulFrameRate', c_ulong),
    ('ucIPManipulateMode', c_ubyte),
    ('ucStepCount', c_ubyte),
    ('uiIPLimitCount', c_ushort),
    ('ucReserved', c_ubyte * 23),
]
assert sizeof(tagWNStreamExtCfg) == 56, sizeof(tagWNStreamExtCfg)
assert alignment(tagWNStreamExtCfg) == 4, alignment(tagWNStreamExtCfg)
WNStreamExtCfg = tagWNStreamExtCfg
class tagWNLMICfg(Structure):
    pass
tagWNLMICfg._fields_ = [
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ulCount', c_ulong),
    ('ucLinkMgmt', c_ubyte),
    ('ucUNIMode', c_ubyte),
    ('ucNN1', c_ubyte),
    ('ucNN2', c_ubyte),
    ('ucNN3', c_ubyte),
    ('ucNN4', c_ubyte),
    ('ucNT1', c_ubyte),
    ('ucNT2', c_ubyte),
    ('ucNT3', c_ubyte),
    ('ucReserved', c_ubyte * 3),
]
assert sizeof(tagWNLMICfg) == 24, sizeof(tagWNLMICfg)
assert alignment(tagWNLMICfg) == 4, alignment(tagWNLMICfg)
WNLMICfg = tagWNLMICfg
class tagWNLMIDel(Structure):
    pass
tagWNLMIDel._fields_ = [
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ulCount', c_ulong),
]
assert sizeof(tagWNLMIDel) == 12, sizeof(tagWNLMIDel)
assert alignment(tagWNLMIDel) == 4, alignment(tagWNLMIDel)
WNLMIDel = tagWNLMIDel
class tagIPSubnetReg(Structure):
    pass
tagIPSubnetReg._fields_ = [
    ('ulIPSubnetId', c_ulong),
    ('ulCount', c_ulong),
    ('ucIPAddr', c_ubyte * 4),
    ('ucNetmask', c_ubyte * 4),
    ('ucGateway', c_ubyte * 4),
]
assert sizeof(tagIPSubnetReg) == 20, sizeof(tagIPSubnetReg)
assert alignment(tagIPSubnetReg) == 4, alignment(tagIPSubnetReg)
IPSubnetReg = tagIPSubnetReg
class tagIPSubnetDeReg(Structure):
    pass
tagIPSubnetDeReg._fields_ = [
    ('ulIPSubnetId', c_ulong),
    ('ulCount', c_ulong),
]
assert sizeof(tagIPSubnetDeReg) == 8, sizeof(tagIPSubnetDeReg)
assert alignment(tagIPSubnetDeReg) == 4, alignment(tagIPSubnetDeReg)
IPSubnetDeReg = tagIPSubnetDeReg
class tagWNTriggerCfg(Structure):
    pass
tagWNTriggerCfg._fields_ = [
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ulCount', c_ulong),
    ('ucEnable', c_ubyte),
    ('ucDirection', c_ubyte),
    ('ucCompCombo', c_ubyte),
    ('uiTrig1Offset', c_ushort),
    ('uiTrig1Range', c_ushort),
    ('ucTrig1Pattern', c_ubyte * 6),
    ('ucTrig1Mask', c_ubyte * 6),
    ('uiTrig2Offset', c_ushort),
    ('uiTrig2Range', c_ushort),
    ('ucTrig2Pattern', c_ubyte * 6),
    ('ucTrig2Mask', c_ubyte * 6),
    ('ucReserved', c_ubyte),
]
assert sizeof(tagWNTriggerCfg) == 52, sizeof(tagWNTriggerCfg)
assert alignment(tagWNTriggerCfg) == 4, alignment(tagWNTriggerCfg)
WNTriggerCfg = tagWNTriggerCfg
class tagWNTriggerCtrl(Structure):
    pass
tagWNTriggerCtrl._fields_ = [
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ulCount', c_ulong),
    ('ucEnable', c_ubyte),
    ('ucReserved', c_ubyte * 3),
]
assert sizeof(tagWNTriggerCtrl) == 16, sizeof(tagWNTriggerCtrl)
assert alignment(tagWNTriggerCtrl) == 4, alignment(tagWNTriggerCtrl)
WNTriggerCtrl = tagWNTriggerCtrl
class tagWNTriggerDel(Structure):
    pass
tagWNTriggerDel._fields_ = [
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ulCount', c_ulong),
]
assert sizeof(tagWNTriggerDel) == 12, sizeof(tagWNTriggerDel)
assert alignment(tagWNTriggerDel) == 4, alignment(tagWNTriggerDel)
WNTriggerDel = tagWNTriggerDel
class tagWNFeatureCtrl(Structure):
    pass
tagWNFeatureCtrl._fields_ = [
    ('ulLineNo', c_ulong),
    ('ucEnableFeature', c_ubyte),
    ('ucReserved', c_ubyte * 11),
]
assert sizeof(tagWNFeatureCtrl) == 16, sizeof(tagWNFeatureCtrl)
assert alignment(tagWNFeatureCtrl) == 4, alignment(tagWNFeatureCtrl)
WNFeatureCtrl = tagWNFeatureCtrl
class tagWNFeatureCtrlAll(Structure):
    pass
tagWNFeatureCtrlAll._fields_ = [
    ('ucEnableFeature', c_ubyte),
    ('ucReserved', c_ubyte * 3),
]
assert sizeof(tagWNFeatureCtrlAll) == 4, sizeof(tagWNFeatureCtrlAll)
assert alignment(tagWNFeatureCtrlAll) == 1, alignment(tagWNFeatureCtrlAll)
WNFeatureCtrlAll = tagWNFeatureCtrlAll
class tagWNChannelTxCfg(Structure):
    pass
tagWNChannelTxCfg._fields_ = [
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ulCount', c_ulong),
    ('ucTXMode', c_ubyte),
    ('ulBurstCount', c_ulong),
    ('ulInterBurstGap', c_ulong),
    ('ucReserved', c_ubyte * 20),
]
assert sizeof(tagWNChannelTxCfg) == 44, sizeof(tagWNChannelTxCfg)
assert alignment(tagWNChannelTxCfg) == 4, alignment(tagWNChannelTxCfg)
WNChannelTxCfg = tagWNChannelTxCfg
WNVersionInfo = FRVersionInfo
class tagWNCardCapInfo(Structure):
    pass
tagWNCardCapInfo._fields_ = [
    ('uiMaxPorts', c_ushort),
    ('uiMaxStreams', c_ushort),
    ('uiMaxConnect', c_ushort),
    ('uiMaxChannels', c_ushort),
    ('uiMaxPvcs', c_ushort),
    ('ulMaxHostTxBuf', c_ulong),
    ('ulMaxHostRxBuf', c_ulong),
    ('uiSupportFeatures', c_ushort),
    ('ucReserved', c_ubyte * 4),
]
assert sizeof(tagWNCardCapInfo) == 28, sizeof(tagWNCardCapInfo)
assert alignment(tagWNCardCapInfo) == 4, alignment(tagWNCardCapInfo)
WNCardCapInfo = tagWNCardCapInfo
class tagWNPortInfo(Structure):
    pass
tagWNPortInfo._fields_ = [
    ('ulCount', c_ulong),
    ('ulTimestamp', c_ulong),
    ('ulRxFrameRate', c_ulong),
    ('ulRxByteRate', c_ulong),
    ('ulRxTriggerRate', c_ulong),
    ('ulRxFrames', c_ulong),
    ('ulRxBytes', c_ulong),
    ('ulRxFCSErr', c_ulong),
    ('ulRxTrigger', c_ulong),
    ('ulRxAbort', c_ulong),
    ('ulRxOversize', c_ulong),
    ('ulRxNonOctetAlignedErr', c_ulong),
    ('ulRxOverflowErr', c_ulong),
    ('ulRxUndersize', c_ulong),
    ('ulRxDEFrames', c_ulong),
    ('ulRxBECNCount', c_ulong),
    ('ulRxFECNCount', c_ulong),
    ('ulRxInvalidPVC', c_ulong),
    ('ulRxTrigLatency', c_ulong),
    ('ulRxTags', c_ulong),
    ('ulRxStack', c_ulong),
    ('ulRxInvARPReq', c_ulong),
    ('ulRxARPReq', c_ulong),
    ('ulRxARPReply', c_ulong),
    ('ulRxPingReq', c_ulong),
    ('ulRxPingReply', c_ulong),
    ('ulTxFrameRate', c_ulong),
    ('ulTxByteRate', c_ulong),
    ('ulTxTriggerRate', c_ulong),
    ('ulTxFrames', c_ulong),
    ('ulTxBytes', c_ulong),
    ('ulTxFCSErr', c_ulong),
    ('ulTxAbort', c_ulong),
    ('ulTxTrigger', c_ulong),
    ('ulTxDEFrames', c_ulong),
    ('ulTxBECNFrames', c_ulong),
    ('ulTxFECNFrames', c_ulong),
    ('ulTxTrigLatency', c_ulong),
    ('ulTxStack', c_ulong),
    ('ulTxInvARPReq', c_ulong),
    ('ulTxARPReq', c_ulong),
    ('ulTxARPReply', c_ulong),
    ('ulTxPingReq', c_ulong),
    ('ulTxPingReply', c_ulong),
    ('ucReserved', c_ubyte * 12),
]
assert sizeof(tagWNPortInfo) == 188, sizeof(tagWNPortInfo)
assert alignment(tagWNPortInfo) == 4, alignment(tagWNPortInfo)
WNPortInfo = tagWNPortInfo
class tagWNDS3AlarmCounterInfo(Structure):
    pass
tagWNDS3AlarmCounterInfo._fields_ = [
    ('ulCount', c_ulong),
    ('uiAlarmCurrent', c_ushort),
    ('uiAlarmHistory', c_ushort),
    ('ulCodeViolationCount', c_ulong),
    ('ulFrameErrCount', c_ulong),
    ('ulSyncErrCount', c_ulong),
    ('ulCBitParityErrCount', c_ulong),
    ('ulPBitParityErrCount', c_ulong),
    ('ulFEBEErrCount', c_ulong),
    ('ulCodeViolationRate', c_ulong),
    ('ulFrameErrRate', c_ulong),
    ('ulSyncErrRate', c_ulong),
    ('ucReserved', c_ubyte * 20),
]
assert sizeof(tagWNDS3AlarmCounterInfo) == 64, sizeof(tagWNDS3AlarmCounterInfo)
assert alignment(tagWNDS3AlarmCounterInfo) == 4, alignment(tagWNDS3AlarmCounterInfo)
WNDS3AlarmCounterInfo = tagWNDS3AlarmCounterInfo
WNDS3LineInfo = WNDS3AlarmCounterInfo
class tagWNDS3LineStatus(Structure):
    pass
tagWNDS3LineStatus._fields_ = [
    ('ulCount', c_ulong),
    ('ucStatus', c_ubyte),
    ('ucReserved', c_ubyte * 3),
]
assert sizeof(tagWNDS3LineStatus) == 8, sizeof(tagWNDS3LineStatus)
assert alignment(tagWNDS3LineStatus) == 4, alignment(tagWNDS3LineStatus)
WNDS3LineStatus = tagWNDS3LineStatus
class tagWNChannelStatus(Structure):
    pass
tagWNChannelStatus._fields_ = [
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ucStatus', c_ubyte),
    ('ucPPPLCPStatus', c_ubyte),
    ('ucPPPNCPStatus', c_ubyte),
    ('ucUNIStatus', c_ubyte),
]
assert sizeof(tagWNChannelStatus) == 12, sizeof(tagWNChannelStatus)
assert alignment(tagWNChannelStatus) == 4, alignment(tagWNChannelStatus)
WNChannelStatus = tagWNChannelStatus
class tagWNChannelInfo(Structure):
    pass
tagWNChannelInfo._fields_ = [
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ulCount', c_ulong),
    ('ulTimestamp', c_ulong),
    ('ulRxFrameRate', c_ulong),
    ('ulRxByteRate', c_ulong),
    ('ulRxTriggerRate', c_ulong),
    ('ulRxFrames', c_ulong),
    ('ulRxBytes', c_ulong),
    ('ulRxFCSErr', c_ulong),
    ('ulRxTrigger', c_ulong),
    ('ulRxAbort', c_ulong),
    ('ulRxOversize', c_ulong),
    ('ulRxNonOctetAlignedErr', c_ulong),
    ('ulRxOverflowErr', c_ulong),
    ('ulRxUndersize', c_ulong),
    ('ulRxDEFrames', c_ulong),
    ('ulRxBECNCount', c_ulong),
    ('ulRxFECNCount', c_ulong),
    ('ulRxInvalidPVC', c_ulong),
    ('ulRxTrigLatency', c_ulong),
    ('ulRxTags', c_ulong),
    ('ulRxStack', c_ulong),
    ('ulRxInvARPReq', c_ulong),
    ('ulRxARPReq', c_ulong),
    ('ulRxARPReply', c_ulong),
    ('ulRxPingReq', c_ulong),
    ('ulRxPingReply', c_ulong),
    ('ulTxFrameRate', c_ulong),
    ('ulTxByteRate', c_ulong),
    ('ulTxTriggerRate', c_ulong),
    ('ulTxFrames', c_ulong),
    ('ulTxBytes', c_ulong),
    ('ulTxFCSErr', c_ulong),
    ('ulTxAbort', c_ulong),
    ('ulTxTrigger', c_ulong),
    ('ulTxDEFrames', c_ulong),
    ('ulTxBECNFrames', c_ulong),
    ('ulTxFECNFrames', c_ulong),
    ('ulTxTrigLatency', c_ulong),
    ('ulTxStack', c_ulong),
    ('ulTxInvARPReq', c_ulong),
    ('ulTxARPReq', c_ulong),
    ('ulTxARPReply', c_ulong),
    ('ulTxPingReq', c_ulong),
    ('ulTxPingReply', c_ulong),
    ('ucReserved', c_ubyte * 8),
]
assert sizeof(tagWNChannelInfo) == 192, sizeof(tagWNChannelInfo)
assert alignment(tagWNChannelInfo) == 4, alignment(tagWNChannelInfo)
WNChannelInfo = tagWNChannelInfo
class tagWNT1E1AlarmCounterInfo(Structure):
    pass
tagWNT1E1AlarmCounterInfo._fields_ = [
    ('ulLineNo', c_ulong),
    ('ulCount', c_ulong),
    ('uiAlarmCurrent', c_ushort),
    ('uiAlarmHistory', c_ushort),
    ('ulCodeViolationCount', c_ulong),
    ('ulFrameErrCount', c_ulong),
    ('ulSyncErrCount', c_ulong),
    ('ulFEBEErrCount', c_ulong),
    ('ulCodeViolationRate', c_ulong),
    ('ulFrameErrRate', c_ulong),
    ('ulSyncErrRate', c_ulong),
    ('ulFEBEErrRate', c_ulong),
    ('ucReserved', c_ubyte * 8),
]
assert sizeof(tagWNT1E1AlarmCounterInfo) == 52, sizeof(tagWNT1E1AlarmCounterInfo)
assert alignment(tagWNT1E1AlarmCounterInfo) == 4, alignment(tagWNT1E1AlarmCounterInfo)
WNT1E1AlarmCounterInfo = tagWNT1E1AlarmCounterInfo
class tagWNT1E1LineStatus(Structure):
    pass
tagWNT1E1LineStatus._fields_ = [
    ('ulLineNo', c_ulong),
    ('ulCount', c_ulong),
    ('ucStatus', c_ubyte),
    ('ucReserved', c_ubyte * 7),
]
assert sizeof(tagWNT1E1LineStatus) == 16, sizeof(tagWNT1E1LineStatus)
assert alignment(tagWNT1E1LineStatus) == 4, alignment(tagWNT1E1LineStatus)
WNT1E1LineStatus = tagWNT1E1LineStatus
class tagWNPVCStatus(Structure):
    pass
tagWNPVCStatus._fields_ = [
    ('ucStatusType', c_ubyte),
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ucActiveStatus', c_ubyte * 128),
    ('ucConfigStatus', c_ubyte * 128),
    ('ucEnableStatus', c_ubyte * 128),
]
assert sizeof(tagWNPVCStatus) == 396, sizeof(tagWNPVCStatus)
assert alignment(tagWNPVCStatus) == 4, alignment(tagWNPVCStatus)
WNPVCStatus = tagWNPVCStatus
class tagWNPVCInfo(Structure):
    pass
tagWNPVCInfo._fields_ = [
    ('ulDLCI', c_ulong),
    ('ulCount', c_ulong),
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ulTxFrameRate', c_ulong),
    ('ulTxByteRate', c_ulong),
    ('ulTxFrames', c_ulong),
    ('ulTxBytes', c_ulong),
    ('ulTxDEFrames', c_ulong),
    ('ulTotFECNSent', c_ulong),
    ('ulTotBECNSent', c_ulong),
    ('ulRxFrameRate', c_ulong),
    ('ulRxByteRate', c_ulong),
    ('ulRxFrames', c_ulong),
    ('ulRxBytes', c_ulong),
    ('ulRxDEFrames', c_ulong),
    ('ulFECNCount', c_ulong),
    ('ulBECNCount', c_ulong),
    ('ucReserved', c_ubyte * 4),
]
assert sizeof(tagWNPVCInfo) == 76, sizeof(tagWNPVCInfo)
assert alignment(tagWNPVCInfo) == 4, alignment(tagWNPVCInfo)
WNPVCInfo = tagWNPVCInfo
class tagWNLMIInfo(Structure):
    pass
tagWNLMIInfo._fields_ = [
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ulCount', c_ulong),
    ('ulConfiguredPVC', c_ulong),
    ('ulActivePVC', c_ulong),
    ('ulInactivePVC', c_ulong),
    ('ulDisabledPVC', c_ulong),
    ('ulTxStatusReq', c_ulong),
    ('ulTxStatusMsg', c_ulong),
    ('ulTxFullStatusReq', c_ulong),
    ('ulTxFullStatusMsg', c_ulong),
    ('ulTxStatusUpdate', c_ulong),
    ('ulRxStatusReq', c_ulong),
    ('ulRxStatusMsg', c_ulong),
    ('ulRxFullStatusReq', c_ulong),
    ('ulRxFullStatusMsg', c_ulong),
    ('ulRxStatusUpdate', c_ulong),
    ('ulPVCCongestion', c_ulong),
    ('ulNewPVC', c_ulong),
    ('ulPVCDeleted', c_ulong),
    ('ulPVCDeactivated', c_ulong),
    ('ulMulticastIe', c_ulong),
    ('ulInvalidFrame', c_ulong),
    ('ucReserved', c_ulong * 4),
]
assert sizeof(tagWNLMIInfo) == 108, sizeof(tagWNLMIInfo)
assert alignment(tagWNLMIInfo) == 4, alignment(tagWNLMIInfo)
WNLMIInfo = tagWNLMIInfo
class tagFrameSpec(Structure):
    pass
tagFrameSpec._fields_ = [
    ('iEncap', c_int),
    ('iSize', c_int),
    ('iProtocol', c_int),
    ('iPattern', c_int),
]
assert sizeof(tagFrameSpec) == 16, sizeof(tagFrameSpec)
assert alignment(tagFrameSpec) == 4, alignment(tagFrameSpec)
FrameSpec_Type = tagFrameSpec
class tagFSTAlternateTx(Structure):
    pass
tagFSTAlternateTx._fields_ = [
    ('ucEnabled', c_ubyte),
    ('ucCRCErrors', c_ubyte),
    ('ucErrorSymbol', c_ubyte),
    ('ucDribble', c_ubyte),
    ('ulAlternateCount', c_ulong),
    ('uiDataLength', c_ushort),
    ('ucData', c_ubyte * 2048),
]
assert sizeof(tagFSTAlternateTx) == 2060, sizeof(tagFSTAlternateTx)
assert alignment(tagFSTAlternateTx) == 4, alignment(tagFSTAlternateTx)
FSTAlternateTx = tagFSTAlternateTx
class tagFSTControlAux(Structure):
    pass
tagFSTControlAux._fields_ = [
    ('ucFlowControlPause', c_ubyte),
    ('ucPreambleLen', c_ubyte),
]
assert sizeof(tagFSTControlAux) == 2, sizeof(tagFSTControlAux)
assert alignment(tagFSTControlAux) == 1, alignment(tagFSTControlAux)
FSTControlAux = tagFSTControlAux
class tagFSTCaptureParams(Structure):
    pass
tagFSTCaptureParams._fields_ = [
    ('ucCRCErrors', c_ubyte),
    ('ucOnTrigger', c_ubyte),
    ('ucFilterMode', c_ubyte),
    ('ucStartStopOnConditionXMode', c_ubyte),
    ('uc64BytesOnly', c_ubyte),
    ('ucLast64Bytes', c_ubyte),
    ('ucCollisions', c_ubyte),
    ('ucStartStop', c_ubyte),
]
assert sizeof(tagFSTCaptureParams) == 8, sizeof(tagFSTCaptureParams)
assert alignment(tagFSTCaptureParams) == 1, alignment(tagFSTCaptureParams)
FSTCaptureParams = tagFSTCaptureParams
class tagFSTVLAN(Structure):
    pass
tagFSTVLAN._fields_ = [
    ('ucVLANEnable', c_ubyte),
    ('uiTPID', c_ushort),
    ('ucPRI', c_ubyte),
    ('ucCFI', c_ubyte),
    ('uiVID', c_ushort),
]
assert sizeof(tagFSTVLAN) == 8, sizeof(tagFSTVLAN)
assert alignment(tagFSTVLAN) == 2, alignment(tagFSTVLAN)
FSTVLAN = tagFSTVLAN
class tagFSTCaptureCountInfo(Structure):
    pass
tagFSTCaptureCountInfo._fields_ = [
    ('ulCaptureCount', c_ulong),
]
assert sizeof(tagFSTCaptureCountInfo) == 4, sizeof(tagFSTCaptureCountInfo)
assert alignment(tagFSTCaptureCountInfo) == 4, alignment(tagFSTCaptureCountInfo)
FSTCaptureCountInfo = tagFSTCaptureCountInfo
class tagFSTCaptureFrameInfo(Structure):
    pass
tagFSTCaptureFrameInfo._fields_ = [
    ('ulIndex', c_ulong),
    ('ucStatus', c_ubyte),
    ('ucPreambleCount', c_ubyte),
    ('uiLength', c_ushort),
    ('ulTimestamp', c_ulong),
]
assert sizeof(tagFSTCaptureFrameInfo) == 12, sizeof(tagFSTCaptureFrameInfo)
assert alignment(tagFSTCaptureFrameInfo) == 4, alignment(tagFSTCaptureFrameInfo)
FSTCaptureFrameInfo = tagFSTCaptureFrameInfo
class tagFSTCaptureInfo(Structure):
    pass
tagFSTCaptureInfo._fields_ = [
    ('FrameInfo', FSTCaptureFrameInfo * 96),
]
assert sizeof(tagFSTCaptureInfo) == 1152, sizeof(tagFSTCaptureInfo)
assert alignment(tagFSTCaptureInfo) == 4, alignment(tagFSTCaptureInfo)
FSTCaptureInfo = tagFSTCaptureInfo
class tagFSTCaptureDataInfo(Structure):
    pass
tagFSTCaptureDataInfo._fields_ = [
    ('ulFrameNum', c_ulong),
    ('ucData', c_ubyte * 2048),
]
assert sizeof(tagFSTCaptureDataInfo) == 2052, sizeof(tagFSTCaptureDataInfo)
assert alignment(tagFSTCaptureDataInfo) == 4, alignment(tagFSTCaptureDataInfo)
FSTCaptureDataInfo = tagFSTCaptureDataInfo
tagFSTProtocolParameters._fields_ = [
    ('ucDstMAC', c_ubyte * 6),
    ('ucSrcMAC', c_ubyte * 6),
    ('ucDstIP', c_ubyte * 4),
    ('ucSrcIP', c_ubyte * 4),
    ('ucNetMask', c_ubyte * 4),
    ('ucResponseMask', c_ubyte * 4),
    ('ucDefaultGateway', c_ubyte * 4),
    ('ulProtocolResponse', c_ulong),
    ('ulProtocolGenerate', c_ulong),
    ('ulARPPeriod', c_ulong),
    ('ulPINGPeriod', c_ulong),
    ('ucIPChecksumEnable', c_ubyte),
    ('ucIPChecksumErrorEnable', c_ubyte),
]
assert sizeof(tagFSTProtocolParameters) == 52, sizeof(tagFSTProtocolParameters)
assert alignment(tagFSTProtocolParameters) == 4, alignment(tagFSTProtocolParameters)
class tagFSTProtocolCounterInfo(Structure):
    pass
tagFSTProtocolCounterInfo._fields_ = [
    ('u64RxVLANFrames', U64),
    ('u64RxIPFrames', U64),
    ('u64IPChecksumErrors', U64),
    ('ulRxARPReply', c_ulong),
    ('ulTxARPReply', c_ulong),
    ('ulTxARPRequest', c_ulong),
    ('ulRxARPRequest', c_ulong),
    ('ulRxPingReply', c_ulong),
    ('ulTxPingReply', c_ulong),
    ('ulTxPingRequest', c_ulong),
    ('ulRxPingRequest', c_ulong),
]
assert sizeof(tagFSTProtocolCounterInfo) == 56, sizeof(tagFSTProtocolCounterInfo)
assert alignment(tagFSTProtocolCounterInfo) == 4, alignment(tagFSTProtocolCounterInfo)
FSTProtocolCounterInfo = tagFSTProtocolCounterInfo
class tagGIGCaptureSetup(Structure):
    pass
tagGIGCaptureSetup._fields_ = [
    ('ucCRCErrors', c_ubyte),
    ('ucRxTrigger', c_ubyte),
    ('ucTxTrigger', c_ubyte),
    ('ucRCErrors', c_ubyte),
    ('ucFilterMode', c_ubyte),
    ('ucStartStopOnConditionMode', c_ubyte),
    ('uc64BytesOnly', c_ubyte),
    ('ucLast64Bytes', c_ubyte),
    ('ucStartStop', c_ubyte),
]
assert sizeof(tagGIGCaptureSetup) == 9, sizeof(tagGIGCaptureSetup)
assert alignment(tagGIGCaptureSetup) == 1, alignment(tagGIGCaptureSetup)
GIGCaptureSetup = tagGIGCaptureSetup
class tagGIGTransmit(Structure):
    pass
tagGIGTransmit._fields_ = [
    ('uiMainLength', c_ushort),
    ('ucPreambleByteLength', c_ubyte),
    ('ucFramesPerCarrier', c_ubyte),
    ('ulGap', c_ulong),
    ('ucMainRandomBackground', c_ubyte),
    ('ucBG1RandomBackground', c_ubyte),
    ('ucBG2RandomBackground', c_ubyte),
    ('ucSS1RandomBackground', c_ubyte),
    ('ucSS2RandomBackground', c_ubyte),
    ('ucMainCRCError', c_ubyte),
    ('ucBG1CRCError', c_ubyte),
    ('ucBG2CRCError', c_ubyte),
    ('ucSS1CRCError', c_ubyte),
    ('ucSS2CRCError', c_ubyte),
    ('ucJabberCount', c_ubyte),
    ('ucLoopback', c_ubyte),
    ('ulBG1Frequency', c_ulong),
    ('ulBG2Frequency', c_ulong),
    ('uiBG1Length', c_ushort),
    ('uiBG2Length', c_ushort),
    ('uiSS1Length', c_ushort),
    ('uiSS2Length', c_ushort),
    ('uiLinkConfiguration', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('iVFD1Range', c_short),
    ('ucVFD1Mode', c_ubyte),
    ('ulVFD1CycleCount', c_ulong),
    ('ucVFD1Data', c_ubyte * 8),
    ('uiVFD2Offset', c_ushort),
    ('iVFD2Range', c_short),
    ('ucVFD2Mode', c_ubyte),
    ('ulVFD2CycleCount', c_ulong),
    ('ucVFD2Data', c_ubyte * 8),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ulVFD3Count', c_ulong),
    ('ucVFD3Mode', c_ubyte),
    ('ucMainBG1Mode', c_ubyte),
    ('ulBurstCount', c_ulong),
    ('ulMultiburstCount', c_ulong),
    ('ulInterBurstGap', c_ulong),
    ('ucTransmitMode', c_ubyte),
    ('ucEchoMode', c_ubyte),
    ('ucPeriodicGap', c_ubyte),
    ('ucCountRcverrOrOvrsz', c_ubyte),
    ('ucGapByBitTimesOrByRate', c_ubyte),
    ('ucRandomLengthEnable', c_ubyte),
    ('uiVFD1BlockCount', c_ushort),
    ('uiVFD2BlockCount', c_ushort),
    ('uiVFD3BlockCount', c_ushort),
    ('ucControlBits', c_ubyte),
    ('ucError', c_ubyte),
]
assert sizeof(tagGIGTransmit) == 116, sizeof(tagGIGTransmit)
assert alignment(tagGIGTransmit) == 4, alignment(tagGIGTransmit)
GIGTransmit = tagGIGTransmit
class tagGIGAltTransmit(Structure):
    pass
tagGIGAltTransmit._fields_ = [
    ('ucEnableSS1', c_ubyte),
    ('ucEnableSS2', c_ubyte),
    ('ucEnableBG1', c_ubyte),
    ('ucEnableBG2', c_ubyte),
    ('ucEnableHoldoff', c_ubyte),
    ('ucReserved', c_ubyte * 3),
]
assert sizeof(tagGIGAltTransmit) == 8, sizeof(tagGIGAltTransmit)
assert alignment(tagGIGAltTransmit) == 1, alignment(tagGIGAltTransmit)
GIGAltTransmit = tagGIGAltTransmit
class tagGIGAutoFiberNegotiate(Structure):
    pass
tagGIGAutoFiberNegotiate._fields_ = [
    ('ucMode', c_ubyte),
    ('ucRestart', c_ubyte),
    ('uiLinkConfiguration', c_ushort),
    ('ucEnableCCode', c_ubyte),
    ('ucEnableHoldoff', c_ubyte),
    ('ucIgnoreLink', c_ubyte),
    ('ucPreambleLen', c_ubyte),
    ('ucEnableJumboFrame', c_ubyte),
    ('ucCollisionBackoffAggressiveness', c_ubyte),
    ('ucInfiniteRetryMode', c_ubyte),
    ('ucReserved', c_ubyte * 2),
]
assert sizeof(tagGIGAutoFiberNegotiate) == 14, sizeof(tagGIGAutoFiberNegotiate)
assert alignment(tagGIGAutoFiberNegotiate) == 2, alignment(tagGIGAutoFiberNegotiate)
GIGAutoFiberNegotiate = tagGIGAutoFiberNegotiate
class tagGIGAfnConfig(Structure):
    pass
tagGIGAfnConfig._fields_ = [
    ('ucMode', c_ubyte),
    ('ucRestart', c_ubyte),
    ('uiLinkConfiguration', c_ushort),
    ('ucEnableCCode', c_ubyte),
    ('ucEnableHoldoff', c_ubyte),
    ('ucIgnoreLink', c_ubyte),
    ('ucReserved', c_ubyte * 32),
]
assert sizeof(tagGIGAfnConfig) == 40, sizeof(tagGIGAfnConfig)
assert alignment(tagGIGAfnConfig) == 2, alignment(tagGIGAfnConfig)
GIGAfnConfig = tagGIGAfnConfig
class tagGIGMacConfig(Structure):
    pass
tagGIGMacConfig._fields_ = [
    ('ucPreambleLen', c_ubyte),
    ('ucEnableJumboFrame', c_ubyte),
    ('ucCollisionBackoffAggressiveness', c_ubyte),
    ('ucInfiniteRetryMode', c_ubyte),
    ('ucEnableObeyPause', c_ubyte),
    ('ucLoopBackMode', c_ubyte),
    ('uiJumboFrameSize', c_ushort),
    ('uiVLANTPID', c_ushort),
    ('ucMode', c_ubyte),
    ('ucRestart', c_ubyte),
    ('ucEnableDeficitIdleCount', c_ubyte),
    ('uiLinkConfiguration', c_ushort),
    ('ucReserved', c_ubyte * 27),
]
assert sizeof(tagGIGMacConfig) == 44, sizeof(tagGIGMacConfig)
assert alignment(tagGIGMacConfig) == 2, alignment(tagGIGMacConfig)
GIGMacConfig = tagGIGMacConfig
class tagGIGTrigger(Structure):
    pass
tagGIGTrigger._fields_ = [
    ('ucTrigger1Mode', c_ubyte),
    ('ucTrigger1Range', c_ubyte),
    ('uiTrigger1Offset', c_ushort),
    ('ucTrigger1Data', c_ubyte * 8),
    ('ucTrigger1Mask', c_ubyte * 8),
    ('ucTrigger2Mode', c_ubyte),
    ('ucTrigger2Range', c_ubyte),
    ('uiTrigger2Offset', c_ushort),
    ('ucTrigger2Data', c_ubyte * 8),
    ('ucTrigger2Mask', c_ubyte * 8),
    ('ucTriggerMode', c_ubyte),
    ('ucReserved', c_ubyte),
]
assert sizeof(tagGIGTrigger) == 42, sizeof(tagGIGTrigger)
assert alignment(tagGIGTrigger) == 2, alignment(tagGIGTrigger)
GIGTrigger = tagGIGTrigger
class tagGIGCaptureFrameInfo(Structure):
    pass
tagGIGCaptureFrameInfo._fields_ = [
    ('ulFrame', c_ulong),
    ('reserved1', c_ulong),
    ('ullTimestamp', U64),
    ('uiStatus', c_ushort),
    ('uiLength', c_ushort),
]
assert sizeof(tagGIGCaptureFrameInfo) == 20, sizeof(tagGIGCaptureFrameInfo)
assert alignment(tagGIGCaptureFrameInfo) == 4, alignment(tagGIGCaptureFrameInfo)
GIGCaptureFrameInfo = tagGIGCaptureFrameInfo
class tagGIGCaptureInfo(Structure):
    pass
tagGIGCaptureInfo._fields_ = [
    ('FrameInfo', GIGCaptureFrameInfo * 96),
]
assert sizeof(tagGIGCaptureInfo) == 1920, sizeof(tagGIGCaptureInfo)
assert alignment(tagGIGCaptureInfo) == 4, alignment(tagGIGCaptureInfo)
GIGCaptureInfo = tagGIGCaptureInfo
class tagGIGCaptureCountInfo(Structure):
    pass
tagGIGCaptureCountInfo._fields_ = [
    ('ulCount', c_ulong),
]
assert sizeof(tagGIGCaptureCountInfo) == 4, sizeof(tagGIGCaptureCountInfo)
assert alignment(tagGIGCaptureCountInfo) == 4, alignment(tagGIGCaptureCountInfo)
GIGCaptureCountInfo = tagGIGCaptureCountInfo
class tagGIGCaptureDataInfo(Structure):
    pass
tagGIGCaptureDataInfo._fields_ = [
    ('ulFrame', c_ulong),
    ('ucData', c_ubyte * 2048),
]
assert sizeof(tagGIGCaptureDataInfo) == 2052, sizeof(tagGIGCaptureDataInfo)
assert alignment(tagGIGCaptureDataInfo) == 4, alignment(tagGIGCaptureDataInfo)
GIGCaptureDataInfo = tagGIGCaptureDataInfo
class tagGIGCardInfo(Structure):
    pass
tagGIGCardInfo._fields_ = [
    ('uiLinkConfiguration', c_ushort),
    ('ulLinkStateChanges', c_ulong),
]
assert sizeof(tagGIGCardInfo) == 8, sizeof(tagGIGCardInfo)
assert alignment(tagGIGCardInfo) == 4, alignment(tagGIGCardInfo)
GIGCardInfo = tagGIGCardInfo
class tagGIGCounterInfo(Structure):
    pass
tagGIGCounterInfo._fields_ = [
    ('ullTxFrames', U64),
    ('ullTxBytes', U64),
    ('ullTxTriggers', U64),
    ('ulTxLatency', c_ulong),
    ('ullRxFrames', U64),
    ('ullRxBytes', U64),
    ('ullRxTriggers', U64),
    ('ulRxLatency', c_ulong),
    ('ullCRCErrors', U64),
    ('ullOverSize', U64),
    ('ullUnderSize', U64),
]
assert sizeof(tagGIGCounterInfo) == 80, sizeof(tagGIGCounterInfo)
assert alignment(tagGIGCounterInfo) == 4, alignment(tagGIGCounterInfo)
GIGCounterInfo = tagGIGCounterInfo
class tagGIGRateInfo(Structure):
    pass
tagGIGRateInfo._fields_ = [
    ('ulTxFrames', c_ulong),
    ('ulTxBytes', c_ulong),
    ('ulTxTriggers', c_ulong),
    ('ulRxFrames', c_ulong),
    ('ulRxBytes', c_ulong),
    ('ulRxTriggers', c_ulong),
    ('ulCRCErrors', c_ulong),
    ('ulOverSize', c_ulong),
    ('ulUnderSize', c_ulong),
]
assert sizeof(tagGIGRateInfo) == 36, sizeof(tagGIGRateInfo)
assert alignment(tagGIGRateInfo) == 4, alignment(tagGIGRateInfo)
GIGRateInfo = tagGIGRateInfo
class tagGIGVersions(Structure):
    pass
tagGIGVersions._fields_ = [
    ('uiFirmwareVersion', c_ushort),
    ('uiTransmitDataVersion', c_ushort),
    ('uiTransmitControlVersion', c_ushort),
    ('uiTransmitLowlevelVersion', c_ushort),
    ('uiReceiveDataVersion', c_ushort),
    ('uiReceiveControlVersion', c_ushort),
    ('uiReceiveLowlevelVersion', c_ushort),
    ('uiBackplaneControlVersion', c_ushort),
    ('uiLinkControlVersion', c_ushort),
    ('ucFirmwareCheck', c_ubyte),
    ('ucTransmitDataCheck', c_ubyte),
    ('ucTransmitControlCheck', c_ubyte),
    ('ucTransmitLowlevelCheck', c_ubyte),
    ('ucReceiveDataCheck', c_ubyte),
    ('ucReceiveControlCheck', c_ubyte),
    ('ucReceiveLowlevelCheck', c_ubyte),
    ('ucBackplaneControlCheck', c_ubyte),
    ('ucLinkControlCheck', c_ubyte),
    ('ucBootVersion', c_ubyte),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagGIGVersions) == 44, sizeof(tagGIGVersions)
assert alignment(tagGIGVersions) == 2, alignment(tagGIGVersions)
GIGVersions = tagGIGVersions
class tagGIGCaptureInfoRequest(Structure):
    pass
tagGIGCaptureInfoRequest._fields_ = [
    ('ulStartIndex', c_ulong),
    ('ulEndIndex', c_ulong),
]
assert sizeof(tagGIGCaptureInfoRequest) == 8, sizeof(tagGIGCaptureInfoRequest)
assert alignment(tagGIGCaptureInfoRequest) == 4, alignment(tagGIGCaptureInfoRequest)
GIGCaptureInfoRequest = tagGIGCaptureInfoRequest
class tagGIGCaptureData(Structure):
    pass
tagGIGCaptureData._fields_ = [
    ('ulFrame', c_ulong),
    ('ucData', c_ubyte * 2048),
]
assert sizeof(tagGIGCaptureData) == 2052, sizeof(tagGIGCaptureData)
assert alignment(tagGIGCaptureData) == 4, alignment(tagGIGCaptureData)
GIGCaptureData = tagGIGCaptureData
class tagXENPAKPhyConfig(Structure):
    pass
tagXENPAKPhyConfig._fields_ = [
    ('ulMode', c_ulong),
    ('ucActiveMedia', c_ubyte),
    ('ucReserved', c_ubyte * 123),
]
assert sizeof(tagXENPAKPhyConfig) == 128, sizeof(tagXENPAKPhyConfig)
assert alignment(tagXENPAKPhyConfig) == 4, alignment(tagXENPAKPhyConfig)
XENPAKPhyConfig = tagXENPAKPhyConfig
class tagXENPAKNVRConfig(Structure):
    pass
tagXENPAKNVRConfig._fields_ = [
    ('uiDeviceAddress', c_ushort),
    ('uiMDIOAddress', c_ushort),
    ('uiNVROffset', c_ushort),
    ('uiCommand', c_ushort),
    ('uiLength', c_ushort),
    ('ucData', c_ubyte * 512),
    ('ucReserved', c_ubyte * 66),
]
assert sizeof(tagXENPAKNVRConfig) == 588, sizeof(tagXENPAKNVRConfig)
assert alignment(tagXENPAKNVRConfig) == 2, alignment(tagXENPAKNVRConfig)
XENPAKNVRConfig = tagXENPAKNVRConfig
class tagXENPAKAlarmConfig(Structure):
    pass
tagXENPAKAlarmConfig._fields_ = [
    ('uiTransmitAlarmControl', c_ushort),
    ('uiReceiveAlarmControl', c_ushort),
    ('uiLinkAlarmStatusInterruptControl', c_ushort),
    ('ucReserved', c_ubyte * 122),
]
assert sizeof(tagXENPAKAlarmConfig) == 128, sizeof(tagXENPAKAlarmConfig)
assert alignment(tagXENPAKAlarmConfig) == 2, alignment(tagXENPAKAlarmConfig)
XENPAKAlarmConfig = tagXENPAKAlarmConfig
class tagXENPAKAlarmStatus(Structure):
    pass
tagXENPAKAlarmStatus._fields_ = [
    ('uiTransmitAlarmStatus', c_ushort),
    ('uiReceiveAlarmStatus', c_ushort),
    ('uiLinkAlarmStatusInterruptStatus', c_ushort),
    ('ucReserved', c_ubyte * 122),
]
assert sizeof(tagXENPAKAlarmStatus) == 128, sizeof(tagXENPAKAlarmStatus)
assert alignment(tagXENPAKAlarmStatus) == 2, alignment(tagXENPAKAlarmStatus)
XENPAKAlarmStatus = tagXENPAKAlarmStatus
class tagXENPAKProfile(Structure):
    pass
tagXENPAKProfile._fields_ = [
    ('ucModuleDetected', c_ubyte),
    ('ucNVRVersion', c_ubyte),
    ('uiNVRSize', c_ushort),
    ('ucTransceiverType', c_ubyte),
    ('ucConnectorType', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucStdComplianceCode', c_ubyte * 10),
    ('uiTransmissionRange', c_ushort),
    ('ucFiberType', c_ubyte * 2),
    ('ulPackageOUI', c_ulong),
    ('ulTransceiverVendorOUI', c_ulong),
    ('ucName', c_ubyte * 16),
    ('ucPartNumber', c_ubyte * 16),
    ('ucRevision', c_ubyte * 2),
    ('ucSerialNumber', c_ubyte * 16),
    ('ucDateCodeYear', c_ubyte * 4),
    ('ucDateCodeMonth', c_ubyte * 2),
    ('ucDateCodeDay', c_ubyte * 2),
    ('ucDateCodeLotNumber', c_ubyte * 2),
    ('ucReserved', c_ubyte * 96),
]
assert sizeof(tagXENPAKProfile) == 188, sizeof(tagXENPAKProfile)
assert alignment(tagXENPAKProfile) == 4, alignment(tagXENPAKProfile)
XENPAKProfile = tagXENPAKProfile
class tagXAUIPRBSConfig(Structure):
    pass
tagXAUIPRBSConfig._fields_ = [
    ('ucPRBSEnable', c_ubyte),
    ('u64DurationCount', U64),
    ('ucPreEmphasisEnable', c_ubyte),
    ('ucLaneSkewEnable', c_ubyte),
    ('ucReserved', c_ubyte * 21),
]
assert sizeof(tagXAUIPRBSConfig) == 36, sizeof(tagXAUIPRBSConfig)
assert alignment(tagXAUIPRBSConfig) == 4, alignment(tagXAUIPRBSConfig)
XAUIPRBSConfig = tagXAUIPRBSConfig
class tagXAUIPRBSStatusInfo(Structure):
    pass
tagXAUIPRBSStatusInfo._fields_ = [
    ('ucPRBSStatus', c_ubyte),
    ('ulPRBSChannelAError', c_ulong),
    ('ulPRBSChannelBError', c_ulong),
    ('ulPRBSChannelCError', c_ulong),
    ('ulPRBSChannelDError', c_ulong),
    ('ucReserved', c_ubyte * 15),
]
assert sizeof(tagXAUIPRBSStatusInfo) == 36, sizeof(tagXAUIPRBSStatusInfo)
assert alignment(tagXAUIPRBSStatusInfo) == 4, alignment(tagXAUIPRBSStatusInfo)
XAUIPRBSStatusInfo = tagXAUIPRBSStatusInfo
class tagXFPProfile(Structure):
    pass
tagXFPProfile._fields_ = [
    ('ucModuleDetected', c_ubyte),
    ('ucModuleIdentifier', c_ubyte),
    ('ucExtendedModuleID', c_ubyte),
    ('ucConnectorType', c_ubyte),
    ('ucTransceiverType', c_ubyte * 8),
    ('ucSerialEncodingAlgorithm', c_ubyte),
    ('ucMinBitRate', c_ubyte),
    ('ucMaxBitRate', c_ubyte),
    ('ucLinkLength', c_ubyte * 5),
    ('ucDeviceTechnology', c_ubyte),
    ('ucVendorName', c_ubyte * 16),
    ('ucCDRSupport', c_ubyte),
    ('ucVendorOUI', c_ubyte * 3),
    ('ucVendorPartNumber', c_ubyte * 16),
    ('ucVendorRevision', c_ubyte * 2),
    ('ucLaserWavelength', c_ubyte * 2),
    ('ucLaserWavelengthTolerance', c_ubyte * 2),
    ('ucMaxCaseTemp', c_ubyte),
    ('ucCCBase', c_ubyte),
    ('ucPowerSupplyFields', c_ubyte * 4),
    ('ucVendorSerialNumber', c_ubyte * 16),
    ('ucVendorDateCode', c_ubyte * 8),
    ('ucDiagMonitoringType', c_ubyte),
    ('ucEnhancedOptions', c_ubyte),
    ('ucAuxMonitoring', c_ubyte),
    ('ucCCExt', c_ubyte),
    ('ucReserved', c_ubyte * 256),
]
assert sizeof(tagXFPProfile) == 353, sizeof(tagXFPProfile)
assert alignment(tagXFPProfile) == 1, alignment(tagXFPProfile)
XFPProfile = tagXFPProfile
class tagL2StatsInfo(Structure):
    pass
tagL2StatsInfo._fields_ = [
    ('u64TxFrame', U64),
    ('u64TxByte', U64),
    ('u64TxTrigger', U64),
    ('ulTxLatency', c_ulong),
    ('u64RxFrame', U64),
    ('u64RxByte', U64),
    ('u64RxTrigger', U64),
    ('ulRxLatency', c_ulong),
    ('u64RxCRCError', U64),
    ('u64RxOversize', U64),
    ('u64RxUndersize', U64),
]
assert sizeof(tagL2StatsInfo) == 80, sizeof(tagL2StatsInfo)
assert alignment(tagL2StatsInfo) == 4, alignment(tagL2StatsInfo)
L2StatsInfo = tagL2StatsInfo
class tagL2RateInfo(Structure):
    pass
tagL2RateInfo._fields_ = [
    ('ulTxFrameRate', c_ulong),
    ('ulTxByteRate', c_ulong),
    ('ulTxTriggerRate', c_ulong),
    ('ulRxFrameRate', c_ulong),
    ('ulRxByteRate', c_ulong),
    ('ulRxTriggerRate', c_ulong),
    ('ulRxCRCErrorRate', c_ulong),
    ('ulRxOversizeRate', c_ulong),
    ('ulRxUndersizeRate', c_ulong),
]
assert sizeof(tagL2RateInfo) == 36, sizeof(tagL2RateInfo)
assert alignment(tagL2RateInfo) == 4, alignment(tagL2RateInfo)
L2RateInfo = tagL2RateInfo
class tagLayer3DHCPStatsInfo(Structure):
    pass
tagLayer3DHCPStatsInfo._fields_ = [
    ('ulStreamNumber', c_ulong),
    ('uiFailure', c_ushort),
    ('uiTimeout', c_ushort),
    ('uiDiscoverSent', c_ushort),
    ('uiOfferRcvd', c_ushort),
    ('uiReqSent', c_ushort),
    ('uiAckRcvd', c_ushort),
    ('uiNakRcvd', c_ushort),
    ('uiReleaseSent', c_ushort),
    ('uiDeclineSent', c_ushort),
    ('uiReserved', c_ushort),
]
assert sizeof(tagLayer3DHCPStatsInfo) == 24, sizeof(tagLayer3DHCPStatsInfo)
assert alignment(tagLayer3DHCPStatsInfo) == 4, alignment(tagLayer3DHCPStatsInfo)
Layer3DHCPStatsInfo = tagLayer3DHCPStatsInfo
class tagLayer3DHCPHostInfo(Structure):
    pass
tagLayer3DHCPHostInfo._fields_ = [
    ('ulStreamNumber', c_ulong),
    ('ucHostIP', c_ubyte * 4),
    ('ucServerIP', c_ubyte * 4),
    ('ucServerMAC', c_ubyte * 6),
    ('ucReserved', c_ubyte * 2),
    ('ucGateway', c_ubyte * 4),
    ('ucSubnet', c_ubyte * 4),
    ('uiState', c_ushort),
    ('uiReserved', c_ushort),
    ('ulTime', c_ulong),
]
assert sizeof(tagLayer3DHCPHostInfo) == 36, sizeof(tagLayer3DHCPHostInfo)
assert alignment(tagLayer3DHCPHostInfo) == 4, alignment(tagLayer3DHCPHostInfo)
Layer3DHCPHostInfo = tagLayer3DHCPHostInfo
class tagLayer3DHCPExtendedHostInfo(Structure):
    pass
tagLayer3DHCPExtendedHostInfo._fields_ = [
    ('ulStreamNumber', c_ulong),
    ('ucHostIP', c_ubyte * 4),
    ('ucServerIP', c_ubyte * 4),
    ('ucServerMAC', c_ubyte * 6),
    ('ucReserved', c_ubyte * 2),
    ('ucGateway', c_ubyte * 4),
    ('ucSubnet', c_ubyte * 4),
    ('uiState', c_ushort),
    ('ucReserved2', c_ubyte * 2),
    ('ulTime', c_ulong),
    ('szServerName', c_ubyte * 64),
    ('szFileName', c_ubyte * 128),
    ('ucOption', c_ubyte * 312),
]
assert sizeof(tagLayer3DHCPExtendedHostInfo) == 540, sizeof(tagLayer3DHCPExtendedHostInfo)
assert alignment(tagLayer3DHCPExtendedHostInfo) == 4, alignment(tagLayer3DHCPExtendedHostInfo)
Layer3DHCPExtendedHostInfo = tagLayer3DHCPExtendedHostInfo
class tagLayer3DHCPConfig(Structure):
    pass
tagLayer3DHCPConfig._fields_ = [
    ('ulRate', c_ulong),
    ('ucBroadcastEnable', c_ubyte),
    ('ucReserved1', c_ubyte * 3),
    ('ulReserved', c_ulong * 5),
]
assert sizeof(tagLayer3DHCPConfig) == 28, sizeof(tagLayer3DHCPConfig)
assert alignment(tagLayer3DHCPConfig) == 4, alignment(tagLayer3DHCPConfig)
Layer3DHCPConfig = tagLayer3DHCPConfig
class tagLayer3DHCPRenew(Structure):
    pass
tagLayer3DHCPRenew._fields_ = [
    ('ulIndex', c_ulong),
    ('ulCount', c_ulong),
    ('ucReserved', c_ubyte * 8),
]
assert sizeof(tagLayer3DHCPRenew) == 16, sizeof(tagLayer3DHCPRenew)
assert alignment(tagLayer3DHCPRenew) == 4, alignment(tagLayer3DHCPRenew)
Layer3DHCPRenew = tagLayer3DHCPRenew
class tagLayer3DHCPPortCounterInfo(Structure):
    pass
tagLayer3DHCPPortCounterInfo._fields_ = [
    ('uiFailure', c_ushort),
    ('uiTimeout', c_ushort),
    ('uiDiscoverSent', c_ushort),
    ('uiOfferReceived', c_ushort),
    ('uiRequestSent', c_ushort),
    ('uiAckReceived', c_ushort),
    ('uiNakReceived', c_ushort),
    ('uiReleaseSent', c_ushort),
    ('uiDeclineSent', c_ushort),
    ('ucReserved', c_ubyte * 128),
]
assert sizeof(tagLayer3DHCPPortCounterInfo) == 146, sizeof(tagLayer3DHCPPortCounterInfo)
assert alignment(tagLayer3DHCPPortCounterInfo) == 2, alignment(tagLayer3DHCPPortCounterInfo)
Layer3DHCPPortCounterInfo = tagLayer3DHCPPortCounterInfo
class tagLayer3DHCPPortSessionInfo(Structure):
    pass
tagLayer3DHCPPortSessionInfo._fields_ = [
    ('ulStreams', c_ulong),
    ('ulAttempting', c_ulong),
    ('ulTotalFailure', c_ulong),
    ('ulTotalSuccess', c_ulong),
    ('ulTotalAttempt', c_ulong),
    ('ulTotalRenewAttempt', c_ulong),
    ('ulTotalRenewFailure', c_ulong),
    ('ulTotalRenewSuccess', c_ulong),
    ('u64MinTime', U64),
    ('u64MaxTime', U64),
    ('u64AccTime', U64),
    ('ulBound', c_ulong),
    ('ulSelecting', c_ulong),
    ('ulRequesting', c_ulong),
    ('ulInit', c_ulong),
    ('ulRenewing', c_ulong),
    ('ulBoundFromRenew', c_ulong),
    ('ulUndefined', c_ulong),
    ('u64StartTime', U64),
    ('u64LastSuccess', U64),
    ('u64RetrievalTime', U64),
    ('ucReserved', c_ubyte * 128),
]
assert sizeof(tagLayer3DHCPPortSessionInfo) == 236, sizeof(tagLayer3DHCPPortSessionInfo)
assert alignment(tagLayer3DHCPPortSessionInfo) == 4, alignment(tagLayer3DHCPPortSessionInfo)
Layer3DHCPPortSessionInfo = tagLayer3DHCPPortSessionInfo
class tagLayer3DHCPV2HostInfo(Structure):
    pass
tagLayer3DHCPV2HostInfo._fields_ = [
    ('ulStreamNumber', c_ulong),
    ('ucHostIP', c_ubyte * 4),
    ('ucServerIP', c_ubyte * 4),
    ('ucServerMAC', c_ubyte * 6),
    ('ucGateway', c_ubyte * 4),
    ('ucSubnet', c_ubyte * 4),
    ('uiState', c_ushort),
    ('ulTime', c_ulong),
    ('ulLeaseTime', c_ulong),
    ('ucReserved', c_ubyte * 128),
]
assert sizeof(tagLayer3DHCPV2HostInfo) == 164, sizeof(tagLayer3DHCPV2HostInfo)
assert alignment(tagLayer3DHCPV2HostInfo) == 4, alignment(tagLayer3DHCPV2HostInfo)
Layer3DHCPV2HostInfo = tagLayer3DHCPV2HostInfo
class tagLayer3DHCPV2ExtendedHostInfo(Structure):
    pass
tagLayer3DHCPV2ExtendedHostInfo._fields_ = [
    ('ulStreamNumber', c_ulong),
    ('ucHostIP', c_ubyte * 4),
    ('ucServerIP', c_ubyte * 4),
    ('ucServerMAC', c_ubyte * 6),
    ('ucGateway', c_ubyte * 4),
    ('ucSubnet', c_ubyte * 4),
    ('uiState', c_ushort),
    ('ulTime', c_ulong),
    ('szServerName', c_ubyte * 64),
    ('szFileName', c_ubyte * 128),
    ('ucOption', c_ubyte * 312),
    ('ulLeaseTime', c_ulong),
    ('ucReserved', c_ubyte * 128),
]
assert sizeof(tagLayer3DHCPV2ExtendedHostInfo) == 668, sizeof(tagLayer3DHCPV2ExtendedHostInfo)
assert alignment(tagLayer3DHCPV2ExtendedHostInfo) == 4, alignment(tagLayer3DHCPV2ExtendedHostInfo)
Layer3DHCPV2ExtendedHostInfo = tagLayer3DHCPV2ExtendedHostInfo
class tagUSBInfo(Structure):
    pass
tagUSBInfo._fields_ = [
    ('szUSBMAC', c_ubyte * 6),
]
assert sizeof(tagUSBInfo) == 6, sizeof(tagUSBInfo)
assert alignment(tagUSBInfo) == 1, alignment(tagUSBInfo)
USBInfo = tagUSBInfo
class tagUSBProtocolPower(Structure):
    pass
tagUSBProtocolPower._fields_ = [
    ('ucProtocol', c_ubyte),
    ('ucPower', c_ubyte),
]
assert sizeof(tagUSBProtocolPower) == 2, sizeof(tagUSBProtocolPower)
assert alignment(tagUSBProtocolPower) == 1, alignment(tagUSBProtocolPower)
USBProtocolPower = tagUSBProtocolPower
class tagLayer3GroupInfo(Structure):
    pass
tagLayer3GroupInfo._fields_ = [
    ('ulReserved', c_ulong),
    ('ucGroupId', c_ubyte),
    ('ulFrameLength', c_ulong),
    ('ulFrameGap', c_ulong),
    ('uiNumberOfStreams', c_ushort),
    ('uiNumberOfFrames', c_ushort),
    ('uiMembers', c_ushort * 100),
]
assert sizeof(tagLayer3GroupInfo) == 220, sizeof(tagLayer3GroupInfo)
assert alignment(tagLayer3GroupInfo) == 4, alignment(tagLayer3GroupInfo)
Layer3GroupInfo = tagLayer3GroupInfo
class tagLayer3StreamGroup(Structure):
    pass
tagLayer3StreamGroup._fields_ = [
    ('ulFrameLength', c_ulong),
    ('ulFrameGap', c_ulong),
    ('uiNumberOfStreams', c_ushort),
    ('uiMembers', c_ushort * 100),
]
assert sizeof(tagLayer3StreamGroup) == 212, sizeof(tagLayer3StreamGroup)
assert alignment(tagLayer3StreamGroup) == 4, alignment(tagLayer3StreamGroup)
Layer3StreamGroup = tagLayer3StreamGroup
class tagLayer3StreamTransmitMode(Structure):
    pass
tagLayer3StreamTransmitMode._fields_ = [
    ('ulMode', c_ulong),
    ('ulReserved', c_ulong * 3),
]
assert sizeof(tagLayer3StreamTransmitMode) == 16, sizeof(tagLayer3StreamTransmitMode)
assert alignment(tagLayer3StreamTransmitMode) == 4, alignment(tagLayer3StreamTransmitMode)
Layer3StreamTransmitMode = tagLayer3StreamTransmitMode
class tagLayer3ModifyStreamDelta(Structure):
    pass
tagLayer3ModifyStreamDelta._fields_ = [
    ('ulIndex', c_ulong),
    ('ulCount', c_ulong),
    ('ulField', c_ulong),
    ('ulFieldRepeat', c_ulong),
    ('ulDelta', c_ulong),
]
assert sizeof(tagLayer3ModifyStreamDelta) == 20, sizeof(tagLayer3ModifyStreamDelta)
assert alignment(tagLayer3ModifyStreamDelta) == 4, alignment(tagLayer3ModifyStreamDelta)
Layer3ModifyStreamDelta = tagLayer3ModifyStreamDelta
class tagLayer3ModifyStreamArray(Structure):
    pass
tagLayer3ModifyStreamArray._fields_ = [
    ('ulIndex', c_ulong),
    ('ulCount', c_ulong),
    ('ulField', c_ulong),
    ('ulFieldCount', c_ulong),
    ('ulFieldRepeat', c_ulong),
    ('ulData', c_ulong * 8192),
]
assert sizeof(tagLayer3ModifyStreamArray) == 32788, sizeof(tagLayer3ModifyStreamArray)
assert alignment(tagLayer3ModifyStreamArray) == 4, alignment(tagLayer3ModifyStreamArray)
Layer3ModifyStreamArray = tagLayer3ModifyStreamArray
class tagLayer3Address(Structure):
    pass
tagLayer3Address._fields_ = [
    ('szMACAddress', c_ubyte * 6),
    ('IP', c_ubyte * 4),
    ('Netmask', c_ubyte * 4),
    ('Gateway', c_ubyte * 4),
    ('PingTargetAddress', c_ubyte * 4),
    ('iControl', c_int),
    ('iPingTime', c_int),
    ('iSNMPTime', c_int),
    ('iRIPTime', c_int),
    ('iGeneralIPResponse', c_int),
]
assert sizeof(tagLayer3Address) == 44, sizeof(tagLayer3Address)
assert alignment(tagLayer3Address) == 4, alignment(tagLayer3Address)
Layer3Address = tagLayer3Address
class tagLayer3IPv6Address(Structure):
    pass
tagLayer3IPv6Address._fields_ = [
    ('ucMACAddress', c_ubyte * 6),
    ('ucPrefixLength', c_ubyte),
    ('IP', c_ubyte * 16),
    ('Gateway', c_ubyte * 16),
    ('ulControl', c_ulong),
    ('ucReserved', c_ubyte * 25),
]
assert sizeof(tagLayer3IPv6Address) == 72, sizeof(tagLayer3IPv6Address)
assert alignment(tagLayer3IPv6Address) == 4, alignment(tagLayer3IPv6Address)
Layer3IPv6Address = tagLayer3IPv6Address
class tagLayer3IPv6Protocol(Structure):
    pass
tagLayer3IPv6Protocol._fields_ = [
    ('ucPingTargetAddress', c_ubyte * 16),
    ('uiPingTime', c_ushort),
    ('ucReserved', c_ubyte * 10),
]
assert sizeof(tagLayer3IPv6Protocol) == 28, sizeof(tagLayer3IPv6Protocol)
assert alignment(tagLayer3IPv6Protocol) == 2, alignment(tagLayer3IPv6Protocol)
Layer3IPv6Protocol = tagLayer3IPv6Protocol
class tagLayer3CaptureCountInfo(Structure):
    pass
tagLayer3CaptureCountInfo._fields_ = [
    ('ulCount', c_ulong),
]
assert sizeof(tagLayer3CaptureCountInfo) == 4, sizeof(tagLayer3CaptureCountInfo)
assert alignment(tagLayer3CaptureCountInfo) == 4, alignment(tagLayer3CaptureCountInfo)
Layer3CaptureCountInfo = tagLayer3CaptureCountInfo
class tagLayer3CaptureData(Structure):
    pass
tagLayer3CaptureData._fields_ = [
    ('uiLength', c_ushort),
    ('cData', c_char * 2048),
]
assert sizeof(tagLayer3CaptureData) == 2050, sizeof(tagLayer3CaptureData)
assert alignment(tagLayer3CaptureData) == 2, alignment(tagLayer3CaptureData)
Layer3CaptureData = tagLayer3CaptureData
class tagLayer3CaptureDetailInfo(Structure):
    pass
tagLayer3CaptureDetailInfo._fields_ = [
    ('ulStatus', c_ulong),
    ('ulPacketLength', c_ulong),
    ('ulRxTimestamp', c_ulong),
    ('ulTxTimestamp', c_ulong),
    ('ulSequenceNumber', c_ulong),
    ('ulStreamNumber', c_ulong),
    ('reserved', c_ubyte * 96),
]
assert sizeof(tagLayer3CaptureDetailInfo) == 120, sizeof(tagLayer3CaptureDetailInfo)
assert alignment(tagLayer3CaptureDetailInfo) == 4, alignment(tagLayer3CaptureDetailInfo)
Layer3CaptureDetailInfo = tagLayer3CaptureDetailInfo
class tagLayer3CaptureSetup(Structure):
    pass
tagLayer3CaptureSetup._fields_ = [
    ('ulCaptureMode', c_ulong),
    ('ulCaptureLength', c_ulong),
    ('ulCaptureEvents', c_ulong),
    ('uiFilterFrameLength', c_ushort),
    ('ucReserved', c_ubyte * 10),
]
assert sizeof(tagLayer3CaptureSetup) == 24, sizeof(tagLayer3CaptureSetup)
assert alignment(tagLayer3CaptureSetup) == 4, alignment(tagLayer3CaptureSetup)
Layer3CaptureSetup = tagLayer3CaptureSetup
class tagLayer3SequenceInfo(Structure):
    pass
tagLayer3SequenceInfo._fields_ = [
    ('ulStream', c_ulong),
    ('ulFrames', c_ulong),
    ('ulSequenced', c_ulong),
    ('ulDuplicate', c_ulong),
    ('ulLost', c_ulong),
]
assert sizeof(tagLayer3SequenceInfo) == 20, sizeof(tagLayer3SequenceInfo)
assert alignment(tagLayer3SequenceInfo) == 4, alignment(tagLayer3SequenceInfo)
Layer3SequenceInfo = tagLayer3SequenceInfo
class tagLayer3LatencyInfo(Structure):
    pass
tagLayer3LatencyInfo._fields_ = [
    ('uiMinimum', c_ushort),
    ('uiMaximum', c_ushort),
    ('ulTotal', c_ulong),
    ('ulFrames', c_ulong),
]
assert sizeof(tagLayer3LatencyInfo) == 12, sizeof(tagLayer3LatencyInfo)
assert alignment(tagLayer3LatencyInfo) == 4, alignment(tagLayer3LatencyInfo)
Layer3LatencyInfo = tagLayer3LatencyInfo
class tagLayer3LongLatencyInfo(Structure):
    pass
tagLayer3LongLatencyInfo._fields_ = [
    ('ulMinimum', c_ulong),
    ('ulMaximum', c_ulong),
    ('u64Total', U64),
    ('ulFrames', c_ulong),
]
assert sizeof(tagLayer3LongLatencyInfo) == 20, sizeof(tagLayer3LongLatencyInfo)
assert alignment(tagLayer3LongLatencyInfo) == 4, alignment(tagLayer3LongLatencyInfo)
Layer3LongLatencyInfo = tagLayer3LongLatencyInfo
class tagLayer3StreamLatencyInfo(Structure):
    pass
tagLayer3StreamLatencyInfo._fields_ = [
    ('ulStream', c_ulong),
    ('uiAverage', c_ushort),
    ('uiMinimum', c_ushort),
    ('uiMaximum', c_ushort),
    ('ulFrames', c_ulong),
]
assert sizeof(tagLayer3StreamLatencyInfo) == 16, sizeof(tagLayer3StreamLatencyInfo)
assert alignment(tagLayer3StreamLatencyInfo) == 4, alignment(tagLayer3StreamLatencyInfo)
Layer3StreamLatencyInfo = tagLayer3StreamLatencyInfo
class tagLayer3StreamLatencyInfo32(Structure):
    pass
tagLayer3StreamLatencyInfo32._fields_ = [
    ('ulStream', c_ulong),
    ('ulFrames', c_ulong),
    ('u64Total', U64),
    ('ulMinimum', c_ulong),
    ('ulMaximum', c_ulong),
]
assert sizeof(tagLayer3StreamLatencyInfo32) == 24, sizeof(tagLayer3StreamLatencyInfo32)
assert alignment(tagLayer3StreamLatencyInfo32) == 4, alignment(tagLayer3StreamLatencyInfo32)
Layer3StreamLatencyInfo32 = tagLayer3StreamLatencyInfo32
Layer3V1StreamLatencyInfo = Layer3StreamLatencyInfo32
class tagLayer3StreamLongLatencyInfo(Structure):
    pass
tagLayer3StreamLongLatencyInfo._fields_ = [
    ('ulStream', c_ulong),
    ('u64Total', U64),
    ('ulMinimum', c_ulong),
    ('ulMaximum', c_ulong),
    ('ulTotalFrames', c_ulong),
    ('ulSequenced', c_ulong),
    ('ulDuplicate', c_ulong),
    ('ulLost', c_ulong),
    ('ulFrames', c_ulong * 16),
]
assert sizeof(tagLayer3StreamLongLatencyInfo) == 100, sizeof(tagLayer3StreamLongLatencyInfo)
assert alignment(tagLayer3StreamLongLatencyInfo) == 4, alignment(tagLayer3StreamLongLatencyInfo)
Layer3StreamLongLatencyInfo = tagLayer3StreamLongLatencyInfo
class tagLayer3StreamJitterComboInfo(Structure):
    pass
tagLayer3StreamJitterComboInfo._fields_ = [
    ('ulStream', c_ulong),
    ('u64Total', U64),
    ('ulMinimum', c_ulong),
    ('ulMaximum', c_ulong),
    ('ulTotalFrames', c_ulong),
    ('u64TotalJitter', U64),
    ('ulReserved', c_ulong),
    ('ulFrames', c_ulong * 16),
]
assert sizeof(tagLayer3StreamJitterComboInfo) == 100, sizeof(tagLayer3StreamJitterComboInfo)
assert alignment(tagLayer3StreamJitterComboInfo) == 4, alignment(tagLayer3StreamJitterComboInfo)
Layer3StreamJitterComboInfo = tagLayer3StreamJitterComboInfo
class tagLayer3StreamMulticastInfo(Structure):
    pass
tagLayer3StreamMulticastInfo._fields_ = [
    ('ulStream', c_ulong),
    ('u64Total', U64),
    ('ulMinimum', c_ulong),
    ('ulMaximum', c_ulong),
    ('ulRxFrames', c_ulong),
    ('ulFirstRxTime', c_ulong),
    ('ulLastRxTime', c_ulong),
    ('ulReserved', c_ulong),
    ('ulFrames', c_ulong * 16),
]
assert sizeof(tagLayer3StreamMulticastInfo) == 100, sizeof(tagLayer3StreamMulticastInfo)
assert alignment(tagLayer3StreamMulticastInfo) == 4, alignment(tagLayer3StreamMulticastInfo)
Layer3StreamMulticastInfo = tagLayer3StreamMulticastInfo
class tagLayer3StreamDistributionInfo(Structure):
    pass
tagLayer3StreamDistributionInfo._fields_ = [
    ('ulStream', c_ulong),
    ('ulFrames', c_ulong * 16),
]
assert sizeof(tagLayer3StreamDistributionInfo) == 68, sizeof(tagLayer3StreamDistributionInfo)
assert alignment(tagLayer3StreamDistributionInfo) == 4, alignment(tagLayer3StreamDistributionInfo)
Layer3StreamDistributionInfo = tagLayer3StreamDistributionInfo
class tagLayer3HistTagInfo(Structure):
    pass
tagLayer3HistTagInfo._fields_ = [
    ('ulStream', c_ulong),
    ('ulSequence', c_ulong),
    ('ulTransmitTime', c_ulong),
    ('ulReceiveTime', c_ulong),
]
assert sizeof(tagLayer3HistTagInfo) == 16, sizeof(tagLayer3HistTagInfo)
assert alignment(tagLayer3HistTagInfo) == 4, alignment(tagLayer3HistTagInfo)
Layer3HistTagInfo = tagLayer3HistTagInfo
class tagLayer3HistLatency(Structure):
    pass
tagLayer3HistLatency._fields_ = [
    ('ulInterval', c_ulong),
]
assert sizeof(tagLayer3HistLatency) == 4, sizeof(tagLayer3HistLatency)
assert alignment(tagLayer3HistLatency) == 4, alignment(tagLayer3HistLatency)
Layer3HistLatency = tagLayer3HistLatency
class tagLayer3HistDistribution(Structure):
    pass
tagLayer3HistDistribution._fields_ = [
    ('uiInterval', c_ushort * 16),
]
assert sizeof(tagLayer3HistDistribution) == 32, sizeof(tagLayer3HistDistribution)
assert alignment(tagLayer3HistDistribution) == 2, alignment(tagLayer3HistDistribution)
Layer3HistDistribution = tagLayer3HistDistribution
class tagLayer3V2HistDistribution(Structure):
    pass
tagLayer3V2HistDistribution._fields_ = [
    ('ulInterval', c_ulong * 16),
]
assert sizeof(tagLayer3V2HistDistribution) == 64, sizeof(tagLayer3V2HistDistribution)
assert alignment(tagLayer3V2HistDistribution) == 4, alignment(tagLayer3V2HistDistribution)
Layer3V2HistDistribution = tagLayer3V2HistDistribution
class tagLayer3HistActiveTest(Structure):
    pass
tagLayer3HistActiveTest._fields_ = [
    ('ulTest', c_ulong),
    ('ulRecords', c_ulong),
]
assert sizeof(tagLayer3HistActiveTest) == 8, sizeof(tagLayer3HistActiveTest)
assert alignment(tagLayer3HistActiveTest) == 4, alignment(tagLayer3HistActiveTest)
Layer3HistActiveTest = tagLayer3HistActiveTest
class tagLayer3IGMPInit(Structure):
    pass
tagLayer3IGMPInit._fields_ = [
    ('ucVersion', c_ubyte),
    ('ucOptions', c_ubyte),
    ('uiMaxGroups', c_ushort),
]
assert sizeof(tagLayer3IGMPInit) == 4, sizeof(tagLayer3IGMPInit)
assert alignment(tagLayer3IGMPInit) == 2, alignment(tagLayer3IGMPInit)
Layer3IGMPInit = tagLayer3IGMPInit
class tagNSIGMPConfig(Structure):
    pass
tagNSIGMPConfig._fields_ = [
    ('ucVersion', c_ubyte),
    ('ucOptions', c_ubyte),
    ('ucReserved', c_ubyte * 2),
]
assert sizeof(tagNSIGMPConfig) == 4, sizeof(tagNSIGMPConfig)
assert alignment(tagNSIGMPConfig) == 1, alignment(tagNSIGMPConfig)
NSIGMPConfig = tagNSIGMPConfig
class tagNSIGMPAddress(Structure):
    pass
tagNSIGMPAddress._fields_ = [
    ('ucIPAddress', c_ubyte * 4),
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ulDLCI', c_ulong),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSIGMPAddress) == 32, sizeof(tagNSIGMPAddress)
assert alignment(tagNSIGMPAddress) == 4, alignment(tagNSIGMPAddress)
NSIGMPAddress = tagNSIGMPAddress
class tagNSIGMPAddressVLAN(Structure):
    pass
tagNSIGMPAddressVLAN._fields_ = [
    ('ucIPAddress', c_ubyte * 4),
    ('uiTPID', c_ushort),
    ('ucPRI', c_ubyte),
    ('ucCFI', c_ubyte),
    ('uiVID', c_ushort),
    ('ucReserved', c_ubyte * 4),
]
assert sizeof(tagNSIGMPAddressVLAN) == 14, sizeof(tagNSIGMPAddressVLAN)
assert alignment(tagNSIGMPAddressVLAN) == 2, alignment(tagNSIGMPAddressVLAN)
NSIGMPAddressVLAN = tagNSIGMPAddressVLAN
class tagNSIGMPCounterInfo(Structure):
    pass
tagNSIGMPCounterInfo._fields_ = [
    ('ulTxFrames', c_ulong),
    ('ulTxJoinGroups', c_ulong),
    ('ulTxLeaveGroups', c_ulong),
    ('ulRxFrames', c_ulong),
    ('ulRxUnknownType', c_ulong),
    ('ulRxIPChecksumErrors', c_ulong),
    ('ulRxIGMPChecksumErrors', c_ulong),
    ('ulRxIGMPLengthErrors', c_ulong),
    ('ulRxWrongVersionQueries', c_ulong),
    ('ucReserved', c_ubyte * 96),
]
assert sizeof(tagNSIGMPCounterInfo) == 132, sizeof(tagNSIGMPCounterInfo)
assert alignment(tagNSIGMPCounterInfo) == 4, alignment(tagNSIGMPCounterInfo)
NSIGMPCounterInfo = tagNSIGMPCounterInfo
class tagNSIGMPTimestampInfo(Structure):
    pass
tagNSIGMPTimestampInfo._fields_ = [
    ('ucIPAddress', c_ubyte * 4),
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ulDLCI', c_ulong),
    ('ulJoinTime', c_ulong),
    ('ulLeaveTime', c_ulong),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSIGMPTimestampInfo) == 40, sizeof(tagNSIGMPTimestampInfo)
assert alignment(tagNSIGMPTimestampInfo) == 4, alignment(tagNSIGMPTimestampInfo)
NSIGMPTimestampInfo = tagNSIGMPTimestampInfo
class tagLayer3IGMPJoin(Structure):
    pass
tagLayer3IGMPJoin._fields_ = [
    ('ucIPAddress', c_ubyte * 4),
]
assert sizeof(tagLayer3IGMPJoin) == 4, sizeof(tagLayer3IGMPJoin)
assert alignment(tagLayer3IGMPJoin) == 1, alignment(tagLayer3IGMPJoin)
Layer3IGMPJoin = tagLayer3IGMPJoin
class tagLayer3IGMPLeave(Structure):
    pass
tagLayer3IGMPLeave._fields_ = [
    ('ucIPAddress', c_ubyte * 4),
]
assert sizeof(tagLayer3IGMPLeave) == 4, sizeof(tagLayer3IGMPLeave)
assert alignment(tagLayer3IGMPLeave) == 1, alignment(tagLayer3IGMPLeave)
Layer3IGMPLeave = tagLayer3IGMPLeave
class tagIGMPJoinLeaveTimeStampInfo(Structure):
    pass
tagIGMPJoinLeaveTimeStampInfo._fields_ = [
    ('ucIPAddress', c_ubyte * 4),
    ('ulJoinTime', c_ulong),
    ('ulLeaveTime', c_ulong),
]
assert sizeof(tagIGMPJoinLeaveTimeStampInfo) == 12, sizeof(tagIGMPJoinLeaveTimeStampInfo)
assert alignment(tagIGMPJoinLeaveTimeStampInfo) == 4, alignment(tagIGMPJoinLeaveTimeStampInfo)
IGMPJoinLeaveTimeStampInfo = tagIGMPJoinLeaveTimeStampInfo
class tagNSIGMPVLANTimestampInfo(Structure):
    pass
tagNSIGMPVLANTimestampInfo._fields_ = [
    ('ucIPAddress', c_ubyte * 4),
    ('ulVLANId', c_ulong),
    ('ulJoinTime', c_ulong),
    ('ulLeaveTime', c_ulong),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSIGMPVLANTimestampInfo) == 32, sizeof(tagNSIGMPVLANTimestampInfo)
assert alignment(tagNSIGMPVLANTimestampInfo) == 4, alignment(tagNSIGMPVLANTimestampInfo)
NSIGMPVLANTimestampInfo = tagNSIGMPVLANTimestampInfo
class tagL3DataCheck(Structure):
    pass
tagL3DataCheck._fields_ = [
    ('bRcvMarkerCheck', c_ubyte),
    ('ucReserved', c_ubyte * 3),
    ('ucMarker', c_ubyte * 8),
]
assert sizeof(tagL3DataCheck) == 12, sizeof(tagL3DataCheck)
assert alignment(tagL3DataCheck) == 1, alignment(tagL3DataCheck)
L3DataCheck = tagL3DataCheck
class tagL3StreamExtension(Structure):
    pass
tagL3StreamExtension._fields_ = [
    ('ulFrameRate', c_ulong),
    ('ulTxMode', c_ulong),
    ('ulBurstCount', c_ulong),
    ('ulMBurstCount', c_ulong),
    ('ulBurstGap', c_ulong),
    ('uiInitialSeqNumber', c_ushort),
    ('ucIPHeaderChecksumError', c_ubyte),
    ('ucIPTotalLengthError', c_ubyte),
    ('ucIPManipulateMode', c_ubyte),
    ('ucIncUDPPort', c_ubyte),
    ('uiIPLimitCount', c_ushort),
    ('ulStartOffset', c_ulong),
    ('ulBGPatternIndex', c_ulong),
    ('ucDataCheckEnable', c_ubyte),
    ('ucCRCErrorEnable', c_ubyte),
    ('ucRandomBGEnable', c_ubyte),
    ('ucDataIntegrityErrorEnable', c_ubyte),
    ('ucStepCount', c_ubyte),
    ('ucIPBitsOffset', c_ubyte),
    ('ucMPLSCount', c_ubyte),
    ('ucIPOptionsCount', c_ubyte),
    ('ulCustomStreamID', c_ulong),
    ('ucEnableCustomStreamID', c_ubyte),
    ('ucOAMHeaderPacketType', c_ubyte),
    ('ucStepCount2', c_ubyte),
    ('uiIPLimitCount2', c_ushort),
    ('uiBlockCount', c_ushort),
    ('uiBlockCount2', c_ushort),
    ('ucMulticastKeepAliveEnable', c_ubyte),
    ('ucReserved', c_ubyte * 2),
]
assert sizeof(tagL3StreamExtension) == 64, sizeof(tagL3StreamExtension)
assert alignment(tagL3StreamExtension) == 4, alignment(tagL3StreamExtension)
L3StreamExtension = tagL3StreamExtension
class tagMPLSItem(Structure):
    pass
tagMPLSItem._fields_ = [
    ('ulLabel', c_ulong),
    ('ucExperimentalUse', c_ubyte),
    ('ucBottomStack', c_ubyte),
    ('ucTimeToLive', c_ubyte),
]
assert sizeof(tagMPLSItem) == 8, sizeof(tagMPLSItem)
assert alignment(tagMPLSItem) == 4, alignment(tagMPLSItem)
MPLSItem = tagMPLSItem
class tagNSMPLSLabel(Structure):
    pass
tagNSMPLSLabel._fields_ = [
    ('ulLabel', c_ulong),
    ('ucExperimentalUse', c_ubyte),
    ('ucBottomStack', c_ubyte),
    ('ucTimeToLive', c_ubyte),
]
assert sizeof(tagNSMPLSLabel) == 8, sizeof(tagNSMPLSLabel)
assert alignment(tagNSMPLSLabel) == 4, alignment(tagNSMPLSLabel)
NSMPLSLabel = tagNSMPLSLabel
class tagNSMPLSList(Structure):
    pass
tagNSMPLSList._fields_ = [
    ('uiNumLabels', c_ushort),
    ('Labels', NSMPLSLabel * 32),
]
assert sizeof(tagNSMPLSList) == 260, sizeof(tagNSMPLSList)
assert alignment(tagNSMPLSList) == 4, alignment(tagNSMPLSList)
NSMPLSList = tagNSMPLSList
class tagVoiceTestSetup(Structure):
    pass
tagVoiceTestSetup._fields_ = [
    ('ulTestDuration', c_ulong),
    ('ulReserved', c_ulong * 7),
]
assert sizeof(tagVoiceTestSetup) == 32, sizeof(tagVoiceTestSetup)
assert alignment(tagVoiceTestSetup) == 4, alignment(tagVoiceTestSetup)
VoiceTestSetup = tagVoiceTestSetup
class tagL3StreamBGConfig(Structure):
    pass
tagL3StreamBGConfig._fields_ = [
    ('ucPattern', c_ubyte * 64),
]
assert sizeof(tagL3StreamBGConfig) == 64, sizeof(tagL3StreamBGConfig)
assert alignment(tagL3StreamBGConfig) == 1, alignment(tagL3StreamBGConfig)
L3StreamBGConfig = tagL3StreamBGConfig
class tagNSVFD(Structure):
    pass
tagNSVFD._fields_ = [
    ('ucType', c_ubyte),
    ('ucMode', c_ubyte),
    ('uiOffset', c_ushort),
    ('uiRange', c_ushort),
    ('ulCycleCount', c_ulong),
    ('uiBlockCount', c_ushort),
    ('ucStepValue', c_ubyte),
    ('ucStepShift', c_ubyte),
    ('ucSubnetAware', c_ubyte),
    ('ucSubnetMaskLength', c_ubyte),
    ('ucEnableCarryChaining', c_ubyte),
    ('ucPattern', c_ubyte * 6),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSVFD) == 44, sizeof(tagNSVFD)
assert alignment(tagNSVFD) == 4, alignment(tagNSVFD)
NSVFD = tagNSVFD
class tagL3StreamBinding(Structure):
    pass
tagL3StreamBinding._fields_ = [
    ('ucBindMode', c_ubyte),
    ('uiBindIndex', c_ushort),
    ('uiATMFlags', c_ushort),
    ('ucReserved', c_ubyte * 56),
]
assert sizeof(tagL3StreamBinding) == 62, sizeof(tagL3StreamBinding)
assert alignment(tagL3StreamBinding) == 2, alignment(tagL3StreamBinding)
L3StreamBinding = tagL3StreamBinding
class tagL3ModifyStream(Structure):
    pass
tagL3ModifyStream._fields_ = [
    ('ulIndex', c_ulong),
    ('ulCount', c_ulong),
    ('ulField', c_ulong),
    ('ulFieldCount', c_ulong),
    ('ulDelta', c_ulong),
]
assert sizeof(tagL3ModifyStream) == 20, sizeof(tagL3ModifyStream)
assert alignment(tagL3ModifyStream) == 4, alignment(tagL3ModifyStream)
L3ModifyStream = tagL3ModifyStream
class tagL3ModifyStreamArray(Structure):
    pass
tagL3ModifyStreamArray._fields_ = [
    ('ulIndex', c_ulong),
    ('ulCount', c_ulong),
    ('ulField', c_ulong),
    ('ulFieldCount', c_ulong),
    ('ulFieldRepeat', c_ulong),
    ('ulData', c_ulong * 8192),
]
assert sizeof(tagL3ModifyStreamArray) == 32788, sizeof(tagL3ModifyStreamArray)
assert alignment(tagL3ModifyStreamArray) == 4, alignment(tagL3ModifyStreamArray)
L3ModifyStreamArray = tagL3ModifyStreamArray
class tagLayer3_Tracking_Latency(Structure):
    pass
tagLayer3_Tracking_Latency._fields_ = [
    ('ulInterval', c_ulong),
]
assert sizeof(tagLayer3_Tracking_Latency) == 4, sizeof(tagLayer3_Tracking_Latency)
assert alignment(tagLayer3_Tracking_Latency) == 4, alignment(tagLayer3_Tracking_Latency)
Layer3_Tracking_Latency = tagLayer3_Tracking_Latency
class tagLayer3_Tracking_Distribution(Structure):
    pass
tagLayer3_Tracking_Distribution._fields_ = [
    ('uiInterval', c_ushort * 16),
]
assert sizeof(tagLayer3_Tracking_Distribution) == 32, sizeof(tagLayer3_Tracking_Distribution)
assert alignment(tagLayer3_Tracking_Distribution) == 2, alignment(tagLayer3_Tracking_Distribution)
Layer3_Tracking_Distribution = tagLayer3_Tracking_Distribution
class tagLayer3_V2_Tracking_Distribution(Structure):
    pass
tagLayer3_V2_Tracking_Distribution._fields_ = [
    ('ulInterval', c_ulong * 16),
]
assert sizeof(tagLayer3_V2_Tracking_Distribution) == 64, sizeof(tagLayer3_V2_Tracking_Distribution)
assert alignment(tagLayer3_V2_Tracking_Distribution) == 4, alignment(tagLayer3_V2_Tracking_Distribution)
Layer3_V2_Tracking_Distribution = tagLayer3_V2_Tracking_Distribution
class tagLayer3_TrackingActiveTest(Structure):
    pass
tagLayer3_TrackingActiveTest._fields_ = [
    ('ulTest', c_ulong),
    ('ulRecords', c_ulong),
]
assert sizeof(tagLayer3_TrackingActiveTest) == 8, sizeof(tagLayer3_TrackingActiveTest)
assert alignment(tagLayer3_TrackingActiveTest) == 4, alignment(tagLayer3_TrackingActiveTest)
Layer3_TrackingActiveTest = tagLayer3_TrackingActiveTest
class tagLayer3TagInfo(Structure):
    pass
tagLayer3TagInfo._fields_ = [
    ('ulStream', c_ulong),
    ('ulSequence', c_ulong),
    ('ulTransmitTime', c_ulong),
    ('ulReceiveTime', c_ulong),
]
assert sizeof(tagLayer3TagInfo) == 16, sizeof(tagLayer3TagInfo)
assert alignment(tagLayer3TagInfo) == 4, alignment(tagLayer3TagInfo)
Layer3TagInfo = tagLayer3TagInfo
class tagLayer3TrackingLatency(Structure):
    pass
tagLayer3TrackingLatency._fields_ = [
    ('ulInterval', c_ulong),
]
assert sizeof(tagLayer3TrackingLatency) == 4, sizeof(tagLayer3TrackingLatency)
assert alignment(tagLayer3TrackingLatency) == 4, alignment(tagLayer3TrackingLatency)
Layer3TrackingLatency = tagLayer3TrackingLatency
class tagLayer3TrackingDistribution(Structure):
    pass
tagLayer3TrackingDistribution._fields_ = [
    ('uiInterval', c_ushort * 16),
]
assert sizeof(tagLayer3TrackingDistribution) == 32, sizeof(tagLayer3TrackingDistribution)
assert alignment(tagLayer3TrackingDistribution) == 2, alignment(tagLayer3TrackingDistribution)
Layer3TrackingDistribution = tagLayer3TrackingDistribution
class tagLayer3V2TrackingDistribution(Structure):
    pass
tagLayer3V2TrackingDistribution._fields_ = [
    ('ulInterval', c_ulong * 16),
]
assert sizeof(tagLayer3V2TrackingDistribution) == 64, sizeof(tagLayer3V2TrackingDistribution)
assert alignment(tagLayer3V2TrackingDistribution) == 4, alignment(tagLayer3V2TrackingDistribution)
Layer3V2TrackingDistribution = tagLayer3V2TrackingDistribution
class tagLayer3TrackingActiveTest(Structure):
    pass
tagLayer3TrackingActiveTest._fields_ = [
    ('ulTest', c_ulong),
    ('ulRecords', c_ulong),
]
assert sizeof(tagLayer3TrackingActiveTest) == 8, sizeof(tagLayer3TrackingActiveTest)
assert alignment(tagLayer3TrackingActiveTest) == 4, alignment(tagLayer3TrackingActiveTest)
Layer3TrackingActiveTest = tagLayer3TrackingActiveTest
class tagLayer3MulticastCounters(Structure):
    pass
tagLayer3MulticastCounters._fields_ = [
    ('ulTxFrames', c_ulong),
    ('ulTxJoinGroups', c_ulong),
    ('ulTxLeaveGroups', c_ulong),
    ('ulRxFrames', c_ulong),
    ('ulRxUnknownType', c_ulong),
    ('ulRxIpChecksumErrors', c_ulong),
    ('ulRxIgmpChecksumErrors', c_ulong),
    ('ulRxIgmpLengthErrors', c_ulong),
    ('ulRxWrongVersionQueries', c_ulong),
    ('reserved', c_ubyte * 96),
]
assert sizeof(tagLayer3MulticastCounters) == 132, sizeof(tagLayer3MulticastCounters)
assert alignment(tagLayer3MulticastCounters) == 4, alignment(tagLayer3MulticastCounters)
Layer3MulticastCounters = tagLayer3MulticastCounters
class tagL3StatsInfo(Structure):
    pass
tagL3StatsInfo._fields_ = [
    ('u64RxVlanFrames', U64),
    ('u64RxIPFrames', U64),
    ('u64IPChecksumError', U64),
    ('ulArpReplySent', c_ulong),
    ('ulArpReplyRecv', c_ulong),
    ('ulArpRequestSent', c_ulong),
    ('ulArpRequestRecv', c_ulong),
    ('ulPingReplySent', c_ulong),
    ('ulPingReplyRecv', c_ulong),
    ('ulPingRequestSent', c_ulong),
    ('ulPingRequestRecv', c_ulong),
    ('ulRxStackCount', c_ulong),
    ('ulTxStackCount', c_ulong),
    ('u64RxDataIntegrityError', U64),
    ('u64RxSignatureFrames', U64),
    ('u64TxSignatureFrames', U64),
    ('ulReserved', c_ulong * 2),
]
assert sizeof(tagL3StatsInfo) == 96, sizeof(tagL3StatsInfo)
assert alignment(tagL3StatsInfo) == 4, alignment(tagL3StatsInfo)
L3StatsInfo = tagL3StatsInfo
class tagMPLSStart(Structure):
    pass
tagMPLSStart._fields_ = [
    ('ulPacketRate', c_ulong),
    ('ucReserved', c_ubyte * 8),
]
assert sizeof(tagMPLSStart) == 12, sizeof(tagMPLSStart)
assert alignment(tagMPLSStart) == 4, alignment(tagMPLSStart)
MPLSStart = tagMPLSStart
class tagMPLSISLSPComplete(Structure):
    pass
tagMPLSISLSPComplete._fields_ = [
    ('ulCount', c_ulong),
]
assert sizeof(tagMPLSISLSPComplete) == 4, sizeof(tagMPLSISLSPComplete)
assert alignment(tagMPLSISLSPComplete) == 4, alignment(tagMPLSISLSPComplete)
MPLSLSPNotComplete = tagMPLSISLSPComplete
class tagMPLSRoutingDomain(Structure):
    pass
tagMPLSRoutingDomain._fields_ = [
    ('ulOptions', c_ulong),
    ('ucLocalIPAddress', c_ubyte * 4),
    ('ucPeerIPAddress', c_ubyte * 4),
    ('ucLocalNetMask', c_ubyte * 4),
    ('ulMaxLSPRequest', c_ulong),
    ('ulMaxLSPDistribution', c_ulong),
    ('ulMeanRefreshInterval', c_ulong),
    ('uiRSVPRetransmitDelay', c_ushort),
    ('uiRSVPRetransmitDelta', c_ushort),
    ('uiRSVPMaxRetransmitCount', c_ushort),
    ('ulSummaryMessageTime', c_ulong),
    ('ulBundleMessageTime', c_ulong),
    ('ulRoutingDomainIndex', c_ulong),
    ('ulReserved', c_ulong * 48),
]
assert sizeof(tagMPLSRoutingDomain) == 240, sizeof(tagMPLSRoutingDomain)
assert alignment(tagMPLSRoutingDomain) == 4, alignment(tagMPLSRoutingDomain)
MPLSRoutingDomain = tagMPLSRoutingDomain
class tagMPLSRoutingDomainDeleteAll(Structure):
    pass
tagMPLSRoutingDomainDeleteAll._fields_ = [
    ('ulPacketRate', c_ulong),
    ('ulLeaveLSPs', c_ulong),
    ('ucReserved', c_ubyte * 4),
]
assert sizeof(tagMPLSRoutingDomainDeleteAll) == 12, sizeof(tagMPLSRoutingDomainDeleteAll)
assert alignment(tagMPLSRoutingDomainDeleteAll) == 4, alignment(tagMPLSRoutingDomainDeleteAll)
MPLSRoutingDomainDeleteAll = tagMPLSRoutingDomainDeleteAll
class tagMPLSObjectID(Structure):
    pass
tagMPLSObjectID._fields_ = [
    ('uiObjectType', c_ushort),
    ('uiObjectIndex', c_ushort),
]
assert sizeof(tagMPLSObjectID) == 4, sizeof(tagMPLSObjectID)
assert alignment(tagMPLSObjectID) == 2, alignment(tagMPLSObjectID)
MPLSObjectID = tagMPLSObjectID
class tagMPLSLSP(Structure):
    pass
tagMPLSLSP._fields_ = [
    ('ulRoutingDomainIndex', c_ulong),
    ('uiIngressLSPOptions', c_ushort),
    ('ucEgressIP', c_ubyte * 4),
    ('uiTunnelID', c_ushort),
    ('ulExtendedTunnelID', c_ulong),
    ('uiNumberOfObjects', c_ushort),
    ('ObjectList', MPLSObjectID * 10),
    ('ulLSPIndex', c_ulong),
    ('ucReserved', c_ubyte * 4),
]
assert sizeof(tagMPLSLSP) == 68, sizeof(tagMPLSLSP)
assert alignment(tagMPLSLSP) == 4, alignment(tagMPLSLSP)
MPLSLSP = tagMPLSLSP
class tagMPLSLSPDeleteAll(Structure):
    pass
tagMPLSLSPDeleteAll._fields_ = [
    ('ulPacketRate', c_ulong),
    ('ucReserved', c_ubyte * 4),
]
assert sizeof(tagMPLSLSPDeleteAll) == 8, sizeof(tagMPLSLSPDeleteAll)
assert alignment(tagMPLSLSPDeleteAll) == 4, alignment(tagMPLSLSPDeleteAll)
MPLSLSPDeleteAll = tagMPLSLSPDeleteAll
class tagMPLSServiceObject(Structure):
    pass
tagMPLSServiceObject._fields_ = [
    ('uiObjectType', c_ushort),
    ('uiMaxPacketSize', c_ushort),
    ('ucCOS', c_ubyte),
    ('fTokenBucketRate', c_float),
    ('fTokenBucketSize', c_float),
    ('fPeakDataRate', c_float),
    ('ulMinPoliceUnit', c_ulong),
    ('fRate', c_float),
    ('ulSlackTerm', c_ulong),
    ('ulServiceObjectID', c_ulong),
    ('ucReserved', c_ubyte * 32),
]
assert sizeof(tagMPLSServiceObject) == 68, sizeof(tagMPLSServiceObject)
assert alignment(tagMPLSServiceObject) == 4, alignment(tagMPLSServiceObject)
MPLSServiceObject = tagMPLSServiceObject
class tagMPLSOpaqueObject(Structure):
    pass
tagMPLSOpaqueObject._fields_ = [
    ('uiLength', c_ushort),
    ('ucClassNumber', c_ubyte),
    ('ucClassType', c_ubyte),
    ('ucContents', c_ubyte * 128),
    ('ulOpaqueObjectID', c_ulong),
    ('ucReserved', c_ubyte * 32),
]
assert sizeof(tagMPLSOpaqueObject) == 168, sizeof(tagMPLSOpaqueObject)
assert alignment(tagMPLSOpaqueObject) == 4, alignment(tagMPLSOpaqueObject)
MPLSOpaqueObject = tagMPLSOpaqueObject
class tagMPLSAttributeObject(Structure):
    pass
tagMPLSAttributeObject._fields_ = [
    ('ucSetupPriority', c_ubyte),
    ('ucHoldPriority', c_ubyte),
    ('ucOptions', c_ubyte),
    ('ucNameLength', c_ubyte),
    ('ucName', c_ubyte * 100),
    ('ulAttributeObjectID', c_ulong),
    ('ucReserved', c_ubyte * 32),
]
assert sizeof(tagMPLSAttributeObject) == 140, sizeof(tagMPLSAttributeObject)
assert alignment(tagMPLSAttributeObject) == 4, alignment(tagMPLSAttributeObject)
MPLSAttributeObject = tagMPLSAttributeObject
class tagMPLSExplicitObject(Structure):
    pass
tagMPLSExplicitObject._fields_ = [
    ('uiExplicitRouteType', c_ushort),
    ('ucIPAddress', c_ubyte * 16),
    ('ucLoose', c_ubyte),
    ('ucPrefix', c_ubyte),
    ('ucFlags', c_ubyte),
    ('ulExplicitObjectID', c_ulong),
    ('ucReserved', c_ubyte * 32),
]
assert sizeof(tagMPLSExplicitObject) == 60, sizeof(tagMPLSExplicitObject)
assert alignment(tagMPLSExplicitObject) == 4, alignment(tagMPLSExplicitObject)
MPLSExplicitObject = tagMPLSExplicitObject
class tagMPLSLSPCopyDelta(Structure):
    pass
tagMPLSLSPCopyDelta._fields_ = [
    ('ucEgressIp', c_ubyte * 4),
    ('ulExtendedTunnelID', c_ulong),
    ('uiTunnelID', c_ushort),
    ('ucReserved', c_ubyte * 50),
]
assert sizeof(tagMPLSLSPCopyDelta) == 60, sizeof(tagMPLSLSPCopyDelta)
assert alignment(tagMPLSLSPCopyDelta) == 4, alignment(tagMPLSLSPCopyDelta)
MPLSLSPCopyDelta = tagMPLSLSPCopyDelta
class tagMPLSLabelDataInfo(Structure):
    pass
tagMPLSLabelDataInfo._fields_ = [
    ('ulLSPIndex', c_ulong),
    ('ulLabel', c_ulong),
]
assert sizeof(tagMPLSLabelDataInfo) == 8, sizeof(tagMPLSLabelDataInfo)
assert alignment(tagMPLSLabelDataInfo) == 4, alignment(tagMPLSLabelDataInfo)
MPLSLabelDataInfo = tagMPLSLabelDataInfo
class tagMPLSRSVPCountInfo(Structure):
    pass
tagMPLSRSVPCountInfo._fields_ = [
    ('ulType', c_ulong),
    ('ulResvIn', c_ulong),
    ('ulPathIn', c_ulong),
    ('ulResvTearIn', c_ulong),
    ('ulPathTearIn', c_ulong),
    ('ulResvErrorIn', c_ulong),
    ('ulPathErrorIn', c_ulong),
    ('ulAckIn', c_ulong),
    ('ulResvOut', c_ulong),
    ('ulPathOut', c_ulong),
    ('ulResvTearOut', c_ulong),
    ('ulPathTearOut', c_ulong),
    ('ulResvErrorOut', c_ulong),
    ('ulPathErrorOut', c_ulong),
    ('ulAckOut', c_ulong),
    ('ulLSPIngress', c_ulong),
    ('ulLSPEgress', c_ulong),
    ('ulLabelIn', c_ulong),
    ('ulLabelOut', c_ulong),
    ('ulCardTimeStamp', c_ulong),
    ('ucReserved', c_ubyte * 32),
]
assert sizeof(tagMPLSRSVPCountInfo) == 112, sizeof(tagMPLSRSVPCountInfo)
assert alignment(tagMPLSRSVPCountInfo) == 4, alignment(tagMPLSRSVPCountInfo)
MPLSRSVPCountInfo = tagMPLSRSVPCountInfo
class tagMPLSLSPInfo(Structure):
    pass
tagMPLSLSPInfo._fields_ = [
    ('ulLabel', c_ulong),
    ('ucStatus', c_ubyte),
    ('ucReserved', c_ubyte * 7),
]
assert sizeof(tagMPLSLSPInfo) == 12, sizeof(tagMPLSLSPInfo)
assert alignment(tagMPLSLSPInfo) == 4, alignment(tagMPLSLSPInfo)
MPLSLSPInfo = tagMPLSLSPInfo
class tagMPLSLSPBindStreams(Structure):
    pass
tagMPLSLSPBindStreams._fields_ = [
    ('uiStreamIndex', c_ushort),
]
assert sizeof(tagMPLSLSPBindStreams) == 2, sizeof(tagMPLSLSPBindStreams)
assert alignment(tagMPLSLSPBindStreams) == 2, alignment(tagMPLSLSPBindStreams)
MPLSLSPBindStreams = tagMPLSLSPBindStreams
class tagMPLSObjectDelete(Structure):
    pass
tagMPLSObjectDelete._fields_ = [
    ('uiObjectType', c_ushort),
    ('ucReserved', c_ubyte * 4),
]
assert sizeof(tagMPLSObjectDelete) == 6, sizeof(tagMPLSObjectDelete)
assert alignment(tagMPLSObjectDelete) == 2, alignment(tagMPLSObjectDelete)
MPLSObjectDelete = tagMPLSObjectDelete
class tagMPLSLSPCountInfo(Structure):
    pass
tagMPLSLSPCountInfo._fields_ = [
    ('ulLSPCount', c_ulong),
]
assert sizeof(tagMPLSLSPCountInfo) == 4, sizeof(tagMPLSLSPCountInfo)
assert alignment(tagMPLSLSPCountInfo) == 4, alignment(tagMPLSLSPCountInfo)
MPLSLSPCountInfo = tagMPLSLSPCountInfo
class tagMPLSLDPTest(Structure):
    pass
tagMPLSLDPTest._fields_ = [
    ('ulTest', c_ulong),
]
assert sizeof(tagMPLSLDPTest) == 4, sizeof(tagMPLSLDPTest)
assert alignment(tagMPLSLDPTest) == 4, alignment(tagMPLSLDPTest)
MPLSLDPTest = tagMPLSLDPTest
class tagNSHistLatencyOption(Structure):
    pass
tagNSHistLatencyOption._fields_ = [
    ('uiOption', c_ushort),
    ('ucLatencyScale', c_ubyte),
    ('ucReserved', c_ubyte * 9),
]
assert sizeof(tagNSHistLatencyOption) == 12, sizeof(tagNSHistLatencyOption)
assert alignment(tagNSHistLatencyOption) == 2, alignment(tagNSHistLatencyOption)
NSHistLatencyOption = tagNSHistLatencyOption
class tagNSOAMConfig(Structure):
    pass
tagNSOAMConfig._fields_ = [
    ('ulTotalPatterns', c_ulong),
    ('ucCRC8ErrorEnable', c_ubyte),
    ('ucOAMEnable', c_ubyte),
    ('ucReserved', c_ubyte * 58),
]
assert sizeof(tagNSOAMConfig) == 64, sizeof(tagNSOAMConfig)
assert alignment(tagNSOAMConfig) == 4, alignment(tagNSOAMConfig)
NSOAMConfig = tagNSOAMConfig
class tagNS0AMCounterInfo(Structure):
    pass
tagNS0AMCounterInfo._fields_ = [
    ('u64TxFrames', U64),
    ('u64TxOAMFrames', U64),
    ('u64TxOAMIdleFrames', U64),
    ('u64RxFrames', U64),
    ('u64RxOAMFrames', U64),
    ('u64RxOAMIdleFrames', U64),
    ('u64RxCRC8Errors', U64),
]
assert sizeof(tagNS0AMCounterInfo) == 56, sizeof(tagNS0AMCounterInfo)
assert alignment(tagNS0AMCounterInfo) == 4, alignment(tagNS0AMCounterInfo)
NSOAMCounterInfo = tagNS0AMCounterInfo
class tagNSOAMRateInfo(Structure):
    pass
tagNSOAMRateInfo._fields_ = [
    ('ulTxFrames', c_ulong),
    ('ulTxOAMFrames', c_ulong),
    ('ulTxOAMIdleFrames', c_ulong),
    ('ulRxFrames', c_ulong),
    ('ulRxOAMFrames', c_ulong),
    ('ulRxOAMIdleFrames', c_ulong),
    ('ulRxCRC8Errors', c_ulong),
]
assert sizeof(tagNSOAMRateInfo) == 28, sizeof(tagNSOAMRateInfo)
assert alignment(tagNSOAMRateInfo) == 4, alignment(tagNSOAMRateInfo)
NSOAMRateInfo = tagNSOAMRateInfo
class tagNSPerStreamCounterInfo(Structure):
    pass
tagNSPerStreamCounterInfo._fields_ = [
    ('u64TxTimeStamp', U64),
    ('u64TxFrames', U64),
    ('ucReserved', c_ubyte * 128),
]
assert sizeof(tagNSPerStreamCounterInfo) == 144, sizeof(tagNSPerStreamCounterInfo)
assert alignment(tagNSPerStreamCounterInfo) == 4, alignment(tagNSPerStreamCounterInfo)
NSPerStreamCounterInfo = tagNSPerStreamCounterInfo
class tagNSSonetConfig(Structure):
    pass
tagNSSonetConfig._fields_ = [
    ('ucInterfaceSpeed', c_ubyte),
    ('ucFramingMode', c_ubyte),
    ('ucTxClockSource', c_ubyte),
    ('ucPathSignalLabel', c_ubyte),
    ('ucSONETCountMode', c_ubyte),
    ('ulErrorInjection', c_ulong),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagNSSonetConfig) == 76, sizeof(tagNSSonetConfig)
assert alignment(tagNSSonetConfig) == 4, alignment(tagNSSonetConfig)
NSSonetConfig = tagNSSonetConfig
class tagNSCreateSubprocess(Structure):
    pass
tagNSCreateSubprocess._fields_ = [
    ('ulUserID', c_ulong),
    ('ulGroupID', c_ulong),
    ('uiModuleID', c_ushort),
    ('ulSharedMemKey', c_ulong),
    ('ucCommand', c_ubyte * 1024),
    ('ucReserved', c_ubyte * 50),
    ('ulSubprocessHandle', c_ulong),
]
assert sizeof(tagNSCreateSubprocess) == 1096, sizeof(tagNSCreateSubprocess)
assert alignment(tagNSCreateSubprocess) == 4, alignment(tagNSCreateSubprocess)
NSCreateSubprocess = tagNSCreateSubprocess
class tagNSReadWriteSubprocess(Structure):
    pass
tagNSReadWriteSubprocess._fields_ = [
    ('ulSubprocessHandle', c_ulong),
    ('ulBufferLen', c_ulong),
    ('ucBuffer', c_ubyte * 1024),
]
assert sizeof(tagNSReadWriteSubprocess) == 1032, sizeof(tagNSReadWriteSubprocess)
assert alignment(tagNSReadWriteSubprocess) == 4, alignment(tagNSReadWriteSubprocess)
NSReadWriteSubprocess = tagNSReadWriteSubprocess
class tagNSSignalSubprocess(Structure):
    pass
tagNSSignalSubprocess._fields_ = [
    ('ulSubprocessHandle', c_ulong),
    ('ulSignal', c_ulong),
]
assert sizeof(tagNSSignalSubprocess) == 8, sizeof(tagNSSignalSubprocess)
assert alignment(tagNSSignalSubprocess) == 4, alignment(tagNSSignalSubprocess)
NSSignalSubprocess = tagNSSignalSubprocess
class tagNSSonetCounterInfo(Structure):
    pass
tagNSSonetCounterInfo._fields_ = [
    ('uiAlarmCurrent', c_ushort),
    ('uiAlarmHistory', c_ushort),
    ('ulSectionBip8', c_ulong),
    ('ulLineBip24', c_ulong),
    ('ulLineFebe', c_ulong),
    ('ulPathBip8', c_ulong),
    ('ulPathFebe', c_ulong),
    ('uiSectionBip8Rate', c_ushort),
    ('uiLineBip24Rate', c_ushort),
    ('uiLineFebeRate', c_ushort),
    ('uiPathBip8Rate', c_ushort),
    ('uiPathFebeRate', c_ushort),
    ('ucCurrentPathSignalLabel', c_ubyte),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagNSSonetCounterInfo) == 100, sizeof(tagNSSonetCounterInfo)
assert alignment(tagNSSonetCounterInfo) == 4, alignment(tagNSSonetCounterInfo)
NSSonetCounterInfo = tagNSSonetCounterInfo
class tagNSQuerySubprocess(Structure):
    pass
tagNSQuerySubprocess._fields_ = [
    ('ulSubprocessHandle', c_ulong),
    ('ucExited', c_ubyte),
    ('ucSignaled', c_ubyte),
    ('ulExitCode', c_ulong),
    ('ulTermSignal', c_ulong),
    ('ucReserved', c_ubyte * 2),
]
assert sizeof(tagNSQuerySubprocess) == 20, sizeof(tagNSQuerySubprocess)
assert alignment(tagNSQuerySubprocess) == 4, alignment(tagNSQuerySubprocess)
NSQuerySubprocess = tagNSQuerySubprocess
class tagNSCaptureCountInfo(Structure):
    pass
tagNSCaptureCountInfo._fields_ = [
    ('ulCount', c_ulong),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSCaptureCountInfo) == 20, sizeof(tagNSCaptureCountInfo)
assert alignment(tagNSCaptureCountInfo) == 4, alignment(tagNSCaptureCountInfo)
NSCaptureCountInfo = tagNSCaptureCountInfo
class tagNSCaptureStatsInfo(Structure):
    pass
tagNSCaptureStatsInfo._fields_ = [
    ('ulIndex', c_ulong),
    ('ulLength', c_ulong),
    ('ulStatus', c_ulong),
    ('u64Timestamp', U64),
    ('ucPreambleCount', c_ubyte),
    ('uiVPI', c_ushort),
    ('uiVCI', c_ushort),
    ('ucReserved', c_ubyte * 15),
]
assert sizeof(tagNSCaptureStatsInfo) == 44, sizeof(tagNSCaptureStatsInfo)
assert alignment(tagNSCaptureStatsInfo) == 4, alignment(tagNSCaptureStatsInfo)
NSCaptureStatsInfo = tagNSCaptureStatsInfo
class tagNSCaptureDataInfo(Structure):
    pass
tagNSCaptureDataInfo._fields_ = [
    ('ulFrameIndex', c_ulong),
    ('ulByteOffset', c_ulong),
    ('ulRequestedLength', c_ulong),
    ('ulRetrievedLength', c_ulong),
    ('ucReserved', c_ubyte * 16),
    ('ucData', c_ubyte * 2048),
]
assert sizeof(tagNSCaptureDataInfo) == 2080, sizeof(tagNSCaptureDataInfo)
assert alignment(tagNSCaptureDataInfo) == 4, alignment(tagNSCaptureDataInfo)
NSCaptureDataInfo = tagNSCaptureDataInfo
class tagNSStreamScheduleEntry(Structure):
    pass
tagNSStreamScheduleEntry._fields_ = [
    ('uiStreamIndex', c_ushort),
    ('uiRepeatCount', c_ushort),
]
assert sizeof(tagNSStreamScheduleEntry) == 4, sizeof(tagNSStreamScheduleEntry)
assert alignment(tagNSStreamScheduleEntry) == 2, alignment(tagNSStreamScheduleEntry)
NSStreamScheduleEntry = tagNSStreamScheduleEntry
class tagNSDiffServ(Structure):
    pass
tagNSDiffServ._fields_ = [
    ('ucEnableOffsetFromIP', c_ubyte),
    ('uiByteOffset', c_ushort),
    ('ucDestinationIP', c_ubyte * 4),
    ('ucReserved', c_ubyte * 20),
]
assert sizeof(tagNSDiffServ) == 28, sizeof(tagNSDiffServ)
assert alignment(tagNSDiffServ) == 2, alignment(tagNSDiffServ)
NSDiffServ = tagNSDiffServ
class tagNSDiffServCounterInfo(Structure):
    pass
tagNSDiffServCounterInfo._fields_ = [
    ('ulRxFrame', c_ulong * 256),
]
assert sizeof(tagNSDiffServCounterInfo) == 1024, sizeof(tagNSDiffServCounterInfo)
assert alignment(tagNSDiffServCounterInfo) == 4, alignment(tagNSDiffServCounterInfo)
NSDiffServCounterInfo = tagNSDiffServCounterInfo
class tagNSPortTransmit(Structure):
    pass
tagNSPortTransmit._fields_ = [
    ('ucTransmitMode', c_ubyte),
    ('ucScheduleMode', c_ubyte),
    ('ulInterFrameGap', c_ulong),
    ('ulInterBurstGap', c_ulong),
    ('uiGapScale', c_ushort),
    ('ulBurstCount', c_ulong),
    ('ulMultiBurstCount', c_ulong),
    ('ucRandomGapEnable', c_ubyte),
    ('ulRandomSeed', c_ulong),
    ('ulMinRandomGap', c_ulong),
    ('ulMaxRandomGap', c_ulong),
    ('ulMinRandomLength', c_ulong),
    ('ulMaxRandomLength', c_ulong),
    ('ucJumboFrameCountEnable', c_ubyte),
    ('ucIncrementEnable', c_ubyte),
    ('uiMinIncrementLength', c_ushort),
    ('uiMaxIncrementLength', c_ushort),
    ('ucEnableExtendedPayload', c_ubyte),
    ('ucReserved', c_ubyte * 57),
]
assert sizeof(tagNSPortTransmit) == 112, sizeof(tagNSPortTransmit)
assert alignment(tagNSPortTransmit) == 4, alignment(tagNSPortTransmit)
NSPortTransmit = tagNSPortTransmit
class tagNSCaptureSetup(Structure):
    pass
tagNSCaptureSetup._fields_ = [
    ('ulCaptureMode', c_ulong),
    ('ulCaptureLength', c_ulong),
    ('ulCaptureEvents', c_ulong),
    ('uiFilterFrameLength', c_ushort),
    ('uiCustomCaptureLength', c_ushort),
    ('ucReserved', c_ubyte * 52),
]
assert sizeof(tagNSCaptureSetup) == 68, sizeof(tagNSCaptureSetup)
assert alignment(tagNSCaptureSetup) == 4, alignment(tagNSCaptureSetup)
NSCaptureSetup = tagNSCaptureSetup
class tagNSPortAddress(Structure):
    pass
tagNSPortAddress._fields_ = [
    ('ucMACAddress', c_ubyte * 6),
    ('ucIPAddress', c_ubyte * 4),
    ('ucNetmask', c_ubyte * 4),
    ('ucGateway', c_ubyte * 4),
    ('ucPingTargetAddress', c_ubyte * 4),
    ('uiVCI', c_ushort),
    ('uiControl', c_ushort),
    ('uiPingTime', c_ushort),
    ('uiSNMPTime', c_ushort),
    ('uiRIPTime', c_ushort),
    ('ucReserved', c_ubyte * 50),
]
assert sizeof(tagNSPortAddress) == 82, sizeof(tagNSPortAddress)
assert alignment(tagNSPortAddress) == 2, alignment(tagNSPortAddress)
NSPortAddress = tagNSPortAddress
class tagNSFFSInfo(Structure):
    pass
tagNSFFSInfo._fields_ = [
    ('ulTotalBlocks', c_ulong),
    ('ulUsedBlocks', c_ulong),
    ('ulFreeBlocks', c_ulong),
    ('ucReserved', c_ubyte * 52),
]
assert sizeof(tagNSFFSInfo) == 64, sizeof(tagNSFFSInfo)
assert alignment(tagNSFFSInfo) == 4, alignment(tagNSFFSInfo)
NSFFSInfo = tagNSFFSInfo
class tagNSSonetAlarmCounterInfo(Structure):
    pass
tagNSSonetAlarmCounterInfo._fields_ = [
    ('uiAlarmCurrent', c_ushort),
    ('uiAlarmHistory', c_ushort),
    ('ulSectionBIP8', c_ulong),
    ('ulLineBIP24', c_ulong),
    ('ulLineFEBE', c_ulong),
    ('ulPathBIP8', c_ulong),
    ('ulPathFEBE', c_ulong),
    ('uiSectionBIP8Rate', c_ushort),
    ('uiLineBIP24Rate', c_ushort),
    ('uiLineFEBERate', c_ushort),
    ('uiPathBIP8Rate', c_ushort),
    ('uiPathFEBERate', c_ushort),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagNSSonetAlarmCounterInfo) == 100, sizeof(tagNSSonetAlarmCounterInfo)
assert alignment(tagNSSonetAlarmCounterInfo) == 4, alignment(tagNSSonetAlarmCounterInfo)
NSSonetAlarmCounterInfo = tagNSSonetAlarmCounterInfo
class tagNSHistLatencyOverTime(Structure):
    pass
tagNSHistLatencyOverTime._fields_ = [
    ('ulInterval', c_ulong),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSHistLatencyOverTime) == 20, sizeof(tagNSHistLatencyOverTime)
assert alignment(tagNSHistLatencyOverTime) == 4, alignment(tagNSHistLatencyOverTime)
NSHistLatencyOverTime = tagNSHistLatencyOverTime
class tagNSHistLatencyOverTimeInfo(Structure):
    pass
tagNSHistLatencyOverTimeInfo._fields_ = [
    ('ulMinLatency', c_ulong),
    ('ulMaxLatency', c_ulong),
    ('u64Total', U64),
    ('u64Frames', U64),
    ('ucReserved', c_ubyte * 128),
]
assert sizeof(tagNSHistLatencyOverTimeInfo) == 152, sizeof(tagNSHistLatencyOverTimeInfo)
assert alignment(tagNSHistLatencyOverTimeInfo) == 4, alignment(tagNSHistLatencyOverTimeInfo)
NSHistLatencyOverTimeInfo = tagNSHistLatencyOverTimeInfo
class tagNSHistLatencyDistPerStream(Structure):
    pass
tagNSHistLatencyDistPerStream._fields_ = [
    ('ulInterval', c_ulong * 16),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSHistLatencyDistPerStream) == 80, sizeof(tagNSHistLatencyDistPerStream)
assert alignment(tagNSHistLatencyDistPerStream) == 4, alignment(tagNSHistLatencyDistPerStream)
NSHistLatencyDistPerStream = tagNSHistLatencyDistPerStream
class tagNSHistComboPerStreamInfo(Structure):
    pass
tagNSHistComboPerStreamInfo._fields_ = [
    ('ulStreamID', c_ulong),
    ('u64Total', U64),
    ('ulMinLatency', c_ulong),
    ('ulMaxLatency', c_ulong),
    ('u64TotalFrames', U64),
    ('u64InSequence', U64),
    ('u64Reserved', U64),
    ('u64OutOfSequence', U64),
    ('u64Frames', U64 * 16),
    ('ucReserved', c_ubyte * 128),
]
assert sizeof(tagNSHistComboPerStreamInfo) == 308, sizeof(tagNSHistComboPerStreamInfo)
assert alignment(tagNSHistComboPerStreamInfo) == 4, alignment(tagNSHistComboPerStreamInfo)
NSHistComboPerStreamInfo = tagNSHistComboPerStreamInfo
class tagNSHistLatencyDistPerStreamInfo(Structure):
    pass
tagNSHistLatencyDistPerStreamInfo._fields_ = [
    ('ulStream', c_ulong),
    ('u64Frames', U64 * 16),
    ('ucReserved', c_ubyte * 128),
]
assert sizeof(tagNSHistLatencyDistPerStreamInfo) == 260, sizeof(tagNSHistLatencyDistPerStreamInfo)
assert alignment(tagNSHistLatencyDistPerStreamInfo) == 4, alignment(tagNSHistLatencyDistPerStreamInfo)
NSHistLatencyDistPerStreamInfo = tagNSHistLatencyDistPerStreamInfo
class tagNSHistSequencePerStreamInfo(Structure):
    pass
tagNSHistSequencePerStreamInfo._fields_ = [
    ('ulStream', c_ulong),
    ('u64TotalFrames', U64),
    ('u64InSequence', U64),
    ('u64OutOfSequence', U64),
    ('ulReserved', c_ulong),
    ('ucReserved', c_ubyte * 128),
]
assert sizeof(tagNSHistSequencePerStreamInfo) == 160, sizeof(tagNSHistSequencePerStreamInfo)
assert alignment(tagNSHistSequencePerStreamInfo) == 4, alignment(tagNSHistSequencePerStreamInfo)
NSHistSequencePerStreamInfo = tagNSHistSequencePerStreamInfo
class tagNSHistRawSignatureInfo(Structure):
    pass
tagNSHistRawSignatureInfo._fields_ = [
    ('ulStream', c_ulong),
    ('ulSequence', c_ulong),
    ('ulTransmitTime', c_ulong),
    ('ulReceiveTime', c_ulong),
    ('ucReserved', c_ubyte * 128),
]
assert sizeof(tagNSHistRawSignatureInfo) == 144, sizeof(tagNSHistRawSignatureInfo)
assert alignment(tagNSHistRawSignatureInfo) == 4, alignment(tagNSHistRawSignatureInfo)
NSHistRawSignatureInfo = tagNSHistRawSignatureInfo
class tagNSHistMulticastLatencyPerStreamInfo(Structure):
    pass
tagNSHistMulticastLatencyPerStreamInfo._fields_ = [
    ('ulStreamID', c_ulong),
    ('u64Total', U64),
    ('ulMinLatency', c_ulong),
    ('ulMaxLatency', c_ulong),
    ('u64TotalFrames', U64),
    ('u64FirstRxTime', U64),
    ('u64LastRxTime', U64),
    ('u64Frames', U64 * 16),
    ('ucReserved', c_ubyte * 184),
]
assert sizeof(tagNSHistMulticastLatencyPerStreamInfo) == 356, sizeof(tagNSHistMulticastLatencyPerStreamInfo)
assert alignment(tagNSHistMulticastLatencyPerStreamInfo) == 4, alignment(tagNSHistMulticastLatencyPerStreamInfo)
NSHistMulticastLatencyPerStreamInfo = tagNSHistMulticastLatencyPerStreamInfo
class tagNSDetailedLibVersionStructure(Structure):
    pass
tagNSDetailedLibVersionStructure._fields_ = [
    ('szDescription', c_char * 32),
    ('szVersion', c_char * 32),
    ('uiMajor', c_ushort),
    ('uiMinor', c_ushort),
    ('uiBuild', c_ushort),
    ('ucReleaseStage', c_ubyte),
    ('ulCompleteVersion', c_ulong),
]
assert sizeof(tagNSDetailedLibVersionStructure) == 76, sizeof(tagNSDetailedLibVersionStructure)
assert alignment(tagNSDetailedLibVersionStructure) == 4, alignment(tagNSDetailedLibVersionStructure)
NSDetailedLibVersionStructure = tagNSDetailedLibVersionStructure
class tagNSErrorEntry(Structure):
    pass
tagNSErrorEntry._fields_ = [
    ('ucCardNumber', c_ubyte),
    ('ucPortNumber', c_ubyte),
    ('uiErrorCode', c_ushort),
    ('szErrorDescription', c_char * 256),
]
assert sizeof(tagNSErrorEntry) == 260, sizeof(tagNSErrorEntry)
assert alignment(tagNSErrorEntry) == 2, alignment(tagNSErrorEntry)
NSErrorEntry = tagNSErrorEntry
class tagErrorList(Structure):
    pass
tagErrorList._fields_ = [
    ('uiTotalError', c_ushort),
    ('pErrorEntryList', NSErrorEntry * 10),
]
assert sizeof(tagErrorList) == 2602, sizeof(tagErrorList)
assert alignment(tagErrorList) == 2, alignment(tagErrorList)
NSErrorList = tagErrorList
class tagNSReportErrorEntry(Structure):
    pass
tagNSReportErrorEntry._fields_ = [
    ('uiHubNumber', c_ushort),
    ('uiSlotNumber', c_ushort),
    ('uiPortNumber', c_ushort),
    ('lErrorCode', c_long),
    ('szErrorDescription', c_char * 256),
    ('szCmdDescription', c_char * 256),
    ('szChassisIP', c_char * 20),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagNSReportErrorEntry) == 608, sizeof(tagNSReportErrorEntry)
assert alignment(tagNSReportErrorEntry) == 4, alignment(tagNSReportErrorEntry)
NSReportErrorEntry = tagNSReportErrorEntry
class tagNSReportErrorList(Structure):
    pass
tagNSReportErrorList._fields_ = [
    ('uiTotalErrors', c_ushort),
    ('ucReserved', c_ubyte * 64),
    ('pErrorList', NSReportErrorEntry * 100),
]
assert sizeof(tagNSReportErrorList) == 60868, sizeof(tagNSReportErrorList)
assert alignment(tagNSReportErrorList) == 4, alignment(tagNSReportErrorList)
NSReportErrorList = tagNSReportErrorList
class tagNSHWConfig(Structure):
    pass
tagNSHWConfig._fields_ = [
    ('ucTimestampClockSource', c_ubyte),
    ('ucLaserMode', c_ubyte),
    ('ucReserved', c_ubyte * 20),
]
assert sizeof(tagNSHWConfig) == 22, sizeof(tagNSHWConfig)
assert alignment(tagNSHWConfig) == 1, alignment(tagNSHWConfig)
NSHWConfig = tagNSHWConfig
class tagNSCardHardwareInfo(Structure):
    pass
tagNSCardHardwareInfo._fields_ = [
    ('uiRAMSize', c_ushort),
    ('ucSerialNumber', c_ubyte * 35),
    ('ucReserved', c_ubyte * 91),
]
assert sizeof(tagNSCardHardwareInfo) == 128, sizeof(tagNSCardHardwareInfo)
assert alignment(tagNSCardHardwareInfo) == 2, alignment(tagNSCardHardwareInfo)
NSCardHardwareInfo = tagNSCardHardwareInfo
class tagNSCTStorageFile(Structure):
    pass
tagNSCTStorageFile._fields_ = [
    ('ulFilenameLength', c_ulong),
    ('ucFilename', c_ubyte * 64),
    ('ulFileSizeInMBytes', c_ulong),
    ('ulStopOnFull', c_ulong),
]
assert sizeof(tagNSCTStorageFile) == 76, sizeof(tagNSCTStorageFile)
assert alignment(tagNSCTStorageFile) == 4, alignment(tagNSCTStorageFile)
NSCTStorageFile = tagNSCTStorageFile
class tagNSCTCaptureParams(Structure):
    pass
tagNSCTCaptureParams._fields_ = [
    ('ulTrafficDirection', c_ulong),
    ('ulSliceCount', c_ulong),
    ('ulMode', c_ulong),
]
assert sizeof(tagNSCTCaptureParams) == 12, sizeof(tagNSCTCaptureParams)
assert alignment(tagNSCTCaptureParams) == 4, alignment(tagNSCTCaptureParams)
NSCTCaptureParams = tagNSCTCaptureParams
class tagNSCTCaptureFilterParams(Structure):
    pass
tagNSCTCaptureFilterParams._fields_ = [
    ('ulMode', c_ulong),
    ('ulProtocolID', c_ulong),
    ('ulPatternsOperator', c_ulong),
    ('ulPattern1Offset', c_ulong),
    ('ulPattern1Length', c_ulong),
    ('ucPattern1Data', c_ubyte * 16),
    ('ulPattern2Offset', c_ulong),
    ('ulPattern2Length', c_ulong),
    ('ucPattern2Data', c_ubyte * 16),
]
assert sizeof(tagNSCTCaptureFilterParams) == 60, sizeof(tagNSCTCaptureFilterParams)
assert alignment(tagNSCTCaptureFilterParams) == 4, alignment(tagNSCTCaptureFilterParams)
NSCTCaptureFilterParams = tagNSCTCaptureFilterParams
class tagNSCTCaptureFrameCountInfo(Structure):
    pass
tagNSCTCaptureFrameCountInfo._fields_ = [
    ('ulCount', c_ulong),
]
assert sizeof(tagNSCTCaptureFrameCountInfo) == 4, sizeof(tagNSCTCaptureFrameCountInfo)
assert alignment(tagNSCTCaptureFrameCountInfo) == 4, alignment(tagNSCTCaptureFrameCountInfo)
NSCTCaptureFrameCountInfo = tagNSCTCaptureFrameCountInfo
class tagNSCTCaptureFrameInfo(Structure):
    pass
tagNSCTCaptureFrameInfo._fields_ = [
    ('ulTimestamp', c_ulong),
    ('ulDirection', c_ulong),
    ('ulPacketLength', c_ulong),
    ('ulCaptureLength', c_ulong),
    ('ucCaptureData', c_ubyte * 2048),
]
assert sizeof(tagNSCTCaptureFrameInfo) == 2064, sizeof(tagNSCTCaptureFrameInfo)
assert alignment(tagNSCTCaptureFrameInfo) == 4, alignment(tagNSCTCaptureFrameInfo)
NSCTCaptureFrameInfo = tagNSCTCaptureFrameInfo
class tagNSCTCaptureFrameV2Info(Structure):
    pass
tagNSCTCaptureFrameV2Info._fields_ = [
    ('ulTimestamp_sec', c_ulong),
    ('ulTimestamp_usec', c_ulong),
    ('ulDirection', c_ulong),
    ('ulPacketLength', c_ulong),
    ('ulCaptureLength', c_ulong),
    ('ucReserved', c_ubyte * 12),
    ('ucCaptureData', c_ubyte * 2048),
]
assert sizeof(tagNSCTCaptureFrameV2Info) == 2080, sizeof(tagNSCTCaptureFrameV2Info)
assert alignment(tagNSCTCaptureFrameV2Info) == 4, alignment(tagNSCTCaptureFrameV2Info)
NSCTCaptureFrameV2Info = tagNSCTCaptureFrameV2Info
class tagNSHalfDuplexCounterInfo(Structure):
    pass
tagNSHalfDuplexCounterInfo._fields_ = [
    ('u64AlignError', U64),
    ('u64Collision', U64),
    ('u64XsCollision', U64),
    ('u64Reserved', U64 * 5),
]
assert sizeof(tagNSHalfDuplexCounterInfo) == 64, sizeof(tagNSHalfDuplexCounterInfo)
assert alignment(tagNSHalfDuplexCounterInfo) == 4, alignment(tagNSHalfDuplexCounterInfo)
NSHalfDuplexCounterInfo = tagNSHalfDuplexCounterInfo
class tagNSHalfDuplexRateInfo(Structure):
    pass
tagNSHalfDuplexRateInfo._fields_ = [
    ('u64AlignErrorRate', U64),
    ('u64CollisionRate', U64),
    ('u64XsCollisionRate', U64),
    ('u64Reserved', U64 * 5),
]
assert sizeof(tagNSHalfDuplexRateInfo) == 64, sizeof(tagNSHalfDuplexRateInfo)
assert alignment(tagNSHalfDuplexRateInfo) == 4, alignment(tagNSHalfDuplexRateInfo)
NSHalfDuplexRateInfo = tagNSHalfDuplexRateInfo
class tagNSL2StatCounterInfo(Structure):
    pass
tagNSL2StatCounterInfo._fields_ = [
    ('u64TxFrame', U64),
    ('u64TxByte', U64),
    ('u64TxTrigger', U64),
    ('u32TxLatency', c_ulong),
    ('u64RxFrame', U64),
    ('u64RxByte', U64),
    ('u64RxTrigger', U64),
    ('u32RxLatency', c_ulong),
    ('u64RxCrcError', U64),
    ('u64RxOversize', U64),
    ('u64RxUndersize', U64),
]
assert sizeof(tagNSL2StatCounterInfo) == 80, sizeof(tagNSL2StatCounterInfo)
assert alignment(tagNSL2StatCounterInfo) == 4, alignment(tagNSL2StatCounterInfo)
NSL2StatCounterInfo = tagNSL2StatCounterInfo
class tagNSL2StatRateInfo(Structure):
    pass
tagNSL2StatRateInfo._fields_ = [
    ('u32TxFrameRate', c_ulong),
    ('u32TxByteRate', c_ulong),
    ('u32TxTriggerRate', c_ulong),
    ('u32RxFrameRate', c_ulong),
    ('u32RxByteRate', c_ulong),
    ('u32RxTriggerRate', c_ulong),
    ('u32RxCrcErrorRate', c_ulong),
    ('u32RxOversizeRate', c_ulong),
    ('u32RxUndersizeRate', c_ulong),
]
assert sizeof(tagNSL2StatRateInfo) == 36, sizeof(tagNSL2StatRateInfo)
assert alignment(tagNSL2StatRateInfo) == 4, alignment(tagNSL2StatRateInfo)
NSL2StatRateInfo = tagNSL2StatRateInfo
class tagNSL3StatInfo(Structure):
    pass
tagNSL3StatInfo._fields_ = [
    ('u64RxVlanFrames', U64),
    ('u64RxIPFrames', U64),
    ('u64IPChecksumError', U64),
    ('u32ArpReplyRecv', c_ulong),
    ('u32ArpReplySent', c_ulong),
    ('u32ArpRequestSent', c_ulong),
    ('u32ArpReqlyRecv', c_ulong),
    ('u32PingReplyRecv', c_ulong),
    ('u32PingReplySent', c_ulong),
    ('u32PingRequestSent', c_ulong),
    ('u32PingRequestRecv', c_ulong),
    ('u32RxStack', c_ulong),
    ('u32TxStack', c_ulong),
    ('u64RxDataIntegrityError', U64),
    ('u64RxSignatureFrame', U64),
    ('u64TxSignatureFrame', U64),
    ('u64RxJumboFrames', U64),
]
assert sizeof(tagNSL3StatInfo) == 96, sizeof(tagNSL3StatInfo)
assert alignment(tagNSL3StatInfo) == 4, alignment(tagNSL3StatInfo)
NSL3StatInfo = tagNSL3StatInfo
class tagNSIPv6CounterInfo(Structure):
    pass
tagNSIPv6CounterInfo._fields_ = [
    ('u64RxIPv6Frames', U64),
    ('u64RxPayloadChecksumError', U64),
    ('u64NeighborSolicitationSent', U64),
    ('u64NeighborSolicitationRecv', U64),
    ('u64NeighborAdvertisementSent', U64),
    ('u64NeighborAdvertisementRecv', U64),
    ('u64RouterSolicitationSent', U64),
    ('u64RouterAdvertisementRecv', U64),
    ('u64PingRequestSent', U64),
    ('u64PingRequestRecv', U64),
    ('u64PingReplySent', U64),
    ('u64PingReplyRecv', U64),
    ('u64Reserved', U64 * 20),
]
assert sizeof(tagNSIPv6CounterInfo) == 256, sizeof(tagNSIPv6CounterInfo)
assert alignment(tagNSIPv6CounterInfo) == 4, alignment(tagNSIPv6CounterInfo)
NSIPv6CounterInfo = tagNSIPv6CounterInfo
class tagNSIPv6RateInfo(Structure):
    pass
tagNSIPv6RateInfo._fields_ = [
    ('ulRxIPv6FramesRate', c_ulong),
    ('ulRxPayloadChecksumErrorRate', c_ulong),
    ('ulNeighborSolicitationSentRate', c_ulong),
    ('ulNeighborSolicitationRecvRate', c_ulong),
    ('ulNeighborAdvertisementSentRate', c_ulong),
    ('ulNeighborAdvertisementRecvRate', c_ulong),
    ('ulRouterSolicitationSentRate', c_ulong),
    ('ulRouterAdvertisementRecvRate', c_ulong),
    ('ulPingReqSentRate', c_ulong),
    ('ulPingReqRecvRate', c_ulong),
    ('ulPingRepSentRate', c_ulong),
    ('ulPingRepRecvRate', c_ulong),
    ('ulReserved', c_ulong * 20),
]
assert sizeof(tagNSIPv6RateInfo) == 128, sizeof(tagNSIPv6RateInfo)
assert alignment(tagNSIPv6RateInfo) == 4, alignment(tagNSIPv6RateInfo)
NSIPv6RateInfo = tagNSIPv6RateInfo
class tagNSRealTimeTrackingConfig(Structure):
    pass
tagNSRealTimeTrackingConfig._fields_ = [
    ('ulNumStreams', c_ulong),
    ('ulStreamIndex', c_ulong * 64),
    ('ucReserved', c_ubyte * 20),
]
assert sizeof(tagNSRealTimeTrackingConfig) == 280, sizeof(tagNSRealTimeTrackingConfig)
assert alignment(tagNSRealTimeTrackingConfig) == 4, alignment(tagNSRealTimeTrackingConfig)
NSRealTimeTrackingConfig = tagNSRealTimeTrackingConfig
class tagRealTimeCounters(Structure):
    pass
tagRealTimeCounters._fields_ = [
    ('ulStreamIndex', c_ulong),
    ('u64NumFrames', U64),
    ('u64NumBytes', U64),
    ('u64LatencyPerStream', U64),
    ('ulFramesPerStream', c_ulong),
    ('ucReserved', c_ubyte * 50),
]
assert sizeof(tagRealTimeCounters) == 84, sizeof(tagRealTimeCounters)
assert alignment(tagRealTimeCounters) == 4, alignment(tagRealTimeCounters)
RealTimeCounters = tagRealTimeCounters
class tagNSRealTimeTrackingCounters(Structure):
    pass
tagNSRealTimeTrackingCounters._fields_ = [
    ('ulNumStreams', c_ulong),
    ('u64CurrentTickCount', U64),
    ('u64ElapsedTickCount', U64),
    ('Counters', RealTimeCounters * 64),
    ('ucReserved', c_ubyte * 50),
]
assert sizeof(tagNSRealTimeTrackingCounters) == 5448, sizeof(tagNSRealTimeTrackingCounters)
assert alignment(tagNSRealTimeTrackingCounters) == 4, alignment(tagNSRealTimeTrackingCounters)
NSRealTimeTrackingCounters = tagNSRealTimeTrackingCounters
class tagNSMDIORegister(Structure):
    pass
tagNSMDIORegister._fields_ = [
    ('uiAddress', c_ushort),
    ('uiRegister', c_ushort),
    ('uiValue', c_ushort),
]
assert sizeof(tagNSMDIORegister) == 6, sizeof(tagNSMDIORegister)
assert alignment(tagNSMDIORegister) == 2, alignment(tagNSMDIORegister)
NSMDIORegister = tagNSMDIORegister
class tagIGMPGroupAddressBlock(Structure):
    pass
tagIGMPGroupAddressBlock._fields_ = [
    ('ucStartIPAddress', c_ubyte * 4),
    ('ucUpperIPAddressBoundary', c_ubyte * 4),
    ('uiIPChangeStep', c_ushort),
    ('uiNumIP', c_ushort),
    ('ucReserved', c_ubyte * 30),
]
assert sizeof(tagIGMPGroupAddressBlock) == 42, sizeof(tagIGMPGroupAddressBlock)
assert alignment(tagIGMPGroupAddressBlock) == 2, alignment(tagIGMPGroupAddressBlock)
IGMPGroupAddressBlock = tagIGMPGroupAddressBlock
class tagNSIGMPv3GroupConfig(Structure):
    pass
tagNSIGMPv3GroupConfig._fields_ = [
    ('ucIPAddress', c_ubyte * 4),
    ('ucMACAddress', c_ubyte * 6),
    ('ucVLANEnable', c_ubyte),
    ('ucPRI', c_ubyte),
    ('ucCFI', c_ubyte),
    ('uiVID', c_ushort),
    ('uiNumInterface', c_ushort),
    ('uiIPAddressStepCount', c_ushort),
    ('uiMACStepCount', c_ushort),
    ('uiVIDStepCount', c_ushort),
    ('ucGroupIPAddress', c_ubyte * 4),
    ('uiNumGroup', c_ushort),
    ('uiGroupIPStepCount', c_ushort),
    ('ulInitialReportGap', c_ulong),
    ('uiFilterMode', c_ushort),
    ('ucPPPMode', c_ubyte),
    ('uiPPPInstance', c_ushort),
    ('uiPPPInstanceStepCount', c_ushort),
    ('uiVCIndex', c_ushort),
    ('ucNumAddressBlock', c_ubyte),
    ('ucReserved', c_ubyte * 43),
    ('IPAddressBlock', IGMPGroupAddressBlock * 100),
]
assert sizeof(tagNSIGMPv3GroupConfig) == 4292, sizeof(tagNSIGMPv3GroupConfig)
assert alignment(tagNSIGMPv3GroupConfig) == 4, alignment(tagNSIGMPv3GroupConfig)
NSIGMPv3GroupConfig = tagNSIGMPv3GroupConfig
class tagNSIGMPv3GroupMod(Structure):
    pass
tagNSIGMPv3GroupMod._fields_ = [
    ('ucGroupIPAddress', c_ubyte * 4),
    ('ucVLANEnable', c_ubyte),
    ('ucPRI', c_ubyte),
    ('ucCFI', c_ubyte),
    ('uiVID', c_ushort),
    ('ucIPAddress', c_ubyte * 4),
    ('ucMACAddress', c_ubyte * 6),
    ('uiFilterMode', c_ushort),
    ('ucPPPMode', c_ubyte),
    ('uiPPPInstance', c_ushort),
    ('uiVCIndex', c_ushort),
    ('IPAddressBlockChange', IGMPGroupAddressBlock),
    ('ucReserved', c_ubyte * 45),
]
assert sizeof(tagNSIGMPv3GroupMod) == 116, sizeof(tagNSIGMPv3GroupMod)
assert alignment(tagNSIGMPv3GroupMod) == 2, alignment(tagNSIGMPv3GroupMod)
NSIGMPv3GroupMod = tagNSIGMPv3GroupMod
class tagNSIGMPv3StatsInfo(Structure):
    pass
tagNSIGMPv3StatsInfo._fields_ = [
    ('ucGroupIPAddress', c_ubyte * 4),
    ('ucVLANEnable', c_ubyte),
    ('ucPRI', c_ubyte),
    ('ucCFI', c_ubyte),
    ('uiVID', c_ushort),
    ('ucIPAddress', c_ubyte * 4),
    ('ucMACAddress', c_ubyte * 6),
    ('ucPPPMode', c_ubyte),
    ('uiPPPInstance', c_ushort),
    ('ulV3GroupQueryReceived', c_ulong),
    ('ulV2QueryReceived', c_ulong),
    ('ulV1QueryReceived', c_ulong),
    ('ulV2ReportReceived', c_ulong),
    ('ulV1ReportReceived', c_ulong),
    ('ulTotalV3ReportSent', c_ulong),
    ('ulIsIncludeSent', c_ulong),
    ('ulIsExcludeSent', c_ulong),
    ('ulToIncludeSent', c_ulong),
    ('ulToExcludeSent', c_ulong),
    ('ulAllowSent', c_ulong),
    ('ulBlockSent', c_ulong),
    ('ucReserved', c_ubyte * 47),
]
assert sizeof(tagNSIGMPv3StatsInfo) == 120, sizeof(tagNSIGMPv3StatsInfo)
assert alignment(tagNSIGMPv3StatsInfo) == 4, alignment(tagNSIGMPv3StatsInfo)
NSIGMPv3StatsInfo = tagNSIGMPv3StatsInfo
class tagNSIGMPv3Config(Structure):
    pass
tagNSIGMPv3Config._fields_ = [
    ('ucVersion', c_ubyte),
    ('ucOptions', c_ubyte),
    ('uiMaxNumGroups', c_ushort),
    ('ucMaxAddressBlock', c_ubyte),
    ('uiMaxIPPerBlock', c_ushort),
    ('ucRobustnessVariable', c_ubyte),
    ('ucUnsolicitedReportInterval', c_ubyte),
    ('ulInitialReportGap', c_ulong),
    ('ucReserved', c_ubyte * 46),
]
assert sizeof(tagNSIGMPv3Config) == 64, sizeof(tagNSIGMPv3Config)
assert alignment(tagNSIGMPv3Config) == 4, alignment(tagNSIGMPv3Config)
NSIGMPv3Config = tagNSIGMPv3Config
class tagNSIGMPv3GroupInfo(Structure):
    pass
tagNSIGMPv3GroupInfo._fields_ = [
    ('ucGroupIPAddress', c_ubyte * 4),
    ('ucVLANEnable', c_ubyte),
    ('ucPRI', c_ubyte),
    ('ucCFI', c_ubyte),
    ('uiVID', c_ushort),
    ('ucIPAddress', c_ubyte * 4),
    ('ucMACAddress', c_ubyte * 6),
    ('ucPPPMode', c_ubyte),
    ('uiPPPInstance', c_ushort),
    ('ulJoinTimestamp', c_ulong),
    ('ulLeaveTimestamp', c_ulong),
    ('ulLastStateTimestamp', c_ulong),
    ('ucReserved', c_ubyte * 21),
]
assert sizeof(tagNSIGMPv3GroupInfo) == 60, sizeof(tagNSIGMPv3GroupInfo)
assert alignment(tagNSIGMPv3GroupInfo) == 4, alignment(tagNSIGMPv3GroupInfo)
NSIGMPv3GroupInfo = tagNSIGMPv3GroupInfo
class tagNSWaitForEvent(Structure):
    pass
tagNSWaitForEvent._fields_ = [
    ('ulEventFlag', c_ulong),
    ('ulTimeout', c_ulong),
    ('ulStatus', c_ulong),
]
assert sizeof(tagNSWaitForEvent) == 12, sizeof(tagNSWaitForEvent)
assert alignment(tagNSWaitForEvent) == 4, alignment(tagNSWaitForEvent)
NSWaitForEvent = tagNSWaitForEvent
class tagNSResolveArps(Structure):
    pass
tagNSResolveArps._fields_ = [
    ('ulTimeout', c_ulong),
    ('ulStatus', c_ulong),
]
assert sizeof(tagNSResolveArps) == 8, sizeof(tagNSResolveArps)
assert alignment(tagNSResolveArps) == 4, alignment(tagNSResolveArps)
NSResolveArps = tagNSResolveArps
class tagNSIPOption(Structure):
    pass
tagNSIPOption._fields_ = [
    ('ucCode', c_ubyte),
    ('uiLength', c_ushort),
    ('uiPointer', c_ushort),
    ('uiDataLength', c_ushort),
    ('ucData', c_ubyte * 124),
    ('ucReserved', c_ubyte * 50),
]
assert sizeof(tagNSIPOption) == 182, sizeof(tagNSIPOption)
assert alignment(tagNSIPOption) == 2, alignment(tagNSIPOption)
NSIPOption = tagNSIPOption
class tagNSARPConfig(Structure):
    pass
tagNSARPConfig._fields_ = [
    ('ucARPMode', c_ubyte),
    ('ucGratuitousARPEnable', c_ubyte),
    ('ucVLANARPMode', c_ubyte),
    ('ucReserved', c_ubyte * 18),
]
assert sizeof(tagNSARPConfig) == 21, sizeof(tagNSARPConfig)
assert alignment(tagNSARPConfig) == 1, alignment(tagNSARPConfig)
NSARPConfig = tagNSARPConfig
class tagNSARPStatusInfo(Structure):
    pass
tagNSARPStatusInfo._fields_ = [
    ('ulRequestsSent', c_ulong),
    ('ulRequestsRecv', c_ulong),
    ('ulRepliesSent', c_ulong),
    ('ulRepliesRecv', c_ulong),
    ('u64NeighborSolicitationSent', U64),
    ('u64NeighborSolicitationRecv', U64),
    ('u64NeighborAdvertisementSent', U64),
    ('u64NeighborAdvertisementRecv', U64),
    ('ulResolved', c_ulong),
    ('ulUnresolved', c_ulong),
    ('ulTotal', c_ulong),
    ('ulGratuitousRecv', c_ulong),
    ('ucReserved', c_ubyte * 60),
]
assert sizeof(tagNSARPStatusInfo) == 124, sizeof(tagNSARPStatusInfo)
assert alignment(tagNSARPStatusInfo) == 4, alignment(tagNSARPStatusInfo)
NSARPStatusInfo = tagNSARPStatusInfo
class tagNSFileTransferStructure(Structure):
    pass
tagNSFileTransferStructure._fields_ = [
    ('szSourcePathName', c_char * 128),
    ('szDestPathName', c_char * 128),
    ('ucReserve', c_ubyte * 256),
]
assert sizeof(tagNSFileTransferStructure) == 512, sizeof(tagNSFileTransferStructure)
assert alignment(tagNSFileTransferStructure) == 1, alignment(tagNSFileTransferStructure)
NSFileTransferStructure = tagNSFileTransferStructure
class tagNSCounterInfo(Structure):
    pass
tagNSCounterInfo._fields_ = [
    ('u64TxFrames', U64),
    ('u64RxFrames', U64),
    ('u64TxBytes', U64),
    ('u64RxBytes', U64),
    ('u64Undersize', U64),
    ('u64Oversize', U64),
    ('u64AlignError', U64),
    ('u64CRCError', U64),
    ('u64RxTriggers', U64),
    ('u64Collisions', U64),
    ('u64RxJumboFrames', U64),
    ('ulTxLatency', c_ulong),
    ('ulRxLatency', c_ulong),
    ('u64TxJumboFrames', U64),
    ('u64TxTriggers', U64),
    ('u64TxSignature', U64),
    ('u64RxSignature', U64),
    ('u64TxTimeStamp', U64),
    ('u64RxTimeStamp', U64),
    ('u64RxIPChecksumErrors', U64),
    ('ucReserved', c_ubyte * 252),
]
assert sizeof(tagNSCounterInfo) == 404, sizeof(tagNSCounterInfo)
assert alignment(tagNSCounterInfo) == 4, alignment(tagNSCounterInfo)
NSCounterInfo = tagNSCounterInfo
class tagNSMFGPROM(Structure):
    pass
tagNSMFGPROM._fields_ = [
    ('szSerialNum', c_char * 20),
    ('szBurnDate', c_char * 4),
    ('szBurnRecordNum', c_char * 8),
    ('szECORevLevel', c_char * 4),
    ('szFinalTestRecordNum', c_char * 8),
    ('szConfigTestDate', c_char * 4),
    ('szConfigTestRecordNum', c_char * 8),
    ('szExtendedTestDate', c_char * 4),
    ('szExtendedTestRecordNum', c_char * 8),
    ('szSalesOrderNum', c_char * 16),
    ('ucReserved', c_ubyte * 44),
]
assert sizeof(tagNSMFGPROM) == 128, sizeof(tagNSMFGPROM)
assert alignment(tagNSMFGPROM) == 1, alignment(tagNSMFGPROM)
NSMFGPROM = tagNSMFGPROM
class tagNSTrigger(Structure):
    pass
tagNSTrigger._fields_ = [
    ('ucTriggerCombo', c_ubyte),
    ('ulTrigger1Offset', c_ulong),
    ('uiTrigger1Range', c_ushort),
    ('ucTrigger1Data', c_ubyte * 6),
    ('ucReserved1', c_ubyte * 26),
    ('ucTrigger1Mask', c_ubyte * 6),
    ('ucReserved2', c_ubyte * 26),
    ('ulTrigger2Offset', c_ulong),
    ('uiTrigger2Range', c_ushort),
    ('ucTrigger2Data', c_ubyte * 6),
    ('ucReserved3', c_ubyte * 26),
    ('ucTrigger2Mask', c_ubyte * 6),
    ('ucReserved4', c_ubyte * 26),
    ('ucTriggerOutMode', c_ubyte),
    ('ulLineNum', c_ulong),
    ('ulChannelNum', c_ulong),
    ('ucDirection', c_ubyte),
    ('ucReserved5', c_ubyte * 29),
]
assert sizeof(tagNSTrigger) == 188, sizeof(tagNSTrigger)
assert alignment(tagNSTrigger) == 4, alignment(tagNSTrigger)
NSTrigger = tagNSTrigger
class tagNSAlternateKeyConfig(Structure):
    pass
tagNSAlternateKeyConfig._fields_ = [
    ('ulMode', c_ulong),
    ('ulOffset', c_ulong),
    ('ulMask', c_ulong),
    ('ucReserved', c_ubyte * 20),
]
assert sizeof(tagNSAlternateKeyConfig) == 32, sizeof(tagNSAlternateKeyConfig)
assert alignment(tagNSAlternateKeyConfig) == 4, alignment(tagNSAlternateKeyConfig)
NSAlternateKeyConfig = tagNSAlternateKeyConfig
class tagNSAlternateKeyHashConfig(Structure):
    pass
tagNSAlternateKeyHashConfig._fields_ = [
    ('ulKeyArrangement', c_ulong),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSAlternateKeyHashConfig) == 20, sizeof(tagNSAlternateKeyHashConfig)
assert alignment(tagNSAlternateKeyHashConfig) == 4, alignment(tagNSAlternateKeyHashConfig)
NSAlternateKeyHashConfig = tagNSAlternateKeyHashConfig
class tagNSIPv6Config(Structure):
    pass
tagNSIPv6Config._fields_ = [
    ('ucSAAInterfaceIDGenMode', c_ubyte),
    ('ucSAAInterfaceIDBitValue', c_ubyte),
    ('ucNextHopDeterminationMode', c_ubyte),
    ('ucVLANRouterSolicitationEnable', c_ubyte),
    ('ucSendNeighborAdvertisementEnable', c_ubyte),
    ('uiRouterSolicitationInterval', c_ushort),
    ('ucMaxRouterSolicitations', c_ubyte),
    ('uiVLANRouterSolicitationGap', c_ushort),
    ('ucEnableSourceStreamAddressSelection', c_ubyte),
    ('ucMaxDADNeighborSolicitations', c_ubyte),
    ('ucVerifyLinkLocalEnable', c_ubyte),
    ('uiDADNeighborSolicitationsGap', c_ushort),
    ('ulRetransmissionTime', c_ulong),
    ('ucSourceAddressFirstChoice', c_ubyte),
    ('ucSourceAddressSecondChoice', c_ubyte),
    ('ucSourceAddressThirdChoice', c_ubyte),
    ('ucSourceAddressSelectByDestination', c_ubyte),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagNSIPv6Config) == 92, sizeof(tagNSIPv6Config)
assert alignment(tagNSIPv6Config) == 4, alignment(tagNSIPv6Config)
NSIPv6Config = tagNSIPv6Config
class tagNSIPv6Control(Structure):
    pass
tagNSIPv6Control._fields_ = [
    ('ulAction', c_ulong),
    ('ucReserved', c_ubyte * 32),
]
assert sizeof(tagNSIPv6Control) == 36, sizeof(tagNSIPv6Control)
assert alignment(tagNSIPv6Control) == 4, alignment(tagNSIPv6Control)
NSIPv6Control = tagNSIPv6Control
class tagNSIPv6StatusInfo(Structure):
    pass
tagNSIPv6StatusInfo._fields_ = [
    ('u64Status', U64),
    ('ulRouterDiscoveryExpectedTime', c_ulong),
    ('ulAddressAutoConfigExpectedTime', c_ulong),
    ('ulNextHopExpectedTime', c_ulong),
    ('ucNeighborSolicitationError', c_ubyte),
    ('ucNeighborAdvertisementError', c_ubyte),
    ('ucRouterAdvertisementError', c_ubyte),
    ('ucGeneralError', c_ubyte),
    ('uiGenericStackError', c_ushort),
    ('uiRouterDiscoveryError', c_ushort),
    ('uiAddressAutoConfigurationError', c_ushort),
    ('uiNextHopError', c_ushort),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagNSIPv6StatusInfo) == 96, sizeof(tagNSIPv6StatusInfo)
assert alignment(tagNSIPv6StatusInfo) == 4, alignment(tagNSIPv6StatusInfo)
NSIPv6StatusInfo = tagNSIPv6StatusInfo
class tagNSIPv6RouterDiscoveryCountInfo(Structure):
    pass
tagNSIPv6RouterDiscoveryCountInfo._fields_ = [
    ('ulCount', c_ulong),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSIPv6RouterDiscoveryCountInfo) == 20, sizeof(tagNSIPv6RouterDiscoveryCountInfo)
assert alignment(tagNSIPv6RouterDiscoveryCountInfo) == 4, alignment(tagNSIPv6RouterDiscoveryCountInfo)
NSIPv6RouterDiscoveryCountInfo = tagNSIPv6RouterDiscoveryCountInfo
class tagNSIPv6RouterDiscoveryInfo(Structure):
    pass
tagNSIPv6RouterDiscoveryInfo._fields_ = [
    ('ucRouterIPAddress', c_ubyte * 16),
    ('ucCurrentHopLimit', c_ubyte),
    ('ucFlags', c_ubyte),
    ('uiRouterLifetime', c_ushort),
    ('ucEnableVlan', c_ubyte),
    ('ucVLANPri', c_ubyte),
    ('ucVLANCfi', c_ubyte),
    ('uiVlanID', c_ushort),
    ('ulReachableTime', c_ulong),
    ('ulRetransmissionTime', c_ulong),
    ('ulMTU', c_ulong),
    ('ulRouterIndex', c_ulong),
    ('uiPrefixCount', c_ushort),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSIPv6RouterDiscoveryInfo) == 64, sizeof(tagNSIPv6RouterDiscoveryInfo)
assert alignment(tagNSIPv6RouterDiscoveryInfo) == 4, alignment(tagNSIPv6RouterDiscoveryInfo)
NSIPv6RouterDiscoveryInfo = tagNSIPv6RouterDiscoveryInfo
class tagNSIPv6RouterPrefixCountInfo(Structure):
    pass
tagNSIPv6RouterPrefixCountInfo._fields_ = [
    ('ulCount', c_ulong),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSIPv6RouterPrefixCountInfo) == 20, sizeof(tagNSIPv6RouterPrefixCountInfo)
assert alignment(tagNSIPv6RouterPrefixCountInfo) == 4, alignment(tagNSIPv6RouterPrefixCountInfo)
NSIPv6RouterPrefixCountInfo = tagNSIPv6RouterPrefixCountInfo
class tagNSIPv6RouterPrefixInfo(Structure):
    pass
tagNSIPv6RouterPrefixInfo._fields_ = [
    ('ulRouterIndex', c_ulong),
    ('uiVlanID', c_ushort),
    ('ucPrefixLength', c_ubyte),
    ('ucFlags', c_ubyte),
    ('ulLifetime', c_ulong),
    ('ulPreferredLifetime', c_ulong),
    ('ucPrefix', c_ubyte * 16),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagNSIPv6RouterPrefixInfo) == 96, sizeof(tagNSIPv6RouterPrefixInfo)
assert alignment(tagNSIPv6RouterPrefixInfo) == 4, alignment(tagNSIPv6RouterPrefixInfo)
NSIPv6RouterPrefixInfo = tagNSIPv6RouterPrefixInfo
class tagNSIPv6StatelessAddressCountInfo(Structure):
    pass
tagNSIPv6StatelessAddressCountInfo._fields_ = [
    ('ulCount', c_ulong),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSIPv6StatelessAddressCountInfo) == 20, sizeof(tagNSIPv6StatelessAddressCountInfo)
assert alignment(tagNSIPv6StatelessAddressCountInfo) == 4, alignment(tagNSIPv6StatelessAddressCountInfo)
NSIPv6StatelessAddressCountInfo = tagNSIPv6StatelessAddressCountInfo
class tagNSIPv6StatelessAddressEntry(Structure):
    pass
tagNSIPv6StatelessAddressEntry._fields_ = [
    ('uiStreamIndex', c_ushort),
    ('ucStatus', c_ubyte),
    ('ucIPV6Address', c_ubyte * 16),
    ('ucReserved', c_ubyte),
]
assert sizeof(tagNSIPv6StatelessAddressEntry) == 20, sizeof(tagNSIPv6StatelessAddressEntry)
assert alignment(tagNSIPv6StatelessAddressEntry) == 2, alignment(tagNSIPv6StatelessAddressEntry)
NSIPv6StatelessAddressEntry = tagNSIPv6StatelessAddressEntry
class tagNSIPv6StatelessAddressInfo(Structure):
    pass
tagNSIPv6StatelessAddressInfo._fields_ = [
    ('uiStreamIndex', c_ushort),
    ('uiStreamCount', c_ushort),
    ('ucRequestedStatus', c_ubyte),
    ('uiCount', c_ushort),
    ('ucReserved', c_ubyte),
    ('StatelessAddress', NSIPv6StatelessAddressEntry * 512),
]
assert sizeof(tagNSIPv6StatelessAddressInfo) == 10250, sizeof(tagNSIPv6StatelessAddressInfo)
assert alignment(tagNSIPv6StatelessAddressInfo) == 2, alignment(tagNSIPv6StatelessAddressInfo)
NSIPv6StatelessAddressInfo = tagNSIPv6StatelessAddressInfo
class tagNSSignatureDetectMode(Structure):
    pass
tagNSSignatureDetectMode._fields_ = [
    ('ucMode', c_ubyte),
    ('ucReserved', c_ubyte * 15),
]
assert sizeof(tagNSSignatureDetectMode) == 16, sizeof(tagNSSignatureDetectMode)
assert alignment(tagNSSignatureDetectMode) == 1, alignment(tagNSSignatureDetectMode)
NSSignatureDetectMode = tagNSSignatureDetectMode
class tagNSTransmitPaddingMode(Structure):
    pass
tagNSTransmitPaddingMode._fields_ = [
    ('ucEnable', c_ubyte),
    ('ucReserved', c_ubyte * 15),
]
assert sizeof(tagNSTransmitPaddingMode) == 16, sizeof(tagNSTransmitPaddingMode)
assert alignment(tagNSTransmitPaddingMode) == 1, alignment(tagNSTransmitPaddingMode)
NSTransmitPaddingMode = tagNSTransmitPaddingMode
class tagNSIPv6IPv4AddressMapInfo(Structure):
    pass
tagNSIPv6IPv4AddressMapInfo._fields_ = [
    ('uiIndex', c_ushort),
    ('ucIPv6AddressBase', c_ubyte * 16),
    ('ucIPv6AddressStep', c_ubyte * 16),
    ('ucIPv4AddressBase', c_ubyte * 4),
    ('ucIPv4AddressStep', c_ubyte * 4),
    ('uiIPv6AddressCount', c_ushort),
    ('uiIPv4AddressCount', c_ushort),
    ('uiMapUsage', c_ushort),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagNSIPv6IPv4AddressMapInfo) == 112, sizeof(tagNSIPv6IPv4AddressMapInfo)
assert alignment(tagNSIPv6IPv4AddressMapInfo) == 2, alignment(tagNSIPv6IPv4AddressMapInfo)
NSIPv6IPv4AddressMapInfo = tagNSIPv6IPv4AddressMapInfo
class tagNSIPv6IPv4AddressMapDelete(Structure):
    pass
tagNSIPv6IPv4AddressMapDelete._fields_ = [
    ('uiIndex', c_ushort),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSIPv6IPv4AddressMapDelete) == 18, sizeof(tagNSIPv6IPv4AddressMapDelete)
assert alignment(tagNSIPv6IPv4AddressMapDelete) == 2, alignment(tagNSIPv6IPv4AddressMapDelete)
NSIPv6IPv4AddressMapDelete = tagNSIPv6IPv4AddressMapDelete
class tagNSIPv6IPv4Translation(Structure):
    pass
tagNSIPv6IPv4Translation._fields_ = [
    ('ulStreamIndex', c_ulong),
    ('uiDestinationType', c_ushort),
    ('ucIPAddresss', c_ubyte * 16),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSIPv6IPv4Translation) == 40, sizeof(tagNSIPv6IPv4Translation)
assert alignment(tagNSIPv6IPv4Translation) == 4, alignment(tagNSIPv6IPv4Translation)
NSIPv6IPv4Translation = tagNSIPv6IPv4Translation
class tagNSIGMPv2GroupID(Structure):
    pass
tagNSIGMPv2GroupID._fields_ = [
    ('ucGroupIPAddress', c_ubyte * 4),
    ('ucVLANEnable', c_ubyte),
    ('ucPRI', c_ubyte),
    ('ucCFI', c_ubyte),
    ('uiVID', c_ushort),
    ('ucPPPMode', c_ubyte),
    ('uiPPPInstance', c_ushort),
    ('uiVCIndex', c_ushort),
    ('ucMACAddress', c_ubyte * 6),
    ('ucIPAddress', c_ubyte * 4),
    ('ucReserved', c_ubyte * 50),
]
assert sizeof(tagNSIGMPv2GroupID) == 76, sizeof(tagNSIGMPv2GroupID)
assert alignment(tagNSIGMPv2GroupID) == 2, alignment(tagNSIGMPv2GroupID)
NSIGMPv2GroupID = tagNSIGMPv2GroupID
class tagNSIGMPv2Info(Structure):
    pass
tagNSIGMPv2Info._fields_ = [
    ('ucGroupIPAddress', c_ubyte * 4),
    ('ucVLANEnable', c_ubyte),
    ('ucPRI', c_ubyte),
    ('ucCFI', c_ubyte),
    ('uiVID', c_ushort),
    ('ucPPPMode', c_ubyte),
    ('uiPPPInstance', c_ushort),
    ('uiVCIndex', c_ushort),
    ('ucMACAddress', c_ubyte * 6),
    ('ucIPAddress', c_ubyte * 4),
    ('ulJoinTimestamp', c_ulong),
    ('ulLeaveTimestamp', c_ulong),
    ('ucReserved', c_ubyte * 50),
]
assert sizeof(tagNSIGMPv2Info) == 88, sizeof(tagNSIGMPv2Info)
assert alignment(tagNSIGMPv2Info) == 4, alignment(tagNSIGMPv2Info)
NSIGMPv2Info = tagNSIGMPv2Info
class tagNSIPv6NextHopResultCountInfo(Structure):
    pass
tagNSIPv6NextHopResultCountInfo._fields_ = [
    ('ulCount', c_ulong),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSIPv6NextHopResultCountInfo) == 20, sizeof(tagNSIPv6NextHopResultCountInfo)
assert alignment(tagNSIPv6NextHopResultCountInfo) == 4, alignment(tagNSIPv6NextHopResultCountInfo)
NSIPv6NextHopResultCountInfo = tagNSIPv6NextHopResultCountInfo
class tagNSIPv6NextHopResultInfo(Structure):
    pass
tagNSIPv6NextHopResultInfo._fields_ = [
    ('ulStreamIndex', c_ulong),
    ('ucNextHopAddress', c_ubyte * 16),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSIPv6NextHopResultInfo) == 36, sizeof(tagNSIPv6NextHopResultInfo)
assert alignment(tagNSIPv6NextHopResultInfo) == 4, alignment(tagNSIPv6NextHopResultInfo)
NSIPv6NextHopResultInfo = tagNSIPv6NextHopResultInfo
class tagNSProtocolCounterInfo(Structure):
    pass
tagNSProtocolCounterInfo._fields_ = [
    ('u64Timestamp', U64),
    ('u64TxStack', U64),
    ('u64RxStack', U64),
    ('u64RxDropped', U64),
    ('u64TxIPv4', U64),
    ('u64RxIPv4', U64),
    ('u64TxIPv6', U64),
    ('u64RxIPv6', U64),
    ('u64RxDataIntegrityError', U64),
    ('u64RxMPLS', U64),
    ('u64TxMPLS', U64),
    ('u64RxMPLSSignature', U64),
    ('u64TxMPLSSignature', U64),
    ('ucReserved', c_ubyte * 104),
]
assert sizeof(tagNSProtocolCounterInfo) == 208, sizeof(tagNSProtocolCounterInfo)
assert alignment(tagNSProtocolCounterInfo) == 4, alignment(tagNSProtocolCounterInfo)
NSProtocolCounterInfo = tagNSProtocolCounterInfo
class tagIPForwardConfig(Structure):
    pass
tagIPForwardConfig._fields_ = [
    ('ucIPAddress', c_ubyte * 4),
    ('ucNetmask', c_ubyte * 4),
    ('ucGateway', c_ubyte * 4),
    ('ucReserved', c_ubyte * 32),
]
assert sizeof(tagIPForwardConfig) == 44, sizeof(tagIPForwardConfig)
assert alignment(tagIPForwardConfig) == 1, alignment(tagIPForwardConfig)
IPForwardConfig = tagIPForwardConfig
class tagNSDiffServConfig(Structure):
    pass
tagNSDiffServConfig._fields_ = [
    ('ucEnable', c_ubyte),
    ('ucOffsetMode', c_ubyte),
    ('ulOffset', c_ulong),
    ('ucIPAddress', c_ubyte * 4),
    ('ucReserved', c_ubyte * 900),
]
assert sizeof(tagNSDiffServConfig) == 912, sizeof(tagNSDiffServConfig)
assert alignment(tagNSDiffServConfig) == 4, alignment(tagNSDiffServConfig)
NSDiffServConfig = tagNSDiffServConfig
class tagNSDiffServRateInfo(Structure):
    pass
tagNSDiffServRateInfo._fields_ = [
    ('ulAlgorithm', c_ulong),
    ('ulRxFrameRate', c_ulong * 256),
    ('ucReserved', c_ubyte * 96),
]
assert sizeof(tagNSDiffServRateInfo) == 1124, sizeof(tagNSDiffServRateInfo)
assert alignment(tagNSDiffServRateInfo) == 4, alignment(tagNSDiffServRateInfo)
NSDiffServRateInfo = tagNSDiffServRateInfo
class tagNSMLDConfig(Structure):
    pass
tagNSMLDConfig._fields_ = [
    ('ucVersion', c_ubyte),
    ('ucOptions', c_ubyte),
    ('uiMaxNumGroups', c_ushort),
    ('ucMaxAddressBlock', c_ubyte),
    ('uiMaxIPPerBlock', c_ushort),
    ('ucRobustnessVariable', c_ubyte),
    ('ucUnsolicitedReportInterval', c_ubyte),
    ('ulInitialReportGap', c_ulong),
    ('ucReserved', c_ubyte * 46),
]
assert sizeof(tagNSMLDConfig) == 64, sizeof(tagNSMLDConfig)
assert alignment(tagNSMLDConfig) == 4, alignment(tagNSMLDConfig)
NSMLDConfig = tagNSMLDConfig
class tagNSMLDCounterInfo(Structure):
    pass
tagNSMLDCounterInfo._fields_ = [
    ('ulTxFrames', c_ulong),
    ('ulRxFrames', c_ulong),
    ('ulTxStartListenGroups', c_ulong),
    ('ulTxStopListenGroups', c_ulong),
    ('ulRxUnknownType', c_ulong),
    ('ulRxICMPV6ChecksumErrors', c_ulong),
    ('ulRxLengthErrors', c_ulong),
    ('ulRxWrongVersionQueries', c_ulong),
    ('ucReserved', c_ubyte * 50),
]
assert sizeof(tagNSMLDCounterInfo) == 84, sizeof(tagNSMLDCounterInfo)
assert alignment(tagNSMLDCounterInfo) == 4, alignment(tagNSMLDCounterInfo)
NSMLDCounterInfo = tagNSMLDCounterInfo
class tagNSMLDv1Listen(Structure):
    pass
tagNSMLDv1Listen._fields_ = [
    ('ucAction', c_ubyte),
    ('ucGroupIPAddress', c_ubyte * 16),
    ('ucVLANEnable', c_ubyte),
    ('ucPRI', c_ubyte),
    ('ucCFI', c_ubyte),
    ('uiVID', c_ushort),
    ('ucPPPMode', c_ubyte),
    ('uiPPPInstance', c_ushort),
    ('uiVCIndex', c_ushort),
    ('ucMACAddress', c_ubyte * 6),
    ('ucIPAddress', c_ubyte * 16),
    ('ucReserved', c_ubyte * 50),
]
assert sizeof(tagNSMLDv1Listen) == 100, sizeof(tagNSMLDv1Listen)
assert alignment(tagNSMLDv1Listen) == 2, alignment(tagNSMLDv1Listen)
NSMLDv1Listen = tagNSMLDv1Listen
class tagNSMLDTimestampInfo(Structure):
    pass
tagNSMLDTimestampInfo._fields_ = [
    ('ucGroupIPAddress', c_ubyte * 16),
    ('ucVLANEnable', c_ubyte),
    ('ucPRI', c_ubyte),
    ('ucCFI', c_ubyte),
    ('uiVID', c_ushort),
    ('ucPPPMode', c_ubyte),
    ('uiPPPInstance', c_ushort),
    ('uiVCIndex', c_ushort),
    ('ucMACAddress', c_ubyte * 6),
    ('ucIPAddress', c_ubyte * 16),
    ('ulJoinTimestamp', c_ulong),
    ('ulLeaveTimestamp', c_ulong),
    ('ulLastStateTimestamp', c_ulong),
    ('ucReserved', c_ubyte * 20),
]
assert sizeof(tagNSMLDTimestampInfo) == 84, sizeof(tagNSMLDTimestampInfo)
assert alignment(tagNSMLDTimestampInfo) == 4, alignment(tagNSMLDTimestampInfo)
NSMLDTimestampInfo = tagNSMLDTimestampInfo
class tagNSSubscriptionInfo(Structure):
    pass
tagNSSubscriptionInfo._fields_ = [
    ('ulSubscription', c_ulong),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagNSSubscriptionInfo) == 68, sizeof(tagNSSubscriptionInfo)
assert alignment(tagNSSubscriptionInfo) == 4, alignment(tagNSSubscriptionInfo)
NSSubscriptionInfo = tagNSSubscriptionInfo
class tagNSIPv6ExtHopByHop(Structure):
    pass
tagNSIPv6ExtHopByHop._fields_ = [
    ('ucNextHeader', c_ubyte),
    ('ucHeaderExtensionLength', c_ubyte),
    ('ucOptionDataLength', c_ubyte),
    ('ucOptionData', c_ubyte * 255),
    ('ucReserved', c_ubyte * 20),
]
assert sizeof(tagNSIPv6ExtHopByHop) == 278, sizeof(tagNSIPv6ExtHopByHop)
assert alignment(tagNSIPv6ExtHopByHop) == 1, alignment(tagNSIPv6ExtHopByHop)
NSIPv6ExtHopByHop = tagNSIPv6ExtHopByHop
class tagNSIPv6ExtFragment(Structure):
    pass
tagNSIPv6ExtFragment._fields_ = [
    ('ucNextHeader', c_ubyte),
    ('uiFragmentOffset', c_ushort),
    ('ucMFlag', c_ubyte),
    ('ulIdentification', c_ulong),
    ('ucReserved', c_ubyte * 20),
]
assert sizeof(tagNSIPv6ExtFragment) == 32, sizeof(tagNSIPv6ExtFragment)
assert alignment(tagNSIPv6ExtFragment) == 4, alignment(tagNSIPv6ExtFragment)
NSIPv6ExtFragment = tagNSIPv6ExtFragment
class tagNSIPv6ExtDestination(Structure):
    pass
tagNSIPv6ExtDestination._fields_ = [
    ('ucNextHeader', c_ubyte),
    ('ucHeaderExtensionLength', c_ubyte),
    ('ucOptionDataLength', c_ubyte),
    ('ucOptionData', c_ubyte * 255),
    ('ucReserved', c_ubyte * 20),
]
assert sizeof(tagNSIPv6ExtDestination) == 278, sizeof(tagNSIPv6ExtDestination)
assert alignment(tagNSIPv6ExtDestination) == 1, alignment(tagNSIPv6ExtDestination)
NSIPv6ExtDestination = tagNSIPv6ExtDestination
class tagNSIPv6Address(Structure):
    pass
tagNSIPv6Address._fields_ = [
    ('ucIPAddress', c_ubyte * 16),
]
assert sizeof(tagNSIPv6Address) == 16, sizeof(tagNSIPv6Address)
assert alignment(tagNSIPv6Address) == 1, alignment(tagNSIPv6Address)
NSIPv6Address = tagNSIPv6Address
class tagNSIPv6ExtRouting(Structure):
    pass
tagNSIPv6ExtRouting._fields_ = [
    ('ucNextHeader', c_ubyte),
    ('ucHeaderExtensionLength', c_ubyte),
    ('ucSegmentsLeft', c_ubyte),
    ('IPAddress', NSIPv6Address * 20),
    ('ucNumAddress', c_ubyte),
    ('ucReserved', c_ubyte * 20),
]
assert sizeof(tagNSIPv6ExtRouting) == 344, sizeof(tagNSIPv6ExtRouting)
assert alignment(tagNSIPv6ExtRouting) == 1, alignment(tagNSIPv6ExtRouting)
NSIPv6ExtRouting = tagNSIPv6ExtRouting
class tagNSIPv6ExtAuthentication(Structure):
    pass
tagNSIPv6ExtAuthentication._fields_ = [
    ('ucNextHeader', c_ubyte),
    ('ucHeaderExtensionLength', c_ubyte),
    ('ulSPI', c_ulong),
    ('ulSeqNumber', c_ulong),
    ('ucAuthenticationDataLength', c_ubyte),
    ('ucAuthenticationData', c_ubyte * 255),
    ('ucReserved', c_ubyte * 20),
]
assert sizeof(tagNSIPv6ExtAuthentication) == 288, sizeof(tagNSIPv6ExtAuthentication)
assert alignment(tagNSIPv6ExtAuthentication) == 4, alignment(tagNSIPv6ExtAuthentication)
NSIPv6ExtAuthentication = tagNSIPv6ExtAuthentication
class tagNSIPv6ExtESP(Structure):
    pass
tagNSIPv6ExtESP._fields_ = [
    ('ucNextHeader', c_ubyte),
    ('ulSPI', c_ulong),
    ('ulSeqNumber', c_ulong),
    ('ucPadding', c_ubyte * 255),
    ('ucPaddingLength', c_ubyte),
    ('ucPayloadData', c_ubyte * 255),
    ('ucPayloadDataLength', c_ubyte),
    ('ucAuthenticationData', c_ubyte * 255),
    ('ucAuthenticationDataLength', c_ubyte),
    ('ucReserved', c_ubyte * 20),
]
assert sizeof(tagNSIPv6ExtESP) == 800, sizeof(tagNSIPv6ExtESP)
assert alignment(tagNSIPv6ExtESP) == 4, alignment(tagNSIPv6ExtESP)
NSIPv6ExtESP = tagNSIPv6ExtESP
class tagNSIPv6OverIPv4Tunneling(Structure):
    pass
tagNSIPv6OverIPv4Tunneling._fields_ = [
    ('ucIgnoreTunneling', c_ubyte),
    ('ucTypeOfService', c_ubyte),
    ('ucTimeToLive', c_ubyte),
    ('uiInitialSequenceNumber', c_ushort),
    ('ucDestinationIP', c_ubyte * 4),
    ('ucSourceIP', c_ubyte * 4),
    ('ucNetmask', c_ubyte * 4),
    ('ucGateway', c_ubyte * 4),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagNSIPv6OverIPv4Tunneling) == 86, sizeof(tagNSIPv6OverIPv4Tunneling)
assert alignment(tagNSIPv6OverIPv4Tunneling) == 2, alignment(tagNSIPv6OverIPv4Tunneling)
NSIPv6OverIPv4Tunneling = tagNSIPv6OverIPv4Tunneling
class tagNSPhyConfig(Structure):
    pass
tagNSPhyConfig._fields_ = [
    ('ulMediaMode', c_ulong),
    ('ucActiveMedia', c_ubyte),
    ('ucReserved', c_ubyte * 59),
]
assert sizeof(tagNSPhyConfig) == 64, sizeof(tagNSPhyConfig)
assert alignment(tagNSPhyConfig) == 4, alignment(tagNSPhyConfig)
NSPhyConfig = tagNSPhyConfig
class tagSlotUserInfo(Structure):
    pass
tagSlotUserInfo._fields_ = [
    ('ucIPAddress', c_ubyte * 4),
    ('uiPortNumber', c_ushort),
    ('ucName', c_ubyte * 256),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagSlotUserInfo) == 326, sizeof(tagSlotUserInfo)
assert alignment(tagSlotUserInfo) == 2, alignment(tagSlotUserInfo)
SlotUserInfo = tagSlotUserInfo
class tagNSRateInfo(Structure):
    pass
tagNSRateInfo._fields_ = [
    ('ulTxFrames', c_ulong),
    ('ulRxFrames', c_ulong),
    ('ulTxBytes', c_ulong),
    ('ulRxBytes', c_ulong),
    ('ulUndersize', c_ulong),
    ('ulOversize', c_ulong),
    ('ulAlignError', c_ulong),
    ('ulCRCError', c_ulong),
    ('ulTxTriggers', c_ulong),
    ('ulRxTriggers', c_ulong),
    ('ulCollisions', c_ulong),
    ('ulRxJumboFrames', c_ulong),
    ('ulTxSignature', c_ulong),
    ('ulRxSignature', c_ulong),
    ('ulRxIPChecksumErrors', c_ulong),
    ('ucReserved', c_ubyte * 300),
]
assert sizeof(tagNSRateInfo) == 360, sizeof(tagNSRateInfo)
assert alignment(tagNSRateInfo) == 4, alignment(tagNSRateInfo)
NSRateInfo = tagNSRateInfo
class tagNSMultiCounterInfo(Structure):
    pass
tagNSMultiCounterInfo._fields_ = [
    ('ulMode', c_ulong),
    ('ulCounterType', c_ulong),
    ('u64Events', U64 * 300),
    ('u64Rates', U64 * 300),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagNSMultiCounterInfo) == 4872, sizeof(tagNSMultiCounterInfo)
assert alignment(tagNSMultiCounterInfo) == 4, alignment(tagNSMultiCounterInfo)
NSMultiCounterInfo = tagNSMultiCounterInfo
class tagMLDGroupAddressBlock(Structure):
    pass
tagMLDGroupAddressBlock._fields_ = [
    ('ucStartIPAddress', c_ubyte * 16),
    ('ucUpperIPAddressBoundary', c_ubyte * 16),
    ('uiIPChangeStep', c_ushort),
    ('uiIPAddressOffSet', c_ushort),
    ('uiNumIP', c_ushort),
    ('ucReserved', c_ubyte * 30),
]
assert sizeof(tagMLDGroupAddressBlock) == 68, sizeof(tagMLDGroupAddressBlock)
assert alignment(tagMLDGroupAddressBlock) == 2, alignment(tagMLDGroupAddressBlock)
MLDGroupAddressBlock = tagMLDGroupAddressBlock
class tagNSMLDv2GroupConfig(Structure):
    pass
tagNSMLDv2GroupConfig._fields_ = [
    ('ucGroupIPAddress', c_ubyte * 16),
    ('uiFilterMode', c_ushort),
    ('ulInitialReportGap', c_ulong),
    ('uiNumGroup', c_ushort),
    ('uiGroupIPStepCount', c_ushort),
    ('uiGroupIPAddressOffset', c_ushort),
    ('ucIPAddress', c_ubyte * 16),
    ('ucMACAddress', c_ubyte * 6),
    ('ucVLANEnable', c_ubyte),
    ('uiNumInterface', c_ushort),
    ('uiIPAddressStepCount', c_ushort),
    ('uiMACStepCount', c_ushort),
    ('uiVIDStepCount', c_ushort),
    ('uiIPAddressOffset', c_ushort),
    ('ucPRI', c_ubyte),
    ('ucCFI', c_ubyte),
    ('uiVID', c_ushort),
    ('ucPPPMode', c_ubyte),
    ('uiPPPInstance', c_ushort),
    ('uiPPPInstanceStepCount', c_ushort),
    ('ucNumAddressBlock', c_ubyte),
    ('ucReserved', c_ubyte * 50),
    ('IPAddressBlock', MLDGroupAddressBlock * 100),
]
assert sizeof(tagNSMLDv2GroupConfig) == 6928, sizeof(tagNSMLDv2GroupConfig)
assert alignment(tagNSMLDv2GroupConfig) == 4, alignment(tagNSMLDv2GroupConfig)
NSMLDv2GroupConfig = tagNSMLDv2GroupConfig
class tagNSMLDv2GroupMod(Structure):
    pass
tagNSMLDv2GroupMod._fields_ = [
    ('ucIPAddress', c_ubyte * 16),
    ('ucMACAddress', c_ubyte * 6),
    ('ucVLANEnable', c_ubyte),
    ('ucGroupIPAddress', c_ubyte * 16),
    ('uiFilterMode', c_ushort),
    ('ucPRI', c_ubyte),
    ('ucCFI', c_ubyte),
    ('uiVID', c_ushort),
    ('ucPPPMode', c_ubyte),
    ('uiPPPInstance', c_ushort),
    ('ucReserved', c_ubyte * 50),
    ('IPAddressBlock', MLDGroupAddressBlock),
]
assert sizeof(tagNSMLDv2GroupMod) == 168, sizeof(tagNSMLDv2GroupMod)
assert alignment(tagNSMLDv2GroupMod) == 2, alignment(tagNSMLDv2GroupMod)
NSMLDv2GroupMod = tagNSMLDv2GroupMod
class tagNSMLDv2StatsInfo(Structure):
    pass
tagNSMLDv2StatsInfo._fields_ = [
    ('ucGroupIPAddress', c_ubyte * 16),
    ('ucIPAddress', c_ubyte * 16),
    ('ucMACAddress', c_ubyte * 6),
    ('ucVLANEnable', c_ubyte),
    ('ucPRI', c_ubyte),
    ('ucCFI', c_ubyte),
    ('uiVID', c_ushort),
    ('ucPPPMode', c_ubyte),
    ('uiPPPInstance', c_ushort),
    ('ulV2QueryReceived', c_ulong),
    ('ulV1QueryReceived', c_ulong),
    ('ulV1ReportReceived', c_ulong),
    ('ulTotalV2ReportSent', c_ulong),
    ('ulIsIncludeSent', c_ulong),
    ('ulIsExcludeSent', c_ulong),
    ('ulToIncludeSent', c_ulong),
    ('ulToExcludeSent', c_ulong),
    ('ulAllowSent', c_ulong),
    ('ulBlockSent', c_ulong),
    ('ucReserved', c_ubyte * 50),
]
assert sizeof(tagNSMLDv2StatsInfo) == 140, sizeof(tagNSMLDv2StatsInfo)
assert alignment(tagNSMLDv2StatsInfo) == 4, alignment(tagNSMLDv2StatsInfo)
NSMLDv2StatsInfo = tagNSMLDv2StatsInfo
class tagNSMLDGroupInfo(Structure):
    pass
tagNSMLDGroupInfo._fields_ = [
    ('ucGroupIPAddress', c_ubyte * 16),
    ('ucIPAddress', c_ubyte * 16),
    ('ucMACAddress', c_ubyte * 6),
    ('ucVLANEnable', c_ubyte),
    ('ucPRI', c_ubyte),
    ('ucCFI', c_ubyte),
    ('uiVID', c_ushort),
    ('ucPPPMode', c_ubyte),
    ('uiPPPInstance', c_ushort),
    ('ulJoinTimestamp', c_ulong),
    ('ulLeaveTimestamp', c_ulong),
    ('ulLastStateTimestamp', c_ulong),
    ('ucReserved', c_ubyte * 46),
]
assert sizeof(tagNSMLDGroupInfo) == 108, sizeof(tagNSMLDGroupInfo)
assert alignment(tagNSMLDGroupInfo) == 4, alignment(tagNSMLDGroupInfo)
NSMLDGroupInfo = tagNSMLDGroupInfo
class tagNSMLDv2ListenerReportConfig(Structure):
    pass
tagNSMLDv2ListenerReportConfig._fields_ = [
    ('ucType', c_ubyte),
    ('ucDestinationIP', c_ubyte * 16),
    ('ucReserved', c_ubyte * 20),
]
assert sizeof(tagNSMLDv2ListenerReportConfig) == 37, sizeof(tagNSMLDv2ListenerReportConfig)
assert alignment(tagNSMLDv2ListenerReportConfig) == 1, alignment(tagNSMLDv2ListenerReportConfig)
NSMLDv2ListenerReportConfig = tagNSMLDv2ListenerReportConfig
class tagNSMulticastKeepAliveConfig(Structure):
    pass
tagNSMulticastKeepAliveConfig._fields_ = [
    ('uiAction', c_ushort),
    ('uiTimeInterval', c_ushort),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagNSMulticastKeepAliveConfig) == 68, sizeof(tagNSMulticastKeepAliveConfig)
assert alignment(tagNSMulticastKeepAliveConfig) == 2, alignment(tagNSMulticastKeepAliveConfig)
NSMulticastKeepAliveConfig = tagNSMulticastKeepAliveConfig
class tagNSPortConfig(Structure):
    pass
tagNSPortConfig._fields_ = [
    ('ucEnableFullCustomStreamID', c_ubyte),
    ('ucARPUniqueMACPattern', c_ubyte * 2),
    ('ucReserved', c_ubyte * 129),
]
assert sizeof(tagNSPortConfig) == 132, sizeof(tagNSPortConfig)
assert alignment(tagNSPortConfig) == 1, alignment(tagNSPortConfig)
NSPortConfig = tagNSPortConfig
class tagNSCTConfig(Structure):
    pass
tagNSCTConfig._fields_ = [
    ('ucCRCErrorEnable', c_ubyte),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagNSCTConfig) == 65, sizeof(tagNSCTConfig)
assert alignment(tagNSCTConfig) == 1, alignment(tagNSCTConfig)
NSCTConfig = tagNSCTConfig
class tagNSDOT1XSupplicantPortConfig(Structure):
    pass
tagNSDOT1XSupplicantPortConfig._fields_ = [
    ('ucSessionControlMode', c_ubyte),
    ('ucSessionBurstNumSlots', c_ubyte),
    ('uiSessionMaxPending', c_ushort),
    ('ulSessionSetupDelay', c_ulong),
    ('ulSessionTearDownDelay', c_ulong),
    ('ulSessionBurstSize', c_ulong),
    ('uiSessionBurstSlots', c_ushort * 100),
    ('ulAuthenticationType', c_ulong),
    ('ucAuthenticationMode', c_ubyte),
    ('ucEnableMulticastDestinationMac', c_ubyte),
    ('ucEnableCNCheck', c_ubyte * 32),
    ('ucEnableCNExact', c_ubyte),
    ('uiFragmentSize', c_ushort),
    ('ucEnableSessionResume', c_ubyte),
    ('ucPEAPPhase2Type', c_ubyte),
    ('ucTTLSPhase2Type', c_ubyte),
    ('ucUserCertificateFileName', c_ubyte * 32),
    ('ucUserKeyFileName', c_ubyte * 32),
    ('ucKeyPassword', c_ubyte * 16),
    ('ucRootCertificateFileName', c_ubyte * 32),
    ('ucRandomFileName', c_ubyte * 32),
    ('ucReserved', c_ubyte * 255),
]
assert sizeof(tagNSDOT1XSupplicantPortConfig) == 660, sizeof(tagNSDOT1XSupplicantPortConfig)
assert alignment(tagNSDOT1XSupplicantPortConfig) == 4, alignment(tagNSDOT1XSupplicantPortConfig)
NSDOT1XSupplicantPortConfig = tagNSDOT1XSupplicantPortConfig
class tagNSDOT1XSupplicantConfig(Structure):
    pass
tagNSDOT1XSupplicantConfig._fields_ = [
    ('ulIndex', c_ulong),
    ('ulCount', c_ulong),
    ('ucSourceMAC', c_ubyte * 6),
    ('ucAuthenticatorMAC', c_ubyte * 6),
    ('ucEnableSendEAPStart', c_ubyte),
    ('ucAuthenticationType', c_ubyte),
    ('uiMaxStart', c_ushort),
    ('uiStartTime', c_ushort),
    ('uiAuthenticationTime', c_ushort),
    ('uiHeldTime', c_ushort),
    ('uiRetryCount', c_ushort),
    ('ucSupplicantID', c_ubyte * 256),
    ('ucUserPassword', c_ubyte * 16),
    ('ucUserName', c_ubyte * 256),
    ('ucEnableAuthWithoutResponse', c_ubyte),
    ('ucVLANEnable', c_ubyte),
    ('ucPRI', c_ubyte),
    ('ucCFI', c_ubyte),
    ('uiVID', c_ushort),
    ('ucKeyPassword', c_ubyte * 16),
    ('ucUserMode', c_ubyte),
    ('ucCertificateUseMode', c_ubyte),
    ('uiIgnoreEAPIDRequest', c_ushort),
    ('uiIgnoreEAPAuthMessage', c_ushort),
    ('ucReserved', c_ubyte * 234),
]
assert sizeof(tagNSDOT1XSupplicantConfig) == 824, sizeof(tagNSDOT1XSupplicantConfig)
assert alignment(tagNSDOT1XSupplicantConfig) == 4, alignment(tagNSDOT1XSupplicantConfig)
NSDOT1XSupplicantConfig = tagNSDOT1XSupplicantConfig
class tagNSDOT1XSupplicantStatsInfo(Structure):
    pass
tagNSDOT1XSupplicantStatsInfo._fields_ = [
    ('ulIndex', c_ulong),
    ('ulTxEAPOLStartFrames', c_ulong),
    ('ulTxEAPOLLogOffFrames', c_ulong),
    ('ulTxEAPOLResponseIDFrames', c_ulong),
    ('ulTxEAPOLResponseFrames', c_ulong),
    ('ulTxEAPOLKeyFrames', c_ulong),
    ('ulTxEAPOLFrames', c_ulong),
    ('ulRxEAPOLFrames', c_ulong),
    ('ulRxEAPOLRequestIDFrames', c_ulong),
    ('ulRxEAPOLRequestFrames', c_ulong),
    ('ulRxEAPOLInvalidFrames', c_ulong),
    ('ulRxEAPOLLengthErrorFrames', c_ulong),
    ('ulRxEAPOLKeyFrames', c_ulong),
    ('ulRxEAPOLSuccessFrames', c_ulong),
    ('ulRxEAPOLFailureFrames', c_ulong),
    ('ulRxEAPOLAlertFrames', c_ulong),
    ('ulEAPOLFrameVersion', c_ulong),
    ('ucLastFrameMACAddress', c_ubyte * 6),
    ('ucReserved', c_ubyte * 128),
]
assert sizeof(tagNSDOT1XSupplicantStatsInfo) == 204, sizeof(tagNSDOT1XSupplicantStatsInfo)
assert alignment(tagNSDOT1XSupplicantStatsInfo) == 4, alignment(tagNSDOT1XSupplicantStatsInfo)
NSDOT1XSupplicantStatsInfo = tagNSDOT1XSupplicantStatsInfo
class tagNSDOT1XSupplicantControl(Structure):
    pass
tagNSDOT1XSupplicantControl._fields_ = [
    ('ulIndex', c_ulong),
    ('ulCount', c_ulong),
    ('ulAction', c_ulong),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagNSDOT1XSupplicantControl) == 76, sizeof(tagNSDOT1XSupplicantControl)
assert alignment(tagNSDOT1XSupplicantControl) == 4, alignment(tagNSDOT1XSupplicantControl)
NSDOT1XSupplicantControl = tagNSDOT1XSupplicantControl
class NSSetupTime(Structure):
    pass
NSSetupTime._fields_ = [
    ('ulSecond', c_ulong),
    ('ulMicrosecond', c_ulong),
]
assert sizeof(NSSetupTime) == 8, sizeof(NSSetupTime)
assert alignment(NSSetupTime) == 4, alignment(NSSetupTime)
class tagNSDOT1XSupplicantStatusInfo(Structure):
    pass
tagNSDOT1XSupplicantStatusInfo._fields_ = [
    ('ulIndex', c_ulong),
    ('ucSessionState', c_ubyte),
    ('ucSupplicantState', c_ubyte),
    ('ucFailureCode', c_ubyte),
    ('ulRetries', c_ulong),
    ('LastSetupTime', NSSetupTime),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagNSDOT1XSupplicantStatusInfo) == 84, sizeof(tagNSDOT1XSupplicantStatusInfo)
assert alignment(tagNSDOT1XSupplicantStatusInfo) == 4, alignment(tagNSDOT1XSupplicantStatusInfo)
NSDOT1XSupplicantStatusInfo = tagNSDOT1XSupplicantStatusInfo
class tagNSDOT1XSupplicantSessionStatsInfo(Structure):
    pass
tagNSDOT1XSupplicantSessionStatsInfo._fields_ = [
    ('SessionRetrievedTime', NSSetupTime),
    ('SessionUpdateTime', NSSetupTime),
    ('u64SetupTime', U64),
    ('ulSetupRate', c_ulong),
    ('ulAuthenticationAttempted', c_ulong),
    ('ulAuthenticationSuccessful', c_ulong),
    ('ulAuthenticationFailed', c_ulong),
    ('ulAuthenticationRetries', c_ulong),
    ('ulRetried', c_ulong),
    ('ulFailed', c_ulong),
    ('ulConfigured', c_ulong),
    ('ulAuthenticating', c_ulong),
    ('ulAuthenticated', c_ulong),
    ('ulIdle', c_ulong),
    ('ulPending', c_ulong),
    ('ulTerminatedPending', c_ulong),
    ('AuthenticationStartTime', NSSetupTime),
    ('LastSuccessTime', NSSetupTime),
    ('u64MinSetupTime', U64),
    ('u64MaxSetupTime', U64),
    ('ulReAuthenticationSuccessful', c_ulong),
    ('ulReAuthenticationFailed', c_ulong),
    ('ulReAuthenticationAttempted', c_ulong),
    ('ulFirstAttempted', c_ulong),
    ('ulPassiveAttempted', c_ulong),
    ('ulRetriedSuccessful', c_ulong),
    ('ulRetriedFailed', c_ulong),
    ('ulFirstAttemptSuccessful', c_ulong),
    ('ulFirstAttemptFailed', c_ulong),
    ('ulUserRetried', c_ulong),
    ('ulUserRetriedSuccessful', c_ulong),
    ('ulUserRetriedFailed', c_ulong),
]
assert sizeof(tagNSDOT1XSupplicantSessionStatsInfo) == 156, sizeof(tagNSDOT1XSupplicantSessionStatsInfo)
assert alignment(tagNSDOT1XSupplicantSessionStatsInfo) == 4, alignment(tagNSDOT1XSupplicantSessionStatsInfo)
NSDOT1XSupplicantSessionStatsInfo = tagNSDOT1XSupplicantSessionStatsInfo
class tagNSDOT1XSupplicantCopy(Structure):
    pass
tagNSDOT1XSupplicantCopy._fields_ = [
    ('ulBaseIndex', c_ulong),
    ('ulDestinationIndex', c_ulong),
    ('ulCount', c_ulong),
    ('ucReserved', c_ubyte * 24),
]
assert sizeof(tagNSDOT1XSupplicantCopy) == 36, sizeof(tagNSDOT1XSupplicantCopy)
assert alignment(tagNSDOT1XSupplicantCopy) == 4, alignment(tagNSDOT1XSupplicantCopy)
NSDOT1XSupplicantCopy = tagNSDOT1XSupplicantCopy
class tagNSDOT1XSupplicantModify(Structure):
    pass
tagNSDOT1XSupplicantModify._fields_ = [
    ('ulIndex', c_ulong),
    ('ulCount', c_ulong),
    ('uiField', c_ushort),
    ('uiFieldDataLength', c_ushort),
    ('ucData', c_ubyte * 20000),
    ('ucReserved', c_ubyte * 24),
]
assert sizeof(tagNSDOT1XSupplicantModify) == 20036, sizeof(tagNSDOT1XSupplicantModify)
assert alignment(tagNSDOT1XSupplicantModify) == 4, alignment(tagNSDOT1XSupplicantModify)
NSDOT1XSupplicantModify = tagNSDOT1XSupplicantModify
class tagNSDOT1XSupplicantFill(Structure):
    pass
tagNSDOT1XSupplicantFill._fields_ = [
    ('ulBaseIndex', c_ulong),
    ('ulDestinationIndex', c_ulong),
    ('ulCount', c_ulong),
    ('uiField', c_ushort),
    ('ucDelta', c_ubyte * 32),
    ('ucMode1', c_ubyte),
    ('ucOffset1', c_ubyte),
    ('ucStepValue1', c_ubyte),
    ('ucWidth1', c_ubyte),
    ('uiStartValue1', c_ushort),
    ('uiMaxValue1', c_ushort),
    ('ucMode2', c_ubyte),
    ('ucOffset2', c_ubyte),
    ('ucStepValue2', c_ubyte),
    ('ucWidth2', c_ubyte),
    ('uiStartValue2', c_ushort),
    ('uiMaxValue2', c_ushort),
    ('ucReserved', c_ubyte * 24),
]
assert sizeof(tagNSDOT1XSupplicantFill) == 88, sizeof(tagNSDOT1XSupplicantFill)
assert alignment(tagNSDOT1XSupplicantFill) == 4, alignment(tagNSDOT1XSupplicantFill)
NSDOT1XSupplicantFill = tagNSDOT1XSupplicantFill
class tagNSDOT1XSupplicantStatusSearchInfo(Structure):
    pass
tagNSDOT1XSupplicantStatusSearchInfo._fields_ = [
    ('ulIndex', c_ulong),
    ('ulCount', c_ulong),
    ('uiSearchField', c_ushort),
    ('uiReturnField', c_ushort),
    ('u64SearchRangeLow', U64),
    ('u64SearchRangeHigh', U64),
    ('ulReturnCount', c_ulong),
    ('u64Data', U64 * 7000),
    ('ucReserved', c_ubyte * 24),
]
assert sizeof(tagNSDOT1XSupplicantStatusSearchInfo) == 56056, sizeof(tagNSDOT1XSupplicantStatusSearchInfo)
assert alignment(tagNSDOT1XSupplicantStatusSearchInfo) == 4, alignment(tagNSDOT1XSupplicantStatusSearchInfo)
NSDOT1XSupplicantStatusSearchInfo = tagNSDOT1XSupplicantStatusSearchInfo
class tagNSStreamIDTableInfo(Structure):
    pass
tagNSStreamIDTableInfo._fields_ = [
    ('ulRequestIndex', c_ulong),
    ('ulRequestCount', c_ulong),
    ('ulRetrievedIndex', c_ulong),
    ('ulRetrievedCount', c_ulong),
    ('ulStreamID', c_ulong * 486),
    ('ucReserved', c_ubyte * 32),
]
assert sizeof(tagNSStreamIDTableInfo) == 1992, sizeof(tagNSStreamIDTableInfo)
assert alignment(tagNSStreamIDTableInfo) == 4, alignment(tagNSStreamIDTableInfo)
NSStreamIDTableInfo = tagNSStreamIDTableInfo
class tagNSPhyDefaultConfig(Structure):
    pass
tagNSPhyDefaultConfig._fields_ = [
    ('uiActiveMedia', c_ushort),
    ('uiAutoNegotiationEnable', c_ushort),
    ('uiAutoNegotiationRestart', c_ushort),
    ('uiSpeed', c_ushort),
    ('uiLinkConfigurationMask', c_ushort),
    ('uiLinkConfiguration', c_ushort),
    ('ucReserved', c_ubyte * 256),
]
assert sizeof(tagNSPhyDefaultConfig) == 268, sizeof(tagNSPhyDefaultConfig)
assert alignment(tagNSPhyDefaultConfig) == 2, alignment(tagNSPhyDefaultConfig)
NSPhyDefaultConfig = tagNSPhyDefaultConfig
class tagNSWISConfig(Structure):
    pass
tagNSWISConfig._fields_ = [
    ('ulErrorInjection', c_ulong),
    ('ucFramingMode', c_ubyte),
    ('ucSectionScramble', c_ubyte),
    ('ucPathSignalLabel', c_ubyte),
    ('ucCRC32Enable', c_ubyte),
    ('ucTxClockSource', c_ubyte),
    ('ucLoopbackEnable', c_ubyte),
    ('ucReserved', c_ubyte * 128),
]
assert sizeof(tagNSWISConfig) == 140, sizeof(tagNSWISConfig)
assert alignment(tagNSWISConfig) == 4, alignment(tagNSWISConfig)
NSWISConfig = tagNSWISConfig
class tagNSWISLineStatusInfo(Structure):
    pass
tagNSWISLineStatusInfo._fields_ = [
    ('uiAlarmCurrent', c_ushort),
    ('uiAlarmHistory', c_ushort),
    ('u64SectionBipCount', U64),
    ('u64LineBipCount', U64),
    ('u64LineFebeCount', U64),
    ('u64PathBipCount', U64),
    ('u64PathFebeCount', U64),
    ('ulSectionBipRate', c_ulong),
    ('ulLineBipRate', c_ulong),
    ('ulLineFebeRate', c_ulong),
    ('ulPathBipRate', c_ulong),
    ('ulPathFebeRate', c_ulong),
    ('ucReserved', c_ubyte * 128),
]
assert sizeof(tagNSWISLineStatusInfo) == 192, sizeof(tagNSWISLineStatusInfo)
assert alignment(tagNSWISLineStatusInfo) == 4, alignment(tagNSWISLineStatusInfo)
NSWISLineStatusInfo = tagNSWISLineStatusInfo
class tagNSRunTimeHistStats(Structure):
    pass
tagNSRunTimeHistStats._fields_ = [
    ('ulHistType', c_ulong),
    ('ulCount', c_ulong),
    ('ucReserved', c_ubyte * 128),
]
assert sizeof(tagNSRunTimeHistStats) == 136, sizeof(tagNSRunTimeHistStats)
assert alignment(tagNSRunTimeHistStats) == 4, alignment(tagNSRunTimeHistStats)
NSRunTimeHistStats = tagNSRunTimeHistStats
class tagNSRunTimeHistStatsConfig(Structure):
    pass
tagNSRunTimeHistStatsConfig._fields_ = [
    ('uiMode', c_ushort),
    ('ulStreamCount', c_ulong),
    ('ulStreamsIDs', c_ulong * 512),
    ('ulLearnedStreamCount', c_ulong),
    ('ulLearnedStreamIDs', c_ulong * 512),
    ('ucReserved', c_ubyte * 512),
]
assert sizeof(tagNSRunTimeHistStatsConfig) == 4620, sizeof(tagNSRunTimeHistStatsConfig)
assert alignment(tagNSRunTimeHistStatsConfig) == 4, alignment(tagNSRunTimeHistStatsConfig)
NSRunTimeHistStatsConfig = tagNSRunTimeHistStatsConfig
class tagNSDiffServV2Config(Structure):
    pass
tagNSDiffServV2Config._fields_ = [
    ('ucEnable', c_ubyte),
    ('ucConfigMode', c_ubyte),
    ('ucRateCounterMode', c_ubyte),
    ('ucOffsetMode', c_ubyte),
    ('ulOffset', c_ulong),
    ('ucIPv4Address', c_ubyte * 4),
    ('ucIPv6Address', c_ubyte * 16),
    ('ucReserved', c_ubyte * 784),
]
assert sizeof(tagNSDiffServV2Config) == 812, sizeof(tagNSDiffServV2Config)
assert alignment(tagNSDiffServV2Config) == 4, alignment(tagNSDiffServV2Config)
NSDiffServV2Config = tagNSDiffServV2Config
class tagNSDiffServV2CounterInfo(Structure):
    pass
tagNSDiffServV2CounterInfo._fields_ = [
    ('ucCounterMode', c_ubyte),
    ('u64RxFrame', U64 * 256),
    ('ucReserved', c_ubyte * 256),
]
assert sizeof(tagNSDiffServV2CounterInfo) == 2308, sizeof(tagNSDiffServV2CounterInfo)
assert alignment(tagNSDiffServV2CounterInfo) == 4, alignment(tagNSDiffServV2CounterInfo)
NSDiffServV2CounterInfo = tagNSDiffServV2CounterInfo
class tagNSDiffServV2RateInfo(Structure):
    pass
tagNSDiffServV2RateInfo._fields_ = [
    ('ulAlgorithm', c_ulong),
    ('ulRxFrameRate', c_ulong * 256),
    ('ucReserved', c_ubyte * 256),
]
assert sizeof(tagNSDiffServV2RateInfo) == 1284, sizeof(tagNSDiffServV2RateInfo)
assert alignment(tagNSDiffServV2RateInfo) == 4, alignment(tagNSDiffServV2RateInfo)
NSDiffServV2RateInfo = tagNSDiffServV2RateInfo
class tagNSDOT1XDownloadCertificateFiles(Structure):
    pass
tagNSDOT1XDownloadCertificateFiles._fields_ = [
    ('szDirectory', c_char * 128),
    ('szRandomFileName', c_char * 128),
    ('szKeyDirectory', c_char * 128),
    ('ucReserved', c_ubyte * 384),
]
assert sizeof(tagNSDOT1XDownloadCertificateFiles) == 768, sizeof(tagNSDOT1XDownloadCertificateFiles)
assert alignment(tagNSDOT1XDownloadCertificateFiles) == 1, alignment(tagNSDOT1XDownloadCertificateFiles)
NSDOT1XDownloadCertificateFiles = tagNSDOT1XDownloadCertificateFiles
class tagNSProtocolHeaderInfo(Structure):
    pass
tagNSProtocolHeaderInfo._fields_ = [
    ('uiHeaderCount', c_ushort),
    ('uiHeader', c_ushort * 100),
    ('ucReserved', c_ubyte * 32),
]
assert sizeof(tagNSProtocolHeaderInfo) == 234, sizeof(tagNSProtocolHeaderInfo)
assert alignment(tagNSProtocolHeaderInfo) == 2, alignment(tagNSProtocolHeaderInfo)
NSProtocolHeaderInfo = tagNSProtocolHeaderInfo
class tagNSModStreamArray(Structure):
    pass
tagNSModStreamArray._fields_ = [
    ('ulIndex', c_ulong),
    ('ulCount', c_ulong),
    ('ulField', c_ulong),
    ('ulFieldCount', c_ulong),
    ('ulFieldRepeat', c_ulong),
]
assert sizeof(tagNSModStreamArray) == 20, sizeof(tagNSModStreamArray)
assert alignment(tagNSModStreamArray) == 4, alignment(tagNSModStreamArray)
NSModStreamArray = tagNSModStreamArray
class tagNSLinkFaultConfig(Structure):
    pass
tagNSLinkFaultConfig._fields_ = [
    ('ucType', c_ubyte),
    ('ucDurationType', c_ubyte),
    ('ulDuration', c_ulong),
    ('ucReserved', c_ubyte * 120),
]
assert sizeof(tagNSLinkFaultConfig) == 128, sizeof(tagNSLinkFaultConfig)
assert alignment(tagNSLinkFaultConfig) == 4, alignment(tagNSLinkFaultConfig)
NSLinkFaultConfig = tagNSLinkFaultConfig
class tagNSLinkFaultInfo(Structure):
    pass
tagNSLinkFaultInfo._fields_ = [
    ('ucType', c_ubyte),
    ('ucReserved', c_ubyte * 120),
]
assert sizeof(tagNSLinkFaultInfo) == 121, sizeof(tagNSLinkFaultInfo)
assert alignment(tagNSLinkFaultInfo) == 1, alignment(tagNSLinkFaultInfo)
NSLinkFaultInfo = tagNSLinkFaultInfo
class tagNSHistEnhancedLatencyOption(Structure):
    pass
tagNSHistEnhancedLatencyOption._fields_ = [
    ('ulOption', c_ulong),
    ('ucReserved', c_ubyte * 128),
]
assert sizeof(tagNSHistEnhancedLatencyOption) == 132, sizeof(tagNSHistEnhancedLatencyOption)
assert alignment(tagNSHistEnhancedLatencyOption) == 4, alignment(tagNSHistEnhancedLatencyOption)
NSHistEnhancedLatencyOption = tagNSHistEnhancedLatencyOption
class tagNSEnhancedRunTimeHistStats(Structure):
    pass
tagNSEnhancedRunTimeHistStats._fields_ = [
    ('ulStreamID', c_ulong),
    ('u64HistData', U64 * 64),
    ('ucReserved', c_ubyte * 128),
]
assert sizeof(tagNSEnhancedRunTimeHistStats) == 644, sizeof(tagNSEnhancedRunTimeHistStats)
assert alignment(tagNSEnhancedRunTimeHistStats) == 4, alignment(tagNSEnhancedRunTimeHistStats)
NSEnhancedRunTimeHistStats = tagNSEnhancedRunTimeHistStats
class tagCardTRDVersionStructure(Structure):
    pass
tagCardTRDVersionStructure._fields_ = [
    ('iMajorNumber', c_int),
    ('iMinorNumber', c_int),
    ('iBuildNumber', c_int),
    ('ucReserved', c_ubyte * 24),
]
assert sizeof(tagCardTRDVersionStructure) == 36, sizeof(tagCardTRDVersionStructure)
assert alignment(tagCardTRDVersionStructure) == 4, alignment(tagCardTRDVersionStructure)
NSCardTRDVersion = tagCardTRDVersionStructure
class tagNSCardFirmwareVersion(Structure):
    pass
tagNSCardFirmwareVersion._fields_ = [
    ('iReleaseType', c_int),
    ('iMajorNumber', c_int),
    ('iMinorNumber', c_int),
    ('iBuildNumber', c_int),
    ('iPatchNumber', c_int),
]
assert sizeof(tagNSCardFirmwareVersion) == 20, sizeof(tagNSCardFirmwareVersion)
assert alignment(tagNSCardFirmwareVersion) == 4, alignment(tagNSCardFirmwareVersion)
NSCardFirmwareVersion = tagNSCardFirmwareVersion
class tagNSCardInfo(Structure):
    pass
tagNSCardInfo._fields_ = [
    ('iOwnership', c_int),
    ('iPortType', c_int),
    ('iModel', c_int),
    ('szModule', c_char * 32),
    ('ulPortProperties', c_ulong),
    ('FirmwareVersion', NSCardFirmwareVersion),
    ('HardwareInfo', NSCardHardwareInfo),
    ('TRDVersion', NSCardTRDVersion),
    ('ucReserved', c_ubyte * 128),
]
assert sizeof(tagNSCardInfo) == 360, sizeof(tagNSCardInfo)
assert alignment(tagNSCardInfo) == 4, alignment(tagNSCardInfo)
NSCardInfo = tagNSCardInfo
class tagNSChassisCardInfo(Structure):
    pass
tagNSChassisCardInfo._fields_ = [
    ('iHub', c_int),
    ('CardInfo', NSCardInfo * 20),
]
assert sizeof(tagNSChassisCardInfo) == 7204, sizeof(tagNSChassisCardInfo)
assert alignment(tagNSChassisCardInfo) == 4, alignment(tagNSChassisCardInfo)
NSChassisCardInfo = tagNSChassisCardInfo
class tagNSSlotInfo(Structure):
    pass
tagNSSlotInfo._fields_ = [
    ('iHub', c_int),
    ('iSlot', c_int),
    ('iStatus', c_int),
    ('ucReserved', c_ubyte * 24),
]
assert sizeof(tagNSSlotInfo) == 36, sizeof(tagNSSlotInfo)
assert alignment(tagNSSlotInfo) == 4, alignment(tagNSSlotInfo)
NSSlotInfo = tagNSSlotInfo
class tagNSStreamARPStatusInfo(Structure):
    pass
tagNSStreamARPStatusInfo._fields_ = [
    ('ulARPStatus', c_ulong),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagNSStreamARPStatusInfo) == 68, sizeof(tagNSStreamARPStatusInfo)
assert alignment(tagNSStreamARPStatusInfo) == 4, alignment(tagNSStreamARPStatusInfo)
NSStreamARPStatusInfo = tagNSStreamARPStatusInfo
class tagNSMultiCaptureDataInfo(Structure):
    pass
tagNSMultiCaptureDataInfo._fields_ = [
    ('ulIndex', c_ulong),
    ('ulCount', c_ulong),
    ('ulRetrievedCount', c_ulong),
    ('ulRetrievedLength', c_ulong),
    ('ucFormat', c_ubyte),
    ('ucReserved', c_ubyte * 63),
]
assert sizeof(tagNSMultiCaptureDataInfo) == 80, sizeof(tagNSMultiCaptureDataInfo)
assert alignment(tagNSMultiCaptureDataInfo) == 4, alignment(tagNSMultiCaptureDataInfo)
NSMultiCaptureDataInfo = tagNSMultiCaptureDataInfo
class tagNSStreamConfig(Structure):
    pass
tagNSStreamConfig._fields_ = [
    ('iStreamConfigID', c_int),
    ('ucOption', c_ubyte),
    ('uiInsertIndex', c_ushort),
    ('uiCount', c_ushort),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagNSStreamConfig) == 76, sizeof(tagNSStreamConfig)
assert alignment(tagNSStreamConfig) == 4, alignment(tagNSStreamConfig)
NSStreamConfig = tagNSStreamConfig
class tagNSCopyStreamInfo(Structure):
    pass
tagNSCopyStreamInfo._fields_ = [
    ('iStreamConfigID', c_int),
    ('uiStreamIndex', c_uint),
    ('uiCount', c_ushort),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagNSCopyStreamInfo) == 76, sizeof(tagNSCopyStreamInfo)
assert alignment(tagNSCopyStreamInfo) == 4, alignment(tagNSCopyStreamInfo)
NSCopyStreamInfo = tagNSCopyStreamInfo
class tagNSVFDConfig(Structure):
    pass
tagNSVFDConfig._fields_ = [
    ('ucMode', c_ubyte),
    ('uiOffset', c_ushort),
    ('uiRange', c_ushort),
    ('ulCycleCount', c_ulong),
    ('uiBlockCount', c_ushort),
    ('ucStepValue', c_ubyte),
    ('ucStepShift', c_ubyte),
    ('ucEnableSubnetAware', c_ubyte),
    ('ucSubnetMaskLength', c_ubyte),
    ('ucEnableCarryChaining', c_ubyte),
    ('ucPattern', c_ubyte * 6),
    ('ucReserved', c_ubyte * 32),
]
assert sizeof(tagNSVFDConfig) == 60, sizeof(tagNSVFDConfig)
assert alignment(tagNSVFDConfig) == 4, alignment(tagNSVFDConfig)
NSVFDConfig = tagNSVFDConfig
class tagNSTxConfig(Structure):
    pass
tagNSTxConfig._fields_ = [
    ('ucEnableStream', c_ubyte),
    ('ulFrameLength', c_ulong),
    ('ulFrameRate', c_ulong),
    ('ucEnableSignatureField', c_ubyte),
    ('ucBackgroundIndex', c_ubyte),
    ('ucEnableRandomBackground', c_ubyte),
    ('ucEnableRandomLength', c_ubyte),
    ('ucEnableCustomStreamID', c_ubyte),
    ('ulCustomStreamID', c_ulong),
    ('uiInitialSignatureSeqNumber', c_ushort),
    ('ucEnableDataIntegrity', c_ubyte),
    ('ucEnableDataIntegrityError', c_ubyte),
    ('ucEnableIPChecksumError', c_ubyte),
    ('ucEnableCRCError', c_ubyte),
    ('ucEnableIPTotalLengthError', c_ubyte),
    ('ucOAMHeaderPacketType', c_ubyte),
    ('ucEnableMulticastKeepAlive', c_ubyte),
    ('ucDisableProtocolCheck', c_ubyte),
    ('ucReserved', c_ubyte * 127),
]
assert sizeof(tagNSTxConfig) == 164, sizeof(tagNSTxConfig)
assert alignment(tagNSTxConfig) == 4, alignment(tagNSTxConfig)
NSTxConfig = tagNSTxConfig
class tagNSCreateHeaderInfo(Structure):
    pass
tagNSCreateHeaderInfo._fields_ = [
    ('iStreamConfigID', c_int),
    ('uiStreamIndex', c_ushort),
    ('ucOption', c_ubyte),
    ('uiInsertIndex', c_ushort),
    ('uiCount', c_ushort),
    ('uiProtocolType', c_ushort),
    ('ucReserved', c_ubyte * 32),
]
assert sizeof(tagNSCreateHeaderInfo) == 48, sizeof(tagNSCreateHeaderInfo)
assert alignment(tagNSCreateHeaderInfo) == 4, alignment(tagNSCreateHeaderInfo)
NSCreateHeaderInfo = tagNSCreateHeaderInfo
class tagNSUpdateHeaderInfo(Structure):
    pass
tagNSUpdateHeaderInfo._fields_ = [
    ('iStreamConfigID', c_int),
    ('uiStreamIndex', c_ushort),
    ('uiHeaderIndex', c_ushort),
    ('uiCount', c_ushort),
    ('uiProtocolType', c_ushort),
    ('ucReserved', c_ubyte * 32),
]
assert sizeof(tagNSUpdateHeaderInfo) == 44, sizeof(tagNSUpdateHeaderInfo)
assert alignment(tagNSUpdateHeaderInfo) == 4, alignment(tagNSUpdateHeaderInfo)
NSUpdateHeaderInfo = tagNSUpdateHeaderInfo
class tagNSCopyHeaderInfo(Structure):
    pass
tagNSCopyHeaderInfo._fields_ = [
    ('iStreamConfigID', c_int),
    ('uiStreamIndex', c_ushort),
    ('uiHeaderIndex', c_ushort),
    ('uiCount', c_ushort),
    ('uiProtocolType', c_ushort),
    ('ucReserved', c_ubyte * 32),
]
assert sizeof(tagNSCopyHeaderInfo) == 44, sizeof(tagNSCopyHeaderInfo)
assert alignment(tagNSCopyHeaderInfo) == 4, alignment(tagNSCopyHeaderInfo)
NSCopyHeaderInfo = tagNSCopyHeaderInfo
class tagNSGetHeaderInfo(Structure):
    pass
tagNSGetHeaderInfo._fields_ = [
    ('iStreamConfigID', c_int),
    ('uiStreamIndex', c_ushort),
    ('uiHeaderIndex', c_ushort),
    ('uiCount', c_ushort),
    ('uiProtocolType', c_ushort),
    ('ucReserved', c_ubyte * 32),
]
assert sizeof(tagNSGetHeaderInfo) == 44, sizeof(tagNSGetHeaderInfo)
assert alignment(tagNSGetHeaderInfo) == 4, alignment(tagNSGetHeaderInfo)
NSGetHeaderInfo = tagNSGetHeaderInfo
class tagNSHeaderStackInfo(Structure):
    pass
tagNSHeaderStackInfo._fields_ = [
    ('iStreamConfigID', c_int),
    ('uiStreamIndex', c_ushort),
    ('uiHeaderCount', c_ushort),
    ('uiHeader', c_ushort * 500),
    ('ucReserved', c_ubyte * 32),
]
assert sizeof(tagNSHeaderStackInfo) == 1040, sizeof(tagNSHeaderStackInfo)
assert alignment(tagNSHeaderStackInfo) == 4, alignment(tagNSHeaderStackInfo)
NSHeaderStackInfo = tagNSHeaderStackInfo
class tagNSUpdateTxConfigInfo(Structure):
    pass
tagNSUpdateTxConfigInfo._fields_ = [
    ('iStreamConfigID', c_int),
    ('uiStreamIndex', c_ushort),
    ('uiCount', c_ushort),
    ('ucReserved', c_ubyte * 32),
]
assert sizeof(tagNSUpdateTxConfigInfo) == 40, sizeof(tagNSUpdateTxConfigInfo)
assert alignment(tagNSUpdateTxConfigInfo) == 4, alignment(tagNSUpdateTxConfigInfo)
NSUpdateTxConfigInfo = tagNSUpdateTxConfigInfo
class tagNSCopyTxConfigInfo(Structure):
    pass
tagNSCopyTxConfigInfo._fields_ = [
    ('iStreamConfigID', c_int),
    ('uiStreamIndex', c_ushort),
    ('uiCount', c_ushort),
    ('ucReserved', c_ubyte * 32),
]
assert sizeof(tagNSCopyTxConfigInfo) == 40, sizeof(tagNSCopyTxConfigInfo)
assert alignment(tagNSCopyTxConfigInfo) == 4, alignment(tagNSCopyTxConfigInfo)
NSCopyTxConfigInfo = tagNSCopyTxConfigInfo
class tagNSGetTxConfigInfo(Structure):
    pass
tagNSGetTxConfigInfo._fields_ = [
    ('iStreamConfigID', c_int),
    ('uiStreamIndex', c_ushort),
    ('uiCount', c_ushort),
    ('ucReserved', c_ubyte * 32),
]
assert sizeof(tagNSGetTxConfigInfo) == 40, sizeof(tagNSGetTxConfigInfo)
assert alignment(tagNSGetTxConfigInfo) == 4, alignment(tagNSGetTxConfigInfo)
NSGetTxConfigInfo = tagNSGetTxConfigInfo
class tagNSUpdateVFDInfo(Structure):
    pass
tagNSUpdateVFDInfo._fields_ = [
    ('iStreamConfigID', c_int),
    ('uiStreamIndex', c_ushort),
    ('ucVFD', c_ubyte),
    ('uiCount', c_ushort),
    ('ucReserved', c_ubyte * 32),
]
assert sizeof(tagNSUpdateVFDInfo) == 44, sizeof(tagNSUpdateVFDInfo)
assert alignment(tagNSUpdateVFDInfo) == 4, alignment(tagNSUpdateVFDInfo)
NSUpdateVFDInfo = tagNSUpdateVFDInfo
class tagNSGetVFDInfo(Structure):
    pass
tagNSGetVFDInfo._fields_ = [
    ('iStreamConfigID', c_int),
    ('uiStreamIndex', c_ushort),
    ('ucVFD', c_ubyte),
    ('uiCount', c_ushort),
    ('ucReserved', c_ubyte * 32),
]
assert sizeof(tagNSGetVFDInfo) == 44, sizeof(tagNSGetVFDInfo)
assert alignment(tagNSGetVFDInfo) == 4, alignment(tagNSGetVFDInfo)
NSGetVFDInfo = tagNSGetVFDInfo
class tagNSCommitStreamConfig(Structure):
    pass
tagNSCommitStreamConfig._fields_ = [
    ('iStreamConfigID', c_int),
    ('iHub', c_int),
    ('iSlot', c_int),
    ('iPort', c_int),
    ('ucReserved', c_ubyte * 32),
]
assert sizeof(tagNSCommitStreamConfig) == 48, sizeof(tagNSCommitStreamConfig)
assert alignment(tagNSCommitStreamConfig) == 4, alignment(tagNSCommitStreamConfig)
NSCommitStreamConfig = tagNSCommitStreamConfig
class tagNSEthernetHeader(Structure):
    pass
tagNSEthernetHeader._fields_ = [
    ('ucSourceMAC', c_ubyte * 6),
    ('ucDestinationMAC', c_ubyte * 6),
    ('ucEnableLength', c_ubyte),
    ('ucReserved', c_ubyte * 15),
]
assert sizeof(tagNSEthernetHeader) == 28, sizeof(tagNSEthernetHeader)
assert alignment(tagNSEthernetHeader) == 1, alignment(tagNSEthernetHeader)
NSEthernetHeader = tagNSEthernetHeader
class tagNSVLANHeader(Structure):
    pass
tagNSVLANHeader._fields_ = [
    ('uiTPID', c_ushort),
    ('ucPRI', c_ubyte),
    ('ucCFI', c_ubyte),
    ('uiVID', c_ushort),
    ('ucReserved', c_ubyte * 8),
]
assert sizeof(tagNSVLANHeader) == 14, sizeof(tagNSVLANHeader)
assert alignment(tagNSVLANHeader) == 2, alignment(tagNSVLANHeader)
NSVLANHeader = tagNSVLANHeader
class tagNSVLANHeaderList(Structure):
    pass
tagNSVLANHeaderList._fields_ = [
    ('uiCount', c_ushort),
    ('Header', NSVLANHeader * 32),
    ('ucEnableCustomEthernetType', c_ubyte),
    ('uiCustomEthernetType', c_ushort),
    ('ucReserved', c_ubyte * 13),
]
assert sizeof(tagNSVLANHeaderList) == 468, sizeof(tagNSVLANHeaderList)
assert alignment(tagNSVLANHeaderList) == 2, alignment(tagNSVLANHeaderList)
NSVLANHeaderList = tagNSVLANHeaderList
class tagNSIPv4Header(Structure):
    pass
tagNSIPv4Header._fields_ = [
    ('ucTypeOfService', c_ubyte),
    ('ucTimeToLive', c_ubyte),
    ('uiInitialSequenceNumber', c_ushort),
    ('ucDestinationIP', c_ubyte * 4),
    ('ucSourceIP', c_ubyte * 4),
    ('ucNetmask', c_ubyte * 4),
    ('ucGateway', c_ubyte * 4),
    ('ucProtocol', c_ubyte),
    ('uiFragmentOffset', c_ushort),
    ('ucFlags', c_ubyte),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSIPv4Header) == 42, sizeof(tagNSIPv4Header)
assert alignment(tagNSIPv4Header) == 2, alignment(tagNSIPv4Header)
NSIPv4Header = tagNSIPv4Header
class tagNSIPv4OptionHeader(Structure):
    pass
tagNSIPv4OptionHeader._fields_ = [
    ('ucCode', c_ubyte),
    ('uiOptionLength', c_ushort),
    ('uiPointer', c_ushort),
    ('uiDataLength', c_ushort),
    ('ucData', c_ubyte * 124),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSIPv4OptionHeader) == 148, sizeof(tagNSIPv4OptionHeader)
assert alignment(tagNSIPv4OptionHeader) == 2, alignment(tagNSIPv4OptionHeader)
NSIPv4OptionHeader = tagNSIPv4OptionHeader
class tagNSIPv6Header(Structure):
    pass
tagNSIPv6Header._fields_ = [
    ('ucTrafficClass', c_ubyte),
    ('ucNextHeader', c_ubyte),
    ('ucHopLimit', c_ubyte),
    ('ulFlowLabel', c_ulong),
    ('ucSourceIP', c_ubyte * 16),
    ('ucDestinationIP', c_ubyte * 16),
    ('ucRouterIP', c_ubyte * 16),
    ('ucPayloadLengthError', c_ubyte),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSIPv6Header) == 76, sizeof(tagNSIPv6Header)
assert alignment(tagNSIPv6Header) == 4, alignment(tagNSIPv6Header)
NSIPv6Header = tagNSIPv6Header
class tagNSTCPHeader(Structure):
    pass
tagNSTCPHeader._fields_ = [
    ('uiSourcePort', c_ushort),
    ('uiDestinationPort', c_ushort),
    ('ulSequence', c_ulong),
    ('ulAck', c_ulong),
    ('ucOffset', c_ubyte),
    ('ucFlags', c_ubyte),
    ('uiWindow', c_ushort),
    ('uiUrgentPointer', c_ushort),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSTCPHeader) == 36, sizeof(tagNSTCPHeader)
assert alignment(tagNSTCPHeader) == 4, alignment(tagNSTCPHeader)
NSTCPHeader = tagNSTCPHeader
class tagNSUDPHeader(Structure):
    pass
tagNSUDPHeader._fields_ = [
    ('uiSourcePort', c_ushort),
    ('uiDestinationPort', c_ushort),
    ('uiLength', c_ushort),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSUDPHeader) == 22, sizeof(tagNSUDPHeader)
assert alignment(tagNSUDPHeader) == 2, alignment(tagNSUDPHeader)
NSUDPHeader = tagNSUDPHeader
class tagNSCustomHeader(Structure):
    pass
tagNSCustomHeader._fields_ = [
    ('uiLength', c_ushort),
    ('ucPayload', c_ubyte * 128),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSCustomHeader) == 146, sizeof(tagNSCustomHeader)
assert alignment(tagNSCustomHeader) == 2, alignment(tagNSCustomHeader)
NSCustomHeader = tagNSCustomHeader
class tagNSICMPHeader(Structure):
    pass
tagNSICMPHeader._fields_ = [
    ('ucType', c_ubyte),
    ('ucCode', c_ubyte),
    ('uiIdentifier', c_ushort),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSICMPHeader) == 20, sizeof(tagNSICMPHeader)
assert alignment(tagNSICMPHeader) == 2, alignment(tagNSICMPHeader)
NSICMPHeader = tagNSICMPHeader
class tagNSMPLSHeader(Structure):
    pass
tagNSMPLSHeader._fields_ = [
    ('ulLabel', c_ulong),
    ('ucExperimentalUse', c_ubyte),
    ('ucBottomStack', c_ubyte),
    ('ucTimeToLive', c_ubyte),
    ('ucReserved', c_ubyte * 8),
]
assert sizeof(tagNSMPLSHeader) == 16, sizeof(tagNSMPLSHeader)
assert alignment(tagNSMPLSHeader) == 4, alignment(tagNSMPLSHeader)
NSMPLSHeader = tagNSMPLSHeader
class tagNSMPLSHeaderList(Structure):
    pass
tagNSMPLSHeaderList._fields_ = [
    ('uiCount', c_ushort),
    ('Header', NSMPLSHeader * 32),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSMPLSHeaderList) == 532, sizeof(tagNSMPLSHeaderList)
assert alignment(tagNSMPLSHeaderList) == 4, alignment(tagNSMPLSHeaderList)
NSMPLSHeaderList = tagNSMPLSHeaderList
class tagNSIPv6ExtHopByHopHeader(Structure):
    pass
tagNSIPv6ExtHopByHopHeader._fields_ = [
    ('ucNextHeader', c_ubyte),
    ('ucHeaderExtensionLength', c_ubyte),
    ('ucOptionDataLength', c_ubyte),
    ('ucOptionData', c_ubyte * 255),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSIPv6ExtHopByHopHeader) == 274, sizeof(tagNSIPv6ExtHopByHopHeader)
assert alignment(tagNSIPv6ExtHopByHopHeader) == 1, alignment(tagNSIPv6ExtHopByHopHeader)
NSIPv6ExtHopByHopHeader = tagNSIPv6ExtHopByHopHeader
class tagNSIPv6ExtFragmentHeader(Structure):
    pass
tagNSIPv6ExtFragmentHeader._fields_ = [
    ('ucNextHeader', c_ubyte),
    ('uiFragmentOffset', c_ushort),
    ('ucMFlag', c_ubyte),
    ('ulIdentification', c_ulong),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSIPv6ExtFragmentHeader) == 28, sizeof(tagNSIPv6ExtFragmentHeader)
assert alignment(tagNSIPv6ExtFragmentHeader) == 4, alignment(tagNSIPv6ExtFragmentHeader)
NSIPv6ExtFragmentHeader = tagNSIPv6ExtFragmentHeader
class tagNSIPv6ExtDestinationHeader(Structure):
    pass
tagNSIPv6ExtDestinationHeader._fields_ = [
    ('ucNextHeader', c_ubyte),
    ('ucHeaderExtensionLength', c_ubyte),
    ('ucOptionDataLength', c_ubyte),
    ('ucOptionData', c_ubyte * 255),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSIPv6ExtDestinationHeader) == 274, sizeof(tagNSIPv6ExtDestinationHeader)
assert alignment(tagNSIPv6ExtDestinationHeader) == 1, alignment(tagNSIPv6ExtDestinationHeader)
NSIPv6ExtDestinationHeader = tagNSIPv6ExtDestinationHeader
class tagNSIPv6ExtRoutingHeader(Structure):
    pass
tagNSIPv6ExtRoutingHeader._fields_ = [
    ('ucNextHeader', c_ubyte),
    ('ucHeaderExtensionLength', c_ubyte),
    ('ucSegmentsLeft', c_ubyte),
    ('ucNumAddress', c_ubyte),
    ('IPAddress', NSIPv6Address * 20),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSIPv6ExtRoutingHeader) == 340, sizeof(tagNSIPv6ExtRoutingHeader)
assert alignment(tagNSIPv6ExtRoutingHeader) == 1, alignment(tagNSIPv6ExtRoutingHeader)
NSIPv6ExtRoutingHeader = tagNSIPv6ExtRoutingHeader
class tagNSIPv6ExtAuthenticationHeader(Structure):
    pass
tagNSIPv6ExtAuthenticationHeader._fields_ = [
    ('ucNextHeader', c_ubyte),
    ('ucHeaderExtensionLength', c_ubyte),
    ('ulSPI', c_ulong),
    ('ulSequenceNumber', c_ulong),
    ('ucAuthenticationDataLength', c_ubyte),
    ('ucAuthenticationData', c_ubyte * 255),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSIPv6ExtAuthenticationHeader) == 284, sizeof(tagNSIPv6ExtAuthenticationHeader)
assert alignment(tagNSIPv6ExtAuthenticationHeader) == 4, alignment(tagNSIPv6ExtAuthenticationHeader)
NSIPv6ExtAuthenticationHeader = tagNSIPv6ExtAuthenticationHeader
class tagNSIPv6ExtESPHeader(Structure):
    pass
tagNSIPv6ExtESPHeader._fields_ = [
    ('ucNextHeader', c_ubyte),
    ('ulSPI', c_ulong),
    ('ulSequenceNumber', c_ulong),
    ('ucPayloadDataLength', c_ubyte),
    ('ucPayloadData', c_ubyte * 255),
    ('ucPaddingLength', c_ubyte),
    ('ucPadding', c_ubyte * 255),
    ('ucAuthenticationDataLength', c_ubyte),
    ('ucAuthenticationData', c_ubyte * 255),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSIPv6ExtESPHeader) == 796, sizeof(tagNSIPv6ExtESPHeader)
assert alignment(tagNSIPv6ExtESPHeader) == 4, alignment(tagNSIPv6ExtESPHeader)
NSIPv6ExtESPHeader = tagNSIPv6ExtESPHeader
class tagNSIPXHeader(Structure):
    pass
tagNSIPXHeader._fields_ = [
    ('uiIPXLength', c_ushort),
    ('ucHop', c_ubyte),
    ('ucType', c_ubyte),
    ('ucDestinationNetwork', c_ubyte * 4),
    ('ucDestinationHost', c_ubyte * 6),
    ('uiDestinationSocket', c_ushort),
    ('ucSourceNetwork', c_ubyte * 4),
    ('ucSourceHost', c_ubyte * 6),
    ('uiSourceSocket', c_ushort),
    ('reserved', c_ubyte * 16),
]
assert sizeof(tagNSIPXHeader) == 44, sizeof(tagNSIPXHeader)
assert alignment(tagNSIPXHeader) == 2, alignment(tagNSIPXHeader)
NSIPXHeader = tagNSIPXHeader
class tagNSATMHeader(Structure):
    pass
tagNSATMHeader._fields_ = [
    ('uiVCIndex', c_ushort),
    ('uiATMFlags', c_ushort),
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSATMHeader) == 20, sizeof(tagNSATMHeader)
assert alignment(tagNSATMHeader) == 2, alignment(tagNSATMHeader)
NSATMHeader = tagNSATMHeader
class tagNSPPPHeader(Structure):
    pass
tagNSPPPHeader._fields_ = [
    ('ucReserved', c_ubyte * 16),
]
assert sizeof(tagNSPPPHeader) == 16, sizeof(tagNSPPPHeader)
assert alignment(tagNSPPPHeader) == 1, alignment(tagNSPPPHeader)
NSPPPHeader = tagNSPPPHeader
class tagNSGREHeader(Structure):
    pass
tagNSGREHeader._fields_ = [
    ('uiProtocolType', c_ushort),
    ('ucReserved', c_ubyte * 256),
]
assert sizeof(tagNSGREHeader) == 258, sizeof(tagNSGREHeader)
assert alignment(tagNSGREHeader) == 2, alignment(tagNSGREHeader)
NSGREHeader = tagNSGREHeader
class tagNSStreamMultiConfigInfo(Structure):
    pass
tagNSStreamMultiConfigInfo._fields_ = [
    ('ucMode', c_ubyte),
    ('ulStreamIndex', c_ulong),
    ('ulStreamCount', c_ulong),
    ('ucStructureCount', c_ubyte),
    ('ucStructureTypeArray', c_ubyte * 16),
    ('uiStructureSizeArray', c_uint * 16),
    ('ucReserved', c_ubyte * 256),
]
assert sizeof(tagNSStreamMultiConfigInfo) == 352, sizeof(tagNSStreamMultiConfigInfo)
assert alignment(tagNSStreamMultiConfigInfo) == 4, alignment(tagNSStreamMultiConfigInfo)
NSStreamMultiConfigInfo = tagNSStreamMultiConfigInfo
class tagNSNTPFOMInfo(Structure):
    pass
tagNSNTPFOMInfo._fields_ = [
    ('ulCompositeFOM', c_ulong),
    ('ulCurrentFFOM', c_ulong),
    ('ulFFOMLimit', c_ulong),
    ('ulCurrentTFOM', c_ulong),
    ('ulTFOMLimit', c_ulong),
]
assert sizeof(tagNSNTPFOMInfo) == 20, sizeof(tagNSNTPFOMInfo)
assert alignment(tagNSNTPFOMInfo) == 4, alignment(tagNSNTPFOMInfo)
NSNTPFOMInfo = tagNSNTPFOMInfo
class tagNSNTPPeerListInfo(Structure):
    pass
tagNSNTPPeerListInfo._fields_ = [
    ('ulCount', c_ulong),
    ('addrs', NSIPAddress * 5),
]
assert sizeof(tagNSNTPPeerListInfo) == 24, sizeof(tagNSNTPPeerListInfo)
assert alignment(tagNSNTPPeerListInfo) == 4, alignment(tagNSNTPPeerListInfo)
NSNTPPeerListInfo = tagNSNTPPeerListInfo
class tagNSNTPStatusInfo(Structure):
    pass
tagNSNTPStatusInfo._fields_ = [
    ('szName', c_char * 100),
    ('szValue', c_char * 100),
]
assert sizeof(tagNSNTPStatusInfo) == 200, sizeof(tagNSNTPStatusInfo)
assert alignment(tagNSNTPStatusInfo) == 1, alignment(tagNSNTPStatusInfo)
NSNTPStatusInfo = tagNSNTPStatusInfo
class tagNSPMCDeviceInfo(Structure):
    pass
tagNSPMCDeviceInfo._fields_ = [
    ('ulDevices', c_ulong),
    ('ucReserved', c_ubyte * 128),
]
assert sizeof(tagNSPMCDeviceInfo) == 132, sizeof(tagNSPMCDeviceInfo)
assert alignment(tagNSPMCDeviceInfo) == 4, alignment(tagNSPMCDeviceInfo)
NSPMCDeviceInfo = tagNSPMCDeviceInfo
class tagNSPMCFlashInfo(Structure):
    pass
tagNSPMCFlashInfo._fields_ = [
    ('ulDeviceType', c_ulong),
    ('ucReserved', c_ubyte * 128),
    ('szName', c_char * 64),
    ('szVendor', c_char * 64),
    ('ulCapacity', c_ulong),
    ('ulFlashStatus', c_ulong),
]
assert sizeof(tagNSPMCFlashInfo) == 268, sizeof(tagNSPMCFlashInfo)
assert alignment(tagNSPMCFlashInfo) == 4, alignment(tagNSPMCFlashInfo)
NSPMCFlashInfo = tagNSPMCFlashInfo
class tagNSPMCVPNInfo(Structure):
    pass
tagNSPMCVPNInfo._fields_ = [
    ('ulDeviceType', c_ulong),
    ('ucReserved', c_ubyte * 128),
    ('szName', c_char * 64),
    ('szVendor', c_char * 64),
    ('ulVPNStatus', c_ulong),
]
assert sizeof(tagNSPMCVPNInfo) == 264, sizeof(tagNSPMCVPNInfo)
assert alignment(tagNSPMCVPNInfo) == 4, alignment(tagNSPMCVPNInfo)
NSPMCVPNInfo = tagNSPMCVPNInfo
class tagNSPMCOnePartition(Structure):
    pass
tagNSPMCOnePartition._fields_ = [
    ('ulSize', c_ulong),
    ('szName', c_char * 24),
    ('ucReserved', c_ubyte * 24),
]
assert sizeof(tagNSPMCOnePartition) == 52, sizeof(tagNSPMCOnePartition)
assert alignment(tagNSPMCOnePartition) == 4, alignment(tagNSPMCOnePartition)
NSPMCOnePartition = tagNSPMCOnePartition
class tagNSPMCPartitionDisk(Structure):
    pass
tagNSPMCPartitionDisk._fields_ = [
    ('ulPartitionCount', c_ulong),
    ('mPMCPartition', NSPMCOnePartition * 4),
    ('ucReserved', c_ubyte * 64),
]
assert sizeof(tagNSPMCPartitionDisk) == 276, sizeof(tagNSPMCPartitionDisk)
assert alignment(tagNSPMCPartitionDisk) == 4, alignment(tagNSPMCPartitionDisk)
NSPMCPartitionDisk = tagNSPMCPartitionDisk
class tagNSPMCOnePartitionInfo(Structure):
    pass
tagNSPMCOnePartitionInfo._fields_ = [
    ('szName', c_char * 24),
    ('ulStatus', c_ulong),
    ('ulCapacity', c_ulong),
    ('ulFreeSpace', c_ulong),
    ('ucReserved', c_ubyte * 12),
]
assert sizeof(tagNSPMCOnePartitionInfo) == 48, sizeof(tagNSPMCOnePartitionInfo)
assert alignment(tagNSPMCOnePartitionInfo) == 4, alignment(tagNSPMCOnePartitionInfo)
NSPMCOnePartitionInfo = tagNSPMCOnePartitionInfo
class tagNSPMCDiskInfo(Structure):
    pass
tagNSPMCDiskInfo._fields_ = [
    ('ucReserved', c_ubyte * 24),
    ('ulPartitionCount', c_ulong),
    ('mPMCDiskInfo', NSPMCOnePartitionInfo * 4),
    ('ucReserved1', c_ubyte * 20),
]
assert sizeof(tagNSPMCDiskInfo) == 240, sizeof(tagNSPMCDiskInfo)
assert alignment(tagNSPMCDiskInfo) == 4, alignment(tagNSPMCDiskInfo)
NSPMCDiskInfo = tagNSPMCDiskInfo
class tagNSPMCFlashMemTestInfo(Structure):
    pass
tagNSPMCFlashMemTestInfo._fields_ = [
    ('ulFlashStatus', c_ulong),
    ('ucReserved', c_ubyte * 24),
]
assert sizeof(tagNSPMCFlashMemTestInfo) == 28, sizeof(tagNSPMCFlashMemTestInfo)
assert alignment(tagNSPMCFlashMemTestInfo) == 4, alignment(tagNSPMCFlashMemTestInfo)
NSPMCFlashMemTestInfo = tagNSPMCFlashMemTestInfo
class tagNSPMCVPNHardwareTestInfo(Structure):
    pass
tagNSPMCVPNHardwareTestInfo._fields_ = [
    ('ulStatus', c_ulong),
    ('ucReserved', c_ubyte * 24),
]
assert sizeof(tagNSPMCVPNHardwareTestInfo) == 28, sizeof(tagNSPMCVPNHardwareTestInfo)
assert alignment(tagNSPMCVPNHardwareTestInfo) == 4, alignment(tagNSPMCVPNHardwareTestInfo)
NSPMCVPNHardwareTestInfo = tagNSPMCVPNHardwareTestInfo
class tagNSPMCHifnMemTestInfo(Structure):
    pass
tagNSPMCHifnMemTestInfo._fields_ = [
    ('ulHifnStatus', c_ulong),
    ('ucReserved', c_ubyte * 24),
]
assert sizeof(tagNSPMCHifnMemTestInfo) == 28, sizeof(tagNSPMCHifnMemTestInfo)
assert alignment(tagNSPMCHifnMemTestInfo) == 4, alignment(tagNSPMCHifnMemTestInfo)
NSPMCHifnMemTestInfo = tagNSPMCHifnMemTestInfo
class tagPOSCardLineConfig(Structure):
    pass
tagPOSCardLineConfig._fields_ = [
    ('ucCRC32Enabled', c_ubyte),
    ('ucScramble', c_ubyte),
    ('uiSONETAlarmError', c_ushort),
]
assert sizeof(tagPOSCardLineConfig) == 4, sizeof(tagPOSCardLineConfig)
assert alignment(tagPOSCardLineConfig) == 2, alignment(tagPOSCardLineConfig)
POSCardLineConfig = tagPOSCardLineConfig
class tagPOSCardPortEncapsulation(Structure):
    pass
tagPOSCardPortEncapsulation._fields_ = [
    ('ucEncapStyle', c_ubyte),
    ('Pad', c_char * 3),
]
assert sizeof(tagPOSCardPortEncapsulation) == 4, sizeof(tagPOSCardPortEncapsulation)
assert alignment(tagPOSCardPortEncapsulation) == 1, alignment(tagPOSCardPortEncapsulation)
POSCardPortEncapsulation = tagPOSCardPortEncapsulation
class tagPOSCardSetSpeed(Structure):
    pass
tagPOSCardSetSpeed._fields_ = [
    ('uiSpeed', c_ushort),
]
assert sizeof(tagPOSCardSetSpeed) == 2, sizeof(tagPOSCardSetSpeed)
assert alignment(tagPOSCardSetSpeed) == 2, alignment(tagPOSCardSetSpeed)
POSCardSetSpeed = tagPOSCardSetSpeed
class tagPOSCardGetSpeedInfo(Structure):
    pass
tagPOSCardGetSpeedInfo._fields_ = [
    ('uiSpeed', c_ushort),
    ('uiSpeedCap', c_ushort),
    ('uiTransMode', c_ushort),
]
assert sizeof(tagPOSCardGetSpeedInfo) == 6, sizeof(tagPOSCardGetSpeedInfo)
assert alignment(tagPOSCardGetSpeedInfo) == 2, alignment(tagPOSCardGetSpeedInfo)
POSCardGetSpeedInfo = tagPOSCardGetSpeedInfo
class tagPOSSonetPayloadConfig(Structure):
    pass
tagPOSSonetPayloadConfig._fields_ = [
    ('ucType', c_ubyte),
    ('ucReserved', c_ubyte * 7),
]
assert sizeof(tagPOSSonetPayloadConfig) == 8, sizeof(tagPOSSonetPayloadConfig)
assert alignment(tagPOSSonetPayloadConfig) == 1, alignment(tagPOSSonetPayloadConfig)
POSSonetPayloadConfig = tagPOSSonetPayloadConfig
class tagPOSTrigger(Structure):
    pass
tagPOSTrigger._fields_ = [
    ('ucTrigger1Mode', c_ubyte),
    ('ucTrigger1Range', c_ubyte),
    ('uiTrigger1Offset', c_ushort),
    ('ucTrigger1Data', c_ubyte * 8),
    ('ucTrigger1Mask', c_ubyte * 8),
    ('ucTrigger2Mode', c_ubyte),
    ('ucTrigger2Range', c_ubyte),
    ('uiTrigger2Offset', c_ushort),
    ('ucTrigger2Data', c_ubyte * 8),
    ('ucTrigger2Mask', c_ubyte * 8),
    ('ucTriggerMode', c_ubyte),
    ('ucReserved', c_ubyte),
]
assert sizeof(tagPOSTrigger) == 42, sizeof(tagPOSTrigger)
assert alignment(tagPOSTrigger) == 2, alignment(tagPOSTrigger)
POSTrigger = tagPOSTrigger
class tagPOSConfig(Structure):
    pass
tagPOSConfig._fields_ = [
    ('ucTxClockSource', c_ubyte),
    ('ucFramingMode', c_ubyte),
    ('ucLoopBackMode', c_ubyte),
    ('ucReserved', c_ubyte * 20),
]
assert sizeof(tagPOSConfig) == 23, sizeof(tagPOSConfig)
assert alignment(tagPOSConfig) == 1, alignment(tagPOSConfig)
POSConfig = tagPOSConfig
class tagPPPParamCfg(Structure):
    pass
tagPPPParamCfg._fields_ = [
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ulpppCount', c_ulong),
    ('ulpppInstance', c_ulong),
    ('uipppWeWish', c_ushort),
    ('uipppWeMust', c_ushort),
    ('uipppWeCan', c_ushort),
    ('ucpppEnablePPP', c_ubyte),
    ('ucpppCHAPAlgo', c_ubyte),
    ('uipppMRU', c_ushort),
    ('uipppMaxFailure', c_ushort),
    ('uipppMaxConfigure', c_ushort),
    ('uipppMaxTerminate', c_ushort),
    ('ulpppMagicNumber', c_ulong),
    ('ucpppOurID', c_ubyte * 32),
    ('ucpppOurPW', c_ubyte * 32),
    ('ucpppPeerID', c_ubyte * 32),
    ('ucpppPeerPW', c_ubyte * 32),
    ('ucpppIPEnable', c_ubyte),
    ('ucpppNegotiateIPAddr', c_ubyte),
    ('uipppIPCompress', c_ushort),
    ('ucpppOurIPAddr', c_ubyte * 4),
    ('ucpppPeerIPAddr', c_ubyte * 4),
    ('ulpppIPXNet', c_ulong),
    ('ucpppIPXEnable', c_ubyte),
    ('ucpppIPXNode', c_ubyte * 6),
    ('ucReserved', c_ubyte),
    ('uipppIPXCompress', c_ushort),
    ('uipppIPXRoutingProt', c_ushort),
    ('uipppRestartTimer', c_ushort),
    ('uipppRetryCount', c_ushort),
    ('ucModFrame', c_ubyte),
    ('ucReserved1', c_ubyte),
    ('ucMode', c_ubyte),
    ('ucTimer', c_ubyte),
    ('uiRetry', c_ushort),
    ('uiOptions', c_ushort),
    ('ucSourceMAC', c_ubyte * 6),
    ('ucDestMAC', c_ubyte * 6),
    ('uiServiceNameLen', c_ushort),
    ('ucServiceName', c_ubyte * 16),
    ('uiAcNameLen', c_ushort),
    ('ucAcName', c_ubyte * 16),
]
assert sizeof(tagPPPParamCfg) == 252, sizeof(tagPPPParamCfg)
assert alignment(tagPPPParamCfg) == 4, alignment(tagPPPParamCfg)
PPPParamCfg = tagPPPParamCfg
class tagPPPControlCfg(Structure):
    pass
tagPPPControlCfg._fields_ = [
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ulpppCount', c_ulong),
    ('ulpppInstance', c_ulong),
    ('ucpppAction', c_ubyte),
    ('ucpppLCPPassiveMode', c_ubyte),
    ('ucpppIPCPPassiveMode', c_ubyte),
    ('ucpppSessionBurstSize', c_ubyte),
    ('ulpppEchoFreq', c_ulong),
    ('ulpppEchoErrFreq', c_ulong),
    ('ulpppInterConnDelay', c_ulong),
    ('uiLCPStartDelay', c_ushort),
    ('uiIPCPStartDelay', c_ushort),
]
assert sizeof(tagPPPControlCfg) == 36, sizeof(tagPPPControlCfg)
assert alignment(tagPPPControlCfg) == 4, alignment(tagPPPControlCfg)
PPPControlCfg = tagPPPControlCfg
class tagPPPDelCfg(Structure):
    pass
tagPPPDelCfg._fields_ = [
    ('ulpppInstance', c_ulong),
    ('ulpppCount', c_ulong),
]
assert sizeof(tagPPPDelCfg) == 8, sizeof(tagPPPDelCfg)
assert alignment(tagPPPDelCfg) == 4, alignment(tagPPPDelCfg)
PPPDelCfg = tagPPPDelCfg
class tagPPPDelete(Structure):
    pass
tagPPPDelete._fields_ = [
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ulpppCount', c_ulong),
]
assert sizeof(tagPPPDelete) == 12, sizeof(tagPPPDelete)
assert alignment(tagPPPDelete) == 4, alignment(tagPPPDelete)
PPPDelete = tagPPPDelete
class tagPPPStatusInfo(Structure):
    pass
tagPPPStatusInfo._fields_ = [
    ('ulpppInstance', c_ulong),
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ulpppCount', c_ulong),
    ('ucppplcpState', c_ubyte),
    ('ucpppipcpState', c_ubyte),
    ('ucpppipxcpState', c_ubyte),
    ('ucppplcpFailCode', c_ubyte),
    ('ulpppMagicNumber', c_ulong),
    ('ucpppOurIPAddr', c_ubyte * 4),
    ('ucpppPeerIPAddr', c_ubyte * 4),
    ('ulpppWeGot', c_ulong),
    ('ulpppWeAcked', c_ulong),
    ('uipppMRU', c_ushort),
    ('uipppMTU', c_ushort),
    ('ullpppLatency', U64),
    ('ullpppTotalLatency', U64),
    ('ucState', c_ubyte),
    ('ucMode', c_ubyte),
    ('uiSessionID', c_ushort),
    ('ucSourceMAC', c_ubyte * 6),
    ('ucDestMAC', c_ubyte * 6),
    ('uipppNumRetries', c_ushort),
    ('ucppplcpDetailedState', c_ubyte),
    ('ucpppipcpDetailedState', c_ubyte),
    ('ulReserved', c_ulong * 5),
]
assert sizeof(tagPPPStatusInfo) == 100, sizeof(tagPPPStatusInfo)
assert alignment(tagPPPStatusInfo) == 4, alignment(tagPPPStatusInfo)
PPPStatusInfo = tagPPPStatusInfo
class tagPPPStatsInfo(Structure):
    pass
tagPPPStatsInfo._fields_ = [
    ('ulpppInstance', c_ulong),
    ('ulLineNo', c_ulong),
    ('ulChannelNo', c_ulong),
    ('ulpppCount', c_ulong),
    ('ultimestamp', c_ulong),
    ('ullcpConfReqSent', c_ulong),
    ('ullcpConfAckSent', c_ulong),
    ('ullcpConfNakSent', c_ulong),
    ('ullcpConfRejectSent', c_ulong),
    ('ullcpTermReqSent', c_ulong),
    ('ullcpTermAckSent', c_ulong),
    ('ullcpProtoRejectSent', c_ulong),
    ('ullcpEchoReqSent', c_ulong),
    ('ullcpEchoReplySent', c_ulong),
    ('ullcpEchoReqErrSent', c_ulong),
    ('ullcpEchoReplyErrSent', c_ulong),
    ('ullcpDiscardReqSent', c_ulong),
    ('ullcpCodeRejectSent', c_ulong),
    ('ullcpResetReqSent', c_ulong),
    ('ullcpResetAckSent', c_ulong),
    ('ullcpPAPReqSent', c_ulong),
    ('ullcpPAPAckSent', c_ulong),
    ('ullcpPAPNakSent', c_ulong),
    ('ullcpCHAPChlMSSent', c_ulong),
    ('ullcpCHAPChlMD5Sent', c_ulong),
    ('ullcpCHAPRspMSSent', c_ulong),
    ('ullcpCHAPRspMD5Sent', c_ulong),
    ('ullcpCHAPSuccessSent', c_ulong),
    ('ullcpCHAPFailSent', c_ulong),
    ('ullcpConfReqRcvd', c_ulong),
    ('ullcpConfAckRcvd', c_ulong),
    ('ullcpConfNakRcvd', c_ulong),
    ('ullcpConfRejectRcvd', c_ulong),
    ('ullcpTermReqRcvd', c_ulong),
    ('ullcpTermAckRcvd', c_ulong),
    ('ullcpProtoRejectRcvd', c_ulong),
    ('ullcpEchoReqRcvd', c_ulong),
    ('ullcpEchoReplyRcvd', c_ulong),
    ('ullcpEchoReqErrRcvd', c_ulong),
    ('ullcpEchoReplyErrRcvd', c_ulong),
    ('ullcpDiscardReqRcvd', c_ulong),
    ('ullcpCodeRejectRcvd', c_ulong),
    ('ullcpResetReqRcvd', c_ulong),
    ('ullcpResetAckRcvd', c_ulong),
    ('ullcpPAPReqRcvd', c_ulong),
    ('ullcpPAPAckRcvd', c_ulong),
    ('ullcpPAPNakRcvd', c_ulong),
    ('ullcpCHAPChlMSRcvd', c_ulong),
    ('ullcpCHAPChlMD5Rcvd', c_ulong),
    ('ullcpCHAPRspMSRcvd', c_ulong),
    ('ullcpCHAPRspMD5Rcvd', c_ulong),
    ('ullcpCHAPSuccessRcvd', c_ulong),
    ('ullcpCHAPFailRcvd', c_ulong),
    ('ulReserved', c_ulong * 14),
]
assert sizeof(tagPPPStatsInfo) == 268, sizeof(tagPPPStatsInfo)
assert alignment(tagPPPStatsInfo) == 4, alignment(tagPPPStatsInfo)
PPPStatsInfo = tagPPPStatsInfo
class tagPPPoEStatsInfo(Structure):
    pass
tagPPPoEStatsInfo._fields_ = [
    ('ulStreamIndex', c_ulong),
    ('ulSent', c_ulong),
    ('ulReceived', c_ulong),
    ('ulDropped', c_ulong),
]
assert sizeof(tagPPPoEStatsInfo) == 16, sizeof(tagPPPoEStatsInfo)
assert alignment(tagPPPoEStatsInfo) == 4, alignment(tagPPPoEStatsInfo)
PPPoEStatsInfo = tagPPPoEStatsInfo
class tagPPPParamsCopy(Structure):
    pass
tagPPPParamsCopy._fields_ = [
    ('uipppSrcStrNum', c_ushort),
    ('uipppDstStrNum', c_ushort),
    ('uipppDstStrCount', c_ushort),
    ('uiReserved', c_ushort),
    ('ulReserved', c_ulong),
]
assert sizeof(tagPPPParamsCopy) == 12, sizeof(tagPPPParamsCopy)
assert alignment(tagPPPParamsCopy) == 4, alignment(tagPPPParamsCopy)
PPPParamsCopy = tagPPPParamsCopy
class tagPPPParamsModify(Structure):
    pass
tagPPPParamsModify._fields_ = [
    ('uipppStartStrNum', c_ushort),
    ('uipppStrCount', c_ushort),
    ('uipppParamItemID', c_ushort),
    ('uipppParamCount', c_ushort),
    ('ucpppData', c_ubyte * 2048),
]
assert sizeof(tagPPPParamsModify) == 2056, sizeof(tagPPPParamsModify)
assert alignment(tagPPPParamsModify) == 2, alignment(tagPPPParamsModify)
PPPParamsModify = tagPPPParamsModify
class tagPPPParamsFill(Structure):
    pass
tagPPPParamsFill._fields_ = [
    ('uipppSrcStrNum', c_ushort),
    ('uipppDstStrNum', c_ushort),
    ('uipppDstStrCount', c_ushort),
    ('uipppParamItemID', c_ushort),
    ('ucpppDelta', c_ubyte * 32),
]
assert sizeof(tagPPPParamsFill) == 40, sizeof(tagPPPParamsFill)
assert alignment(tagPPPParamsFill) == 2, alignment(tagPPPParamsFill)
PPPParamsFill = tagPPPParamsFill
class tagPPPStatusSearchInfo(Structure):
    pass
tagPPPStatusSearchInfo._fields_ = [
    ('uipppStartIndex', c_ushort),
    ('uipppCount', c_ushort),
    ('uipppReturnItemId', c_ushort),
    ('uipppSearchItemId', c_ushort),
    ('ullpppSearchRangeLow', U64),
    ('ullpppSearchRangeHigh', U64),
    ('uipppReturnItemSize', c_ushort),
    ('uipppReserved', c_ushort),
    ('ullpppItem', U64 * 2048),
]
assert sizeof(tagPPPStatusSearchInfo) == 16412, sizeof(tagPPPStatusSearchInfo)
assert alignment(tagPPPStatusSearchInfo) == 4, alignment(tagPPPStatusSearchInfo)
PPPStatusSearchInfo = tagPPPStatusSearchInfo
class tagPPPIPv6ParamCfg(Structure):
    pass
tagPPPIPv6ParamCfg._fields_ = [
    ('ulpppInstance', c_ulong),
    ('ulpppCount', c_ulong),
    ('uipppWeWish', c_ushort),
    ('uipppWeMust', c_ushort),
    ('uipppWeCan', c_ushort),
    ('ucpppEnablePPP', c_ubyte),
    ('ucpppCHAPAlgo', c_ubyte),
    ('uipppMRU', c_ushort),
    ('uipppMaxFailure', c_ushort),
    ('uipppMaxConfigure', c_ushort),
    ('uipppMaxTerminate', c_ushort),
    ('ulpppMagicNumber', c_ulong),
    ('ucpppOurID', c_ubyte * 32),
    ('ucpppOurPW', c_ubyte * 32),
    ('ucpppPeerID', c_ubyte * 32),
    ('ucpppPeerPW', c_ubyte * 32),
    ('ucpppIPEnable', c_ubyte),
    ('ucpppNegotiateIPAddr', c_ubyte),
    ('uipppIPCompress', c_ushort),
    ('ucpppOurIPAddr', c_ubyte * 4),
    ('ucpppPeerIPAddr', c_ubyte * 4),
    ('ulpppIPXNet', c_ulong),
    ('ucpppIPXEnable', c_ubyte),
    ('ucpppIPXNode', c_ubyte * 6),
    ('ucReserved', c_ubyte),
    ('uipppIPXCompress', c_ushort),
    ('uipppIPXRoutingProt', c_ushort),
    ('uipppRestartTimer', c_ushort),
    ('uipppRetryCount', c_ushort),
    ('ucModFrame', c_ubyte),
    ('ucReserved1', c_ubyte),
    ('ucMode', c_ubyte),
    ('ucTimer', c_ubyte),
    ('uiRetry', c_ushort),
    ('uiOptions', c_ushort),
    ('ucSourceMAC', c_ubyte * 6),
    ('ucDestMAC', c_ubyte * 6),
    ('uiServiceNameLen', c_ushort),
    ('ucServiceName', c_ubyte * 16),
    ('uiAcNameLen', c_ushort),
    ('ucAcName', c_ubyte * 16),
    ('ulConnectionHandle', c_ulong),
    ('ucMPLSEnable', c_ubyte),
    ('ucOSIEnable', c_ubyte),
    ('ucNegotiateNpduPad', c_ubyte),
    ('ucOSITxNpduPad', c_ubyte),
    ('ucpppIPv6Enable', c_ubyte),
    ('ucIPv6NegotiateIfaceId', c_ubyte),
    ('ucOSIRxNpduPad', c_ubyte),
    ('ucReserved2', c_ubyte),
    ('ucpppOurIPv6Addr', c_ubyte * 16),
    ('ucpppPeerIPv6Addr', c_ubyte * 16),
]
assert sizeof(tagPPPIPv6ParamCfg) == 288, sizeof(tagPPPIPv6ParamCfg)
assert alignment(tagPPPIPv6ParamCfg) == 4, alignment(tagPPPIPv6ParamCfg)
PPPIPv6ParamCfg = tagPPPIPv6ParamCfg
class tagPPPIPv6StatusInfo(Structure):
    pass
tagPPPIPv6StatusInfo._fields_ = [
    ('ulpppInstance', c_ulong),
    ('ulpppCount', c_ulong),
    ('ucppplcpState', c_ubyte),
    ('ucpppipcpState', c_ubyte),
    ('ucpppipxcpState', c_ubyte),
    ('ucppplcpFailCode', c_ubyte),
    ('ulpppMagicNumber', c_ulong),
    ('ucpppOurIPAddr', c_ubyte * 4),
    ('ucpppPeerIPAddr', c_ubyte * 4),
    ('ulpppWeGot', c_ulong),
    ('ulpppWeAcked', c_ulong),
    ('uipppMRU', c_ushort),
    ('uipppMTU', c_ushort),
    ('ullpppLatency', U64),
    ('ullpppTotalLatency', U64),
    ('ucState', c_ubyte),
    ('ucMode', c_ubyte),
    ('uiSessionID', c_ushort),
    ('ucSourceMAC', c_ubyte * 6),
    ('ucDestMAC', c_ubyte * 6),
    ('uiRetries', c_ushort),
    ('uclcpDetailedState', c_ubyte),
    ('ucipcpDetailedState', c_ubyte),
    ('ucosicpState', c_ubyte),
    ('ucosiDetailedState', c_ubyte),
    ('ucosiTxAlignment', c_ubyte),
    ('ucosiRxAlignment', c_ubyte),
    ('ucipv6cpState', c_ubyte),
    ('ucipv6cpDetailedState', c_ubyte),
    ('ucMPLSState', c_ubyte),
    ('ucReserved1', c_ubyte),
    ('ucpppOurIPv6Addr', c_ubyte * 16),
    ('ucpppPeerIPv6Addr', c_ubyte * 16),
    ('ulReserved2', c_ulong),
]
assert sizeof(tagPPPIPv6StatusInfo) == 116, sizeof(tagPPPIPv6StatusInfo)
assert alignment(tagPPPIPv6StatusInfo) == 4, alignment(tagPPPIPv6StatusInfo)
PPPIPv6StatusInfo = tagPPPIPv6StatusInfo
class tagPPPSessionStatsInfo(Structure):
    pass
tagPPPSessionStatsInfo._fields_ = [
    ('ullTimeofDay', U64),
    ('ulTotalSessionAttempted', c_ulong),
    ('ulTotalSessionSuccessful', c_ulong),
    ('ulTotalSessionFailed', c_ulong),
    ('ulTotalSessionRetries', c_ulong),
    ('ulNumSessionRetries', c_ulong),
    ('ulNumSessionFailed', c_ulong),
    ('ulNumSessionCfged', c_ulong),
    ('ulActiveSession', c_ulong),
    ('ulOpenSession', c_ulong),
    ('ulIdleSession', c_ulong),
    ('ulLinkdownSession', c_ulong),
    ('ulThrottleSession', c_ulong),
    ('ulTerminateThrottleSession', c_ulong),
    ('ulTerminatingSession', c_ulong),
    ('ulAvailableSession', c_ulong),
    ('ulEchoReqSent', c_ulong),
    ('ulEchoReplySent', c_ulong),
    ('ulEchoReqRcvd', c_ulong),
    ('ulEchoReplyRcvd', c_ulong),
    ('ulEchoReqPerBurst', c_ulong),
    ('ulpppPacktSent', c_ulong),
    ('ulpppPacktRcvd', c_ulong),
    ('ulReserved', c_ulong * 4),
]
assert sizeof(tagPPPSessionStatsInfo) == 112, sizeof(tagPPPSessionStatsInfo)
assert alignment(tagPPPSessionStatsInfo) == 4, alignment(tagPPPSessionStatsInfo)
PPPSessionStatsInfo = tagPPPSessionStatsInfo
class tagPPPEnhancedConfig(Structure):
    pass
tagPPPEnhancedConfig._fields_ = [
    ('ulpppInstance', c_ulong),
    ('ulpppCount', c_ulong),
    ('uipppWeWish', c_ushort),
    ('uipppWeMust', c_ushort),
    ('uipppWeCan', c_ushort),
    ('ucpppEnablePPP', c_ubyte),
    ('ucpppCHAPAlgo', c_ubyte),
    ('uipppMRU', c_ushort),
    ('uipppMaxFailure', c_ushort),
    ('uipppMaxConfigure', c_ushort),
    ('uipppMaxTerminate', c_ushort),
    ('ulpppMagicNumber', c_ulong),
    ('ucpppOurID', c_ubyte * 32),
    ('ucpppOurPW', c_ubyte * 32),
    ('ucpppPeerID', c_ubyte * 32),
    ('ucpppPeerPW', c_ubyte * 32),
    ('ucpppIPEnable', c_ubyte),
    ('ucpppNegotiateIPAddr', c_ubyte),
    ('uipppIPCompress', c_ushort),
    ('ucpppOurIPAddr', c_ubyte * 4),
    ('ucpppPeerIPAddr', c_ubyte * 4),
    ('ulpppIPXNet', c_ulong),
    ('ucpppIPXEnable', c_ubyte),
    ('ucpppIPXNode', c_ubyte * 6),
    ('ucReserved', c_ubyte),
    ('uipppIPXCompress', c_ushort),
    ('uipppIPXRoutingProt', c_ushort),
    ('uipppRestartTimer', c_ushort),
    ('uipppRetryCount', c_ushort),
    ('ucModFrame', c_ubyte),
    ('ucReserved1', c_ubyte),
    ('ucMode', c_ubyte),
    ('ucTimer', c_ubyte),
    ('uiRetry', c_ushort),
    ('uiOptions', c_ushort),
    ('ucSourceMAC', c_ubyte * 6),
    ('ucDestMAC', c_ubyte * 6),
    ('uiServiceNameLen', c_ushort),
    ('ucServiceName', c_ubyte * 16),
    ('uiAcNameLen', c_ushort),
    ('ucAcName', c_ubyte * 16),
    ('ulConnectionHandle', c_ulong),
    ('ucMPLSEnable', c_ubyte),
    ('ucOSIEnable', c_ubyte),
    ('ucNegotiateNpduPad', c_ubyte),
    ('ucOSITxNpduPad', c_ubyte),
    ('ucpppIPv6Enable', c_ubyte),
    ('ucIPv6NegotiateIfaceId', c_ubyte),
    ('ucOSIRxNpduPad', c_ubyte),
    ('ucReserved2', c_ubyte),
    ('ucpppOurIPv6Addr', c_ubyte * 16),
    ('ucpppPeerIPv6Addr', c_ubyte * 16),
    ('ucEnableVLAN', c_ubyte),
    ('ucReserved3', c_ubyte),
    ('ucPRI', c_ubyte),
    ('ucCFI', c_ubyte),
    ('uiVID', c_ushort),
    ('ulStreamIndex', c_ulong),
    ('ucReserved4', c_ubyte * 64),
]
assert sizeof(tagPPPEnhancedConfig) == 364, sizeof(tagPPPEnhancedConfig)
assert alignment(tagPPPEnhancedConfig) == 4, alignment(tagPPPEnhancedConfig)
PPPEnhancedConfig = tagPPPEnhancedConfig
class tagStreamSmartBits(Structure):
    pass
tagStreamSmartBits._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('ProtocolHeader', c_ubyte * 64),
]
assert sizeof(tagStreamSmartBits) == 108, sizeof(tagStreamSmartBits)
assert alignment(tagStreamSmartBits) == 4, alignment(tagStreamSmartBits)
StreamSmartBits = tagStreamSmartBits
class tagStreamSmartBits128(Structure):
    pass
tagStreamSmartBits128._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('ProtocolHeader', c_ubyte * 128),
]
assert sizeof(tagStreamSmartBits128) == 172, sizeof(tagStreamSmartBits128)
assert alignment(tagStreamSmartBits128) == 4, alignment(tagStreamSmartBits128)
StreamSmartBits128 = tagStreamSmartBits128
class tagStream8023(Structure):
    pass
tagStream8023._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('ProtocolHeader', c_ubyte * 64),
]
assert sizeof(tagStream8023) == 108, sizeof(tagStream8023)
assert alignment(tagStream8023) == 4, alignment(tagStream8023)
Stream8023 = tagStream8023
class tagStreamIP(Structure):
    pass
tagStreamIP._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('DestinationMAC', c_ubyte * 6),
    ('SourceMAC', c_ubyte * 6),
    ('TypeOfService', c_ubyte),
    ('TimeToLive', c_ubyte),
    ('InitialSequenceNumber', c_ushort),
    ('DestinationIP', c_ubyte * 4),
    ('SourceIP', c_ubyte * 4),
    ('Netmask', c_ubyte * 4),
    ('Gateway', c_ubyte * 4),
    ('Protocol', c_ubyte),
    ('extra', c_ubyte * 17),
    ('uiActualSequenceNumber', c_ushort),
    ('ulARPStart', c_ulong),
    ('ulARPEnd', c_ulong),
    ('ulARPGap', c_ulong),
]
assert sizeof(tagStreamIP) == 108, sizeof(tagStreamIP)
assert alignment(tagStreamIP) == 4, alignment(tagStreamIP)
StreamIP = tagStreamIP
class tagStreamIPVLAN(Structure):
    pass
tagStreamIPVLAN._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('DestinationMAC', c_ubyte * 6),
    ('SourceMAC', c_ubyte * 6),
    ('TypeOfService', c_ubyte),
    ('TimeToLive', c_ubyte),
    ('InitialSequenceNumber', c_ushort),
    ('DestinationIP', c_ubyte * 4),
    ('SourceIP', c_ubyte * 4),
    ('Netmask', c_ubyte * 4),
    ('Gateway', c_ubyte * 4),
    ('Protocol', c_ubyte),
    ('reserved', c_ubyte * 5),
    ('VLAN_Pri', c_ushort),
    ('VLAN_Cfi', c_ushort),
    ('VLAN_Vid', c_ushort),
    ('extra', c_ubyte * 12),
    ('ulARPStart', c_ulong),
    ('ulARPEnd', c_ulong),
    ('ulARPGap', c_ulong),
]
assert sizeof(tagStreamIPVLAN) == 112, sizeof(tagStreamIPVLAN)
assert alignment(tagStreamIPVLAN) == 4, alignment(tagStreamIPVLAN)
StreamIPVLAN = tagStreamIPVLAN
class tagStreamUDP(Structure):
    pass
tagStreamUDP._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('DestinationMAC', c_ubyte * 6),
    ('SourceMAC', c_ubyte * 6),
    ('TypeOfService', c_ubyte),
    ('TimeToLive', c_ubyte),
    ('InitialSequenceNumber', c_ushort),
    ('DestinationIP', c_ubyte * 4),
    ('SourceIP', c_ubyte * 4),
    ('Netmask', c_ubyte * 4),
    ('Gateway', c_ubyte * 4),
    ('UDPSrc', c_ushort),
    ('UDPDest', c_ushort),
    ('UDPLen', c_ushort),
    ('ucUDPChecksumEnable', c_ubyte),
    ('extra', c_ubyte * 11),
    ('uiActualSequenceNumber', c_ushort),
    ('ulARPStart', c_ulong),
    ('ulARPEnd', c_ulong),
    ('ulARPGap', c_ulong),
]
assert sizeof(tagStreamUDP) == 108, sizeof(tagStreamUDP)
assert alignment(tagStreamUDP) == 4, alignment(tagStreamUDP)
StreamUDP = tagStreamUDP
class tagStreamUDPVLAN(Structure):
    pass
tagStreamUDPVLAN._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('DestinationMAC', c_ubyte * 6),
    ('SourceMAC', c_ubyte * 6),
    ('TypeOfService', c_ubyte),
    ('TimeToLive', c_ubyte),
    ('InitialSequenceNumber', c_ushort),
    ('DestinationIP', c_ubyte * 4),
    ('SourceIP', c_ubyte * 4),
    ('Netmask', c_ubyte * 4),
    ('Gateway', c_ubyte * 4),
    ('UDPSrc', c_ushort),
    ('UDPDest', c_ushort),
    ('UDPLen', c_ushort),
    ('VLAN_Pri', c_ushort),
    ('VLAN_Cfi', c_ushort),
    ('VLAN_Vid', c_ushort),
    ('ucUDPChecksumEnable', c_ubyte),
    ('extra', c_ubyte * 11),
    ('ulARPStart', c_ulong),
    ('ulARPEnd', c_ulong),
    ('ulARPGap', c_ulong),
]
assert sizeof(tagStreamUDPVLAN) == 112, sizeof(tagStreamUDPVLAN)
assert alignment(tagStreamUDPVLAN) == 4, alignment(tagStreamUDPVLAN)
StreamUDPVLAN = tagStreamUDPVLAN
class tagStreamIPX(Structure):
    pass
tagStreamIPX._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('DestinationMAC', c_ubyte * 6),
    ('SourceMAC', c_ubyte * 6),
    ('IPXlen', c_ushort),
    ('IPXhop', c_ubyte),
    ('IPXtype', c_ubyte),
    ('IPXdst', c_ubyte * 4),
    ('IPXdstHost', c_ubyte * 6),
    ('IPXdstSocket', c_ushort),
    ('IPXsrc', c_ubyte * 4),
    ('IPXsrcHost', c_ubyte * 6),
    ('IPXsrcSocket', c_ushort),
    ('extra', c_ubyte * 24),
]
assert sizeof(tagStreamIPX) == 108, sizeof(tagStreamIPX)
assert alignment(tagStreamIPX) == 4, alignment(tagStreamIPX)
StreamIPX = tagStreamIPX
class tagStreamTCP(Structure):
    pass
tagStreamTCP._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('DestinationMAC', c_ubyte * 6),
    ('SourceMAC', c_ubyte * 6),
    ('TypeOfService', c_ubyte),
    ('TimeToLive', c_ubyte),
    ('InitialSequenceNumber', c_ushort),
    ('DestinationIP', c_ubyte * 4),
    ('SourceIP', c_ubyte * 4),
    ('Netmask', c_ubyte * 4),
    ('Gateway', c_ubyte * 4),
    ('SourcePort', c_ushort),
    ('DestPort', c_ushort),
    ('Window', c_ushort),
    ('reserved', c_ubyte * 2),
    ('TCPAck', c_ulong),
    ('TCPSequence', c_ulong),
    ('Flags', c_ubyte),
    ('extra', c_ubyte * 3),
    ('ulARPOut', c_ulong),
    ('ulARPBack', c_ulong),
    ('ulARPGap', c_ulong),
]
assert sizeof(tagStreamTCP) == 108, sizeof(tagStreamTCP)
assert alignment(tagStreamTCP) == 4, alignment(tagStreamTCP)
StreamTCP = tagStreamTCP
class tagStreamTCPVLAN(Structure):
    pass
tagStreamTCPVLAN._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('DestinationMAC', c_ubyte * 6),
    ('SourceMAC', c_ubyte * 6),
    ('TypeOfService', c_ubyte),
    ('TimeToLive', c_ubyte),
    ('InitialSequenceNumber', c_ushort),
    ('DestinationIP', c_ubyte * 4),
    ('SourceIP', c_ubyte * 4),
    ('Netmask', c_ubyte * 4),
    ('Gateway', c_ubyte * 4),
    ('SourcePort', c_ushort),
    ('DestPort', c_ushort),
    ('Window', c_ushort),
    ('VLAN_Pri', c_ushort),
    ('VLAN_Cfi', c_ushort),
    ('VLAN_Vid', c_ushort),
    ('TCPAck', c_ulong),
    ('TCPSequence', c_ulong),
    ('Flags', c_ubyte),
    ('Spare', c_ubyte * 3),
    ('ulARPOut', c_ulong),
    ('ulARPBack', c_ulong),
    ('ulARPGap', c_ulong),
]
assert sizeof(tagStreamTCPVLAN) == 112, sizeof(tagStreamTCPVLAN)
assert alignment(tagStreamTCPVLAN) == 4, alignment(tagStreamTCPVLAN)
StreamTCPVLAN = tagStreamTCPVLAN
class tagStreamSmartTCP(Structure):
    pass
tagStreamSmartTCP._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('DestinationMAC', c_ubyte * 6),
    ('SourceMAC', c_ubyte * 6),
    ('TypeOfService', c_ubyte),
    ('TimeToLive', c_ubyte),
    ('InitialSequenceNumber', c_ushort),
    ('DestinationIP', c_ubyte * 4),
    ('SourceIP', c_ubyte * 4),
    ('Netmask', c_ubyte * 4),
    ('Gateway', c_ubyte * 4),
    ('SourcePort', c_ushort),
    ('DestPort', c_ushort),
    ('TCPLength', c_ushort),
    ('Sequence_acc', c_ushort),
    ('PartialChecksum', c_ulong),
    ('TCPSequence', c_ulong),
    ('Window', c_ushort),
    ('Flags', c_ubyte),
    ('Spare', c_ubyte),
    ('ulARPOut', c_ulong),
    ('ulARPBack', c_ulong),
    ('ulARPGap', c_ulong),
]
assert sizeof(tagStreamSmartTCP) == 108, sizeof(tagStreamSmartTCP)
assert alignment(tagStreamSmartTCP) == 4, alignment(tagStreamSmartTCP)
StreamSmartTCP = tagStreamSmartTCP
class tagStreamSmartTCPVLAN(Structure):
    pass
tagStreamSmartTCPVLAN._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('DestinationMAC', c_ubyte * 6),
    ('SourceMAC', c_ubyte * 6),
    ('VLAN_Pri', c_ushort),
    ('VLAN_Cfi', c_ushort),
    ('VLAN_Vid', c_ushort),
    ('TypeOfService', c_ubyte),
    ('TimeToLive', c_ubyte),
    ('InitialSequenceNumber', c_ushort),
    ('DestinationIP', c_ubyte * 4),
    ('SourceIP', c_ubyte * 4),
    ('Netmask', c_ubyte * 4),
    ('Gateway', c_ubyte * 4),
    ('SourcePort', c_ushort),
    ('DestPort', c_ushort),
    ('TCPLength', c_ushort),
    ('Sequence_acc', c_ushort),
    ('PartialChecksum', c_ulong),
    ('TCPSequence', c_ulong),
    ('Window', c_ushort),
    ('Flags', c_ubyte),
    ('Spare', c_ubyte),
    ('ulARPOut', c_ulong),
    ('ulARPBack', c_ulong),
    ('ulARPGap', c_ulong),
]
assert sizeof(tagStreamSmartTCPVLAN) == 116, sizeof(tagStreamSmartTCPVLAN)
assert alignment(tagStreamSmartTCPVLAN) == 4, alignment(tagStreamSmartTCPVLAN)
StreamSmartTCPVLAN = tagStreamSmartTCPVLAN
class tagStreamICMP(Structure):
    pass
tagStreamICMP._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('DestinationMAC', c_ubyte * 6),
    ('SourceMAC', c_ubyte * 6),
    ('TypeOfService', c_ubyte),
    ('TimeToLive', c_ubyte),
    ('InitialSequenceNumber', c_ushort),
    ('DestinationIP', c_ubyte * 4),
    ('SourceIP', c_ubyte * 4),
    ('Netmask', c_ubyte * 4),
    ('Gateway', c_ubyte * 4),
    ('ucType', c_ubyte),
    ('ucCode', c_ubyte),
    ('uiIdentifier', c_ushort),
    ('extra', c_ubyte * 16),
    ('ulARPOut', c_ulong),
    ('ulARPBack', c_ulong),
    ('ulARPGap', c_ulong),
]
assert sizeof(tagStreamICMP) == 108, sizeof(tagStreamICMP)
assert alignment(tagStreamICMP) == 4, alignment(tagStreamICMP)
StreamICMP = tagStreamICMP
class tagStreamRTP(Structure):
    pass
tagStreamRTP._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('DestinationMAC', c_ubyte * 6),
    ('SourceMAC', c_ubyte * 6),
    ('TypeOfService', c_ubyte),
    ('TimeToLive', c_ubyte),
    ('InitialSequenceNumber', c_ushort),
    ('DestinationIP', c_ubyte * 4),
    ('SourceIP', c_ubyte * 4),
    ('Netmask', c_ubyte * 4),
    ('Gateway', c_ubyte * 4),
    ('UDPSrc', c_ushort),
    ('UDPDest', c_ushort),
    ('UDPLen', c_ushort),
    ('extra1', c_ubyte * 2),
    ('RTPSyncSource', c_ulong),
    ('RTPPayloadType', c_ubyte),
    ('ucUDPChecksumEnable', c_ubyte),
    ('extra2', c_ubyte * 18),
]
assert sizeof(tagStreamRTP) == 108, sizeof(tagStreamRTP)
assert alignment(tagStreamRTP) == 4, alignment(tagStreamRTP)
StreamRTP = tagStreamRTP
class tagStreamRTPVLAN(Structure):
    pass
tagStreamRTPVLAN._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('DestinationMAC', c_ubyte * 6),
    ('SourceMAC', c_ubyte * 6),
    ('TypeOfService', c_ubyte),
    ('TimeToLive', c_ubyte),
    ('InitialSequenceNumber', c_ushort),
    ('DestinationIP', c_ubyte * 4),
    ('SourceIP', c_ubyte * 4),
    ('Netmask', c_ubyte * 4),
    ('Gateway', c_ubyte * 4),
    ('UDPSrc', c_ushort),
    ('UDPDest', c_ushort),
    ('UDPLen', c_ushort),
    ('RTPSyncSource', c_ulong),
    ('RTPPayloadType', c_ubyte),
    ('VLAN_Pri', c_ushort),
    ('VLAN_Cfi', c_ushort),
    ('VLAN_Vid', c_ushort),
    ('ucUDPChecksumEnable', c_ubyte),
    ('extra', c_ubyte * 18),
]
assert sizeof(tagStreamRTPVLAN) == 116, sizeof(tagStreamRTPVLAN)
assert alignment(tagStreamRTPVLAN) == 4, alignment(tagStreamRTPVLAN)
StreamRTPVLAN = tagStreamRTPVLAN
class tagStreamIPv6(Structure):
    pass
tagStreamIPv6._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('DestinationMAC', c_ubyte * 6),
    ('SourceMAC', c_ubyte * 6),
    ('ucTrafficClass', c_ubyte),
    ('ucNextHeader', c_ubyte),
    ('ucHopLimit', c_ubyte),
    ('ulFlowLabel', c_ulong),
    ('SourceIP', c_ubyte * 16),
    ('DestinationIP', c_ubyte * 16),
    ('RouterIP', c_ubyte * 16),
    ('ucPayloadLengthError', c_ubyte),
]
assert sizeof(tagStreamIPv6) == 116, sizeof(tagStreamIPv6)
assert alignment(tagStreamIPv6) == 4, alignment(tagStreamIPv6)
StreamIPv6 = tagStreamIPv6
class tagStreamUDPIPv6(Structure):
    pass
tagStreamUDPIPv6._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('DestinationMAC', c_ubyte * 6),
    ('SourceMAC', c_ubyte * 6),
    ('ucTrafficClass', c_ubyte),
    ('ucNextHeader', c_ubyte),
    ('ucHopLimit', c_ubyte),
    ('ulFlowLabel', c_ulong),
    ('SourceIP', c_ubyte * 16),
    ('DestinationIP', c_ubyte * 16),
    ('RouterIP', c_ubyte * 16),
    ('ucPayloadLengthError', c_ubyte),
    ('UDPSrc', c_ushort),
    ('UDPDest', c_ushort),
    ('UDPLen', c_ushort),
]
assert sizeof(tagStreamUDPIPv6) == 120, sizeof(tagStreamUDPIPv6)
assert alignment(tagStreamUDPIPv6) == 4, alignment(tagStreamUDPIPv6)
StreamUDPIPv6 = tagStreamUDPIPv6
class tagStreamTCPIPv6(Structure):
    pass
tagStreamTCPIPv6._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('DestinationMAC', c_ubyte * 6),
    ('SourceMAC', c_ubyte * 6),
    ('ucTrafficClass', c_ubyte),
    ('ucNextHeader', c_ubyte),
    ('ucHopLimit', c_ubyte),
    ('ulFlowLabel', c_ulong),
    ('SourceIP', c_ubyte * 16),
    ('DestinationIP', c_ubyte * 16),
    ('RouterIP', c_ubyte * 16),
    ('ucPayloadLengthError', c_ubyte),
    ('SourcePort', c_ushort),
    ('DestPort', c_ushort),
    ('Window', c_ushort),
    ('TCPAck', c_ulong),
    ('TCPSequence', c_ulong),
    ('Flags', c_ubyte),
    ('extra', c_ubyte * 3),
]
assert sizeof(tagStreamTCPIPv6) == 132, sizeof(tagStreamTCPIPv6)
assert alignment(tagStreamTCPIPv6) == 4, alignment(tagStreamTCPIPv6)
StreamTCPIPv6 = tagStreamTCPIPv6
class tagStreamIPv6VLAN(Structure):
    pass
tagStreamIPv6VLAN._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('DestinationMAC', c_ubyte * 6),
    ('SourceMAC', c_ubyte * 6),
    ('ucTrafficClass', c_ubyte),
    ('ucNextHeader', c_ubyte),
    ('ucHopLimit', c_ubyte),
    ('ulFlowLabel', c_ulong),
    ('SourceIP', c_ubyte * 16),
    ('DestinationIP', c_ubyte * 16),
    ('RouterIP', c_ubyte * 16),
    ('ucPayloadLengthError', c_ubyte),
    ('VLAN_Pri', c_ushort),
    ('VLAN_Cfi', c_ushort),
    ('VLAN_Vid', c_ushort),
]
assert sizeof(tagStreamIPv6VLAN) == 120, sizeof(tagStreamIPv6VLAN)
assert alignment(tagStreamIPv6VLAN) == 4, alignment(tagStreamIPv6VLAN)
StreamIPv6VLAN = tagStreamIPv6VLAN
class tagStreamUDPIPv6VLAN(Structure):
    pass
tagStreamUDPIPv6VLAN._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('DestinationMAC', c_ubyte * 6),
    ('SourceMAC', c_ubyte * 6),
    ('ucTrafficClass', c_ubyte),
    ('ucNextHeader', c_ubyte),
    ('ucHopLimit', c_ubyte),
    ('ulFlowLabel', c_ulong),
    ('SourceIP', c_ubyte * 16),
    ('DestinationIP', c_ubyte * 16),
    ('RouterIP', c_ubyte * 16),
    ('ucPayloadLengthError', c_ubyte),
    ('UDPSrc', c_ushort),
    ('UDPDest', c_ushort),
    ('UDPLen', c_ushort),
    ('VLAN_Pri', c_ushort),
    ('VLAN_Cfi', c_ushort),
    ('VLAN_Vid', c_ushort),
]
assert sizeof(tagStreamUDPIPv6VLAN) == 128, sizeof(tagStreamUDPIPv6VLAN)
assert alignment(tagStreamUDPIPv6VLAN) == 4, alignment(tagStreamUDPIPv6VLAN)
StreamUDPIPv6VLAN = tagStreamUDPIPv6VLAN
class tagStreamTCPIPv6VLAN(Structure):
    pass
tagStreamTCPIPv6VLAN._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('DestinationMAC', c_ubyte * 6),
    ('SourceMAC', c_ubyte * 6),
    ('ucTrafficClass', c_ubyte),
    ('ucNextHeader', c_ubyte),
    ('ucHopLimit', c_ubyte),
    ('ulFlowLabel', c_ulong),
    ('SourceIP', c_ubyte * 16),
    ('DestinationIP', c_ubyte * 16),
    ('RouterIP', c_ubyte * 16),
    ('ucPayloadLengthError', c_ubyte),
    ('SourcePort', c_ushort),
    ('DestPort', c_ushort),
    ('Window', c_ushort),
    ('TCPAck', c_ulong),
    ('TCPSequence', c_ulong),
    ('Flags', c_ubyte),
    ('extra', c_ubyte * 3),
    ('VLAN_Pri', c_ushort),
    ('VLAN_Cfi', c_ushort),
    ('VLAN_Vid', c_ushort),
]
assert sizeof(tagStreamTCPIPv6VLAN) == 140, sizeof(tagStreamTCPIPv6VLAN)
assert alignment(tagStreamTCPIPv6VLAN) == 4, alignment(tagStreamTCPIPv6VLAN)
StreamTCPIPv6VLAN = tagStreamTCPIPv6VLAN
class tagRTPCounterInfo(Structure):
    pass
tagRTPCounterInfo._fields_ = [
    ('ulStreamNumber', c_ulong),
    ('ulFrameCount', c_ulong),
    ('ulReserved', c_ulong * 4),
]
assert sizeof(tagRTPCounterInfo) == 24, sizeof(tagRTPCounterInfo)
assert alignment(tagRTPCounterInfo) == 4, alignment(tagRTPCounterInfo)
RTPCounterInfo = tagRTPCounterInfo
class tagStreamUDPDHCP(Structure):
    pass
tagStreamUDPDHCP._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('DestinationMAC', c_ubyte * 6),
    ('SourceMAC', c_ubyte * 6),
    ('TypeOfService', c_ubyte),
    ('TimeToLive', c_ubyte),
    ('InitialSequenceNumber', c_ushort),
    ('DestinationIP', c_ubyte * 4),
    ('SourceIP', c_ubyte * 4),
    ('Netmask', c_ubyte * 4),
    ('Gateway', c_ubyte * 4),
    ('UDPSrc', c_ushort),
    ('UDPDest', c_ushort),
    ('UDPLen', c_ushort),
    ('DHCPRelayIP', c_ubyte * 4),
    ('DHCPAction', c_ubyte),
    ('DHCPState', c_ubyte),
    ('extra', c_ubyte * 6),
    ('uiActualSequenceNumber', c_ushort),
    ('ulARPStart', c_ulong),
    ('ulARPEnd', c_ulong),
    ('ulARPGap', c_ulong),
]
assert sizeof(tagStreamUDPDHCP) == 108, sizeof(tagStreamUDPDHCP)
assert alignment(tagStreamUDPDHCP) == 4, alignment(tagStreamUDPDHCP)
StreamUDPDHCP = tagStreamUDPDHCP
class tagStreamICMPVLAN(Structure):
    pass
tagStreamICMPVLAN._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('DestinationMAC', c_ubyte * 6),
    ('SourceMAC', c_ubyte * 6),
    ('TypeOfService', c_ubyte),
    ('TimeToLive', c_ubyte),
    ('InitialSequenceNumber', c_ushort),
    ('DestinationIP', c_ubyte * 4),
    ('SourceIP', c_ubyte * 4),
    ('Netmask', c_ubyte * 4),
    ('Gateway', c_ubyte * 4),
    ('VLAN_Pri', c_ushort),
    ('VLAN_Cfi', c_ushort),
    ('VLAN_Vid', c_ushort),
    ('ucType', c_ubyte),
    ('ucCode', c_ubyte),
    ('uiIdentifier', c_ushort),
    ('ulARPOut', c_ulong),
    ('ulARPBack', c_ulong),
    ('ulARPGap', c_ulong),
    ('ucReserved', c_ubyte * 24),
]
assert sizeof(tagStreamICMPVLAN) == 124, sizeof(tagStreamICMPVLAN)
assert alignment(tagStreamICMPVLAN) == 4, alignment(tagStreamICMPVLAN)
StreamICMPVLAN = tagStreamICMPVLAN
class tagStreamICMPIPv6(Structure):
    pass
tagStreamICMPIPv6._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('DestinationMAC', c_ubyte * 6),
    ('SourceMAC', c_ubyte * 6),
    ('ucTrafficClass', c_ubyte),
    ('ucNextHeader', c_ubyte),
    ('ucHopLimit', c_ubyte),
    ('ulFlowLabel', c_ulong),
    ('SourceIP', c_ubyte * 16),
    ('DestinationIP', c_ubyte * 16),
    ('RouterIP', c_ubyte * 16),
    ('ucPayloadLengthError', c_ubyte),
    ('ucType', c_ubyte),
    ('ucCode', c_ubyte),
    ('uiIdentifier', c_ushort),
    ('ucReserved', c_ubyte * 24),
]
assert sizeof(tagStreamICMPIPv6) == 144, sizeof(tagStreamICMPIPv6)
assert alignment(tagStreamICMPIPv6) == 4, alignment(tagStreamICMPIPv6)
StreamICMPIPv6 = tagStreamICMPIPv6
class tagStreamICMPIPv6VLAN(Structure):
    pass
tagStreamICMPIPv6VLAN._fields_ = [
    ('ucActive', c_ubyte),
    ('ucProtocolType', c_ubyte),
    ('ucRandomLength', c_ubyte),
    ('ucRandomData', c_ubyte),
    ('uiFrameLength', c_ushort),
    ('uiVFD1Offset', c_ushort),
    ('ucVFD1Range', c_ubyte),
    ('ucVFD1Pattern', c_ubyte),
    ('ulVFD1PatternCount', c_ulong),
    ('ucVFD1StartVal', c_ubyte * 6),
    ('uiVFD2Offset', c_ushort),
    ('ucVFD2Range', c_ubyte),
    ('ucVFD2Pattern', c_ubyte),
    ('ulVFD2PatternCount', c_ulong),
    ('ucVFD2StartVal', c_ubyte * 6),
    ('uiVFD3Offset', c_ushort),
    ('uiVFD3Range', c_ushort),
    ('ucVFD3Enable', c_ubyte),
    ('ucTagField', c_ubyte),
    ('DestinationMAC', c_ubyte * 6),
    ('SourceMAC', c_ubyte * 6),
    ('ucTrafficClass', c_ubyte),
    ('ucNextHeader', c_ubyte),
    ('ucHopLimit', c_ubyte),
    ('ulFlowLabel', c_ulong),
    ('SourceIP', c_ubyte * 16),
    ('DestinationIP', c_ubyte * 16),
    ('RouterIP', c_ubyte * 16),
    ('ucPayloadLengthError', c_ubyte),
    ('VLAN_Pri', c_ushort),
    ('VLAN_Cfi', c_ushort),
    ('VLAN_Vid', c_ushort),
    ('ucType', c_ubyte),
    ('ucCode', c_ubyte),
    ('uiIdentifier', c_ushort),
    ('ucReserved', c_ubyte * 24),
]
assert sizeof(tagStreamICMPIPv6VLAN) == 148, sizeof(tagStreamICMPIPv6VLAN)
assert alignment(tagStreamICMPIPv6VLAN) == 4, alignment(tagStreamICMPIPv6VLAN)
StreamICMPIPv6VLAN = tagStreamICMPIPv6VLAN
class tagTCPTimeInfoCount(Structure):
    pass
tagTCPTimeInfoCount._fields_ = [
    ('ulTest', c_ulong),
    ('ulRecords', c_ulong),
]
assert sizeof(tagTCPTimeInfoCount) == 8, sizeof(tagTCPTimeInfoCount)
assert alignment(tagTCPTimeInfoCount) == 4, alignment(tagTCPTimeInfoCount)
TCPTimeInfoCount = tagTCPTimeInfoCount
class tagTCPGaps(Structure):
    pass
tagTCPGaps._fields_ = [
    ('ulSYNGap', c_ulong),
    ('ulFINGap', c_ulong),
    ('ulInterframeGap', c_ulong),
    ('ulTimeInterval', c_ulong),
]
assert sizeof(tagTCPGaps) == 16, sizeof(tagTCPGaps)
assert alignment(tagTCPGaps) == 4, alignment(tagTCPGaps)
TCPGaps = tagTCPGaps
class tagTCPConnectionStatusOnly(Structure):
    pass
tagTCPConnectionStatusOnly._fields_ = [
    ('uiConnId', c_ushort),
    ('ucConnected', c_ubyte),
]
assert sizeof(tagTCPConnectionStatusOnly) == 4, sizeof(tagTCPConnectionStatusOnly)
assert alignment(tagTCPConnectionStatusOnly) == 2, alignment(tagTCPConnectionStatusOnly)
TCPConnectionStatusOnly = tagTCPConnectionStatusOnly
class tagTCPConnEventInfo(Structure):
    pass
tagTCPConnEventInfo._fields_ = [
    ('InitiatedConnections', c_ulong),
    ('ConnectionReqRecv', c_ulong),
    ('UnexpectedConnReq', c_ulong),
    ('SYNACKSent', c_ulong),
    ('ExpectedSYNACKRecv', c_ulong),
    ('UnexpectedSYNACKRecv', c_ulong),
    ('DuplicatedSYNACKRecv', c_ulong),
    ('CloseFINACKSent', c_ulong),
    ('AckFINACKSent', c_ulong),
    ('ExpectedFINACK', c_ulong),
    ('ExpectedFinalFINACK', c_ulong),
    ('UnexpectedFINACK', c_ulong),
    ('UnexpectedFINACKWaitingForAck', c_ulong),
    ('UnexpectedFINACKAfterRecvFin', c_ulong),
    ('ACKSent', c_ulong),
    ('FinalFIN_ACKSent', c_ulong),
    ('SYNACK_ACKRecv', c_ulong),
    ('FINACK_ACKRecv', c_ulong),
    ('NoConnectUnexpectedACKRecv', c_ulong),
    ('RSTRecv', c_ulong),
    ('RSTRecvForConnection', c_ulong),
    ('CurrentConnections', c_ulong),
    ('AbandonedConnections', c_ulong),
    ('NoDPResources', c_ulong),
    ('NoMoreConnectionEntries', c_ulong),
    ('NoTxResources', c_ulong),
    ('NumberOfHTTPGetRx', c_ulong),
    ('NumberOfHTTPReplyRx', c_ulong),
]
assert sizeof(tagTCPConnEventInfo) == 112, sizeof(tagTCPConnEventInfo)
assert alignment(tagTCPConnEventInfo) == 4, alignment(tagTCPConnEventInfo)
TCPConnEventInfo = tagTCPConnEventInfo
class tagTCPConnTimeInfo(Structure):
    pass
tagTCPConnTimeInfo._fields_ = [
    ('notUsed', c_ulong),
    ('NumbConnStarted', c_ulong),
    ('NumbConnCompleted', c_ulong),
    ('NumbConnCycleCompleted', c_ulong),
]
assert sizeof(tagTCPConnTimeInfo) == 16, sizeof(tagTCPConnTimeInfo)
assert alignment(tagTCPConnTimeInfo) == 4, alignment(tagTCPConnTimeInfo)
TCPConnTimeInfo = tagTCPConnTimeInfo
class tagTCPTransRateInfo(Structure):
    pass
tagTCPTransRateInfo._fields_ = [
    ('Version', c_ushort),
    ('Records', c_ushort),
    ('IpAddress', c_ulong),
    ('FirstTimeStamp', c_ulong),
    ('LastTimeStamp', c_ulong),
    ('NumberOfPackets', c_ulong),
    ('BitMask', c_ulong),
]
assert sizeof(tagTCPTransRateInfo) == 24, sizeof(tagTCPTransRateInfo)
assert alignment(tagTCPTransRateInfo) == 4, alignment(tagTCPTransRateInfo)
TCPTransRateInfo = tagTCPTransRateInfo
class tagTCPStateInfo(Structure):
    pass
class tagTCPInfo(Structure):
    pass
tagTCPStateInfo._fields_ = [
    ('link', POINTER(tagTCPInfo)),
    ('SourceIP', c_ulong),
    ('SourcePort', c_ushort),
    ('DestPort', c_ushort),
    ('DestIP', c_ulong),
    ('State', c_ubyte),
    ('Spare', c_ubyte * 3),
]
assert sizeof(tagTCPStateInfo) == 20, sizeof(tagTCPStateInfo)
assert alignment(tagTCPStateInfo) == 4, alignment(tagTCPStateInfo)
tagTCPInfo._fields_ = [
]
TCPStateInfo = tagTCPStateInfo
class tagTCPConnRequestTrigger(Structure):
    pass
tagTCPConnRequestTrigger._fields_ = [
    ('ucEnable', c_ubyte),
    ('ucDirection', c_ubyte),
    ('ucCompCombo', c_ubyte),
    ('ucReserved1', c_ubyte),
    ('uiTrig1Offset', c_ushort),
    ('uiTrig1Range', c_ushort),
    ('ucTrig1Pattern', c_ubyte * 6),
    ('ucTrig1Mask', c_ubyte * 6),
    ('uiTrig2Offset', c_ushort),
    ('uiTrig2Range', c_ushort),
    ('ucTrig2Pattern', c_ubyte * 6),
    ('ucTrig2Mask', c_ubyte * 6),
    ('ucReserved', c_ubyte * 20),
]
assert sizeof(tagTCPConnRequestTrigger) == 56, sizeof(tagTCPConnRequestTrigger)
assert alignment(tagTCPConnRequestTrigger) == 2, alignment(tagTCPConnRequestTrigger)
TCPConnRequestTrigger = tagTCPConnRequestTrigger
class tagTCPConnectRequest(Structure):
    pass
tagTCPConnectRequest._fields_ = [
    ('ulTCPConnectRequestRate', c_ulong),
    ('ulBurstCnt', c_ulong),
    ('ucBurstMode', c_ubyte),
    ('bTearDownTCPConnection', BOOL),
]
assert sizeof(tagTCPConnectRequest) == 16, sizeof(tagTCPConnectRequest)
assert alignment(tagTCPConnectRequest) == 4, alignment(tagTCPConnectRequest)
TCPConnectRequest = tagTCPConnectRequest
class tagTCPDataLogEventTx(Structure):
    pass
tagTCPDataLogEventTx._fields_ = [
    ('uiConnId', c_ushort),
    ('uiDataLen', c_ushort),
    ('uiWindowSize', c_ushort),
    ('ulSeq', c_ulong),
    ('ulAck', c_ulong),
    ('uiIpSequence', c_ushort),
    ('ucTcpFlag', c_ubyte),
    ('ucRetryCount', c_ubyte),
]
assert sizeof(tagTCPDataLogEventTx) == 20, sizeof(tagTCPDataLogEventTx)
assert alignment(tagTCPDataLogEventTx) == 4, alignment(tagTCPDataLogEventTx)
TCPDataLogEventTx = tagTCPDataLogEventTx
class tagTCPDataLogEventRx(Structure):
    pass
tagTCPDataLogEventRx._fields_ = [
    ('ulSrcIpAddress', c_ulong),
    ('uiSrcPort', c_ushort),
    ('uiDestPort', c_ushort),
    ('ulDestIpAddress', c_ulong),
    ('ulTxTimeStamp', c_ulong),
    ('ulRxTimeStamp', c_ulong),
    ('uiDataLen', c_ushort),
    ('uiWindowSize', c_ushort),
    ('ulSeq', c_ulong),
    ('ulAck', c_ulong),
    ('uiIpSequence', c_ushort),
    ('ucTtl', c_ubyte),
    ('ucTcpFlag', c_ubyte),
    ('ucFlagMask', c_ubyte),
]
assert sizeof(tagTCPDataLogEventRx) == 40, sizeof(tagTCPDataLogEventRx)
assert alignment(tagTCPDataLogEventRx) == 4, alignment(tagTCPDataLogEventRx)
TCPDataLogEventRx = tagTCPDataLogEventRx
class tagTCPDataLogEventRx2(Structure):
    pass
tagTCPDataLogEventRx2._fields_ = [
    ('uiDestPort', c_ushort),
    ('ulRxTimeStamp', c_ulong),
    ('ulTxTimeStamp', c_ulong),
    ('ulSeq', c_ulong),
    ('uiIpSequence', c_ushort),
]
assert sizeof(tagTCPDataLogEventRx2) == 20, sizeof(tagTCPDataLogEventRx2)
assert alignment(tagTCPDataLogEventRx2) == 4, alignment(tagTCPDataLogEventRx2)
TCPDataLogEventRx2 = tagTCPDataLogEventRx2
class tagTCPConnectionStatus(Structure):
    pass
tagTCPConnectionStatus._fields_ = [
    ('uiConnId', c_ushort),
    ('ulSrcIpAddress', c_ulong),
    ('uiSrcPort', c_ushort),
    ('ulDestIpAddress', c_ulong),
    ('uiDestPort', c_ushort),
    ('ulBeginSequence', c_ulong),
    ('ulLastSequence', c_ulong),
    ('ulDataStartTime', c_ulong),
    ('ulDataStopTime', c_ulong),
    ('ulMinLatency', c_ulong),
    ('ulMaxLatency', c_ulong),
    ('ulTotalLatency', c_ulong),
    ('ulPacketsTx', c_ulong),
    ('ulPacketsRx', c_ulong),
    ('ulTotalTimeouts', c_ulong),
    ('ulTotalDataRetransmits', c_ulong),
    ('ulStartTimeMS', c_ulong),
    ('ulStartTimeNS', c_ulong),
    ('ulStopTimeMS', c_ulong),
    ('ulStopTimeNS', c_ulong),
    ('ulConnectionSynNS', c_ulong),
    ('ulConnectionFinNS', c_ulong),
    ('ulNumberFragments', c_ulong),
    ('ulTtlChanges', c_ulong),
    ('ulDataOutOfOrder', c_ulong),
    ('uiAverageTxWindowSize', c_ushort),
    ('ucConnStatusMask', c_ubyte),
]
assert sizeof(tagTCPConnectionStatus) == 104, sizeof(tagTCPConnectionStatus)
assert alignment(tagTCPConnectionStatus) == 4, alignment(tagTCPConnectionStatus)
TCPConnectionStatus = tagTCPConnectionStatus
class tagTCPConnectionsInfo(Structure):
    pass
tagTCPConnectionsInfo._fields_ = [
    ('uiConnId', c_ushort),
    ('ulSrcIpAddress', c_ulong),
    ('uiSrcPort', c_ushort),
    ('ulDestIpAddress', c_ulong),
    ('uiDestPort', c_ushort),
    ('ulBeginSequence', c_ulong),
    ('ulLastSequence', c_ulong),
    ('ulDataStartTime', c_ulong),
    ('ulDataStopTime', c_ulong),
    ('ulMinLatency', c_ulong),
    ('ulMaxLatency', c_ulong),
    ('ulTotalLatency', c_ulong),
    ('ulPacketsTx', c_ulong),
    ('ulPacketsRx', c_ulong),
    ('ulTotalTimeouts', c_ulong),
    ('ulTotalDataRetransmits', c_ulong),
    ('ulStartTimeMS', c_ulong),
    ('ulStartTimeNS', c_ulong),
    ('ulStopTimeMS', c_ulong),
    ('ulStopTimeNS', c_ulong),
    ('ulConnectionSynNS', c_ulong),
    ('ulConnectionFinNS', c_ulong),
    ('ulNumberFragments', c_ulong),
    ('ulTtlChanges', c_ulong),
    ('ulDataOutOfOrder', c_ulong),
    ('uiAverageTxWindowSize', c_ushort),
    ('ucConnStatusMask', c_ubyte),
    ('ulIndex', c_ulong),
    ('ulObjLen', c_ulong),
    ('ucReserved', c_ubyte * 60),
]
assert sizeof(tagTCPConnectionsInfo) == 172, sizeof(tagTCPConnectionsInfo)
assert alignment(tagTCPConnectionsInfo) == 4, alignment(tagTCPConnectionsInfo)
TCPConnectionsInfo = tagTCPConnectionsInfo
class TCPExtendedConnEventInfo(Structure):
    pass
TCPExtendedConnEventInfo._fields_ = [
    ('ulNoCompletedHTTPSessions', c_ulong),
    ('ulNoUnexpectedPacketsRx', c_ulong),
    ('ulNoCompletedHTTPSessionsUp32', c_ulong),
    ('ulNoCompletedTCPConnections', c_ulong),
    ('ulNoCompletedTCPConnectionsUp32', c_ulong),
    ('ulNoLostTCPConnections', c_ulong),
    ('ulDroppedSYN', c_ulong),
    ('ulPacketsDroppedByHW', c_ulong),
    ('ulNoCookie', c_ulong * 20),
    ('ulTotalObjectSizeReceived', c_ulong),
    ('ulTotalObjectSizeSent', c_ulong),
    ('ulTotalTimeouts', c_ulong),
    ('ulTotalDataRetransmits', c_ulong),
    ('ulReserved', c_ulong * 98),
]
assert sizeof(TCPExtendedConnEventInfo) == 520, sizeof(TCPExtendedConnEventInfo)
assert alignment(TCPExtendedConnEventInfo) == 4, alignment(TCPExtendedConnEventInfo)
class tagARPEntry(Structure):
    pass
tagARPEntry._fields_ = [
    ('ulIpAddress', c_ulong),
    ('ucMacAddress', c_ubyte * 6),
    ('ucType', c_ubyte),
]
assert sizeof(tagARPEntry) == 12, sizeof(tagARPEntry)
assert alignment(tagARPEntry) == 4, alignment(tagARPEntry)
ARPEntry = tagARPEntry
class tagTCPSetup(Structure):
    pass
tagTCPSetup._fields_ = [
    ('ulMeAddress', c_ulong),
    ('uiMePort', c_ushort),
    ('ulHisAddress', c_ulong),
    ('uiHisPort', c_ushort),
    ('ulRouterAddress', c_ulong),
    ('uiRetransmitTimeout', c_ushort),
    ('uiSendTimeout', c_ushort),
    ('uiMss', c_ushort),
    ('ucTtl', c_ubyte),
    ('ucTos', c_ubyte),
    ('uiWindowSize', c_ushort),
    ('ulDataToSend', c_ulong),
    ('ucRetry', c_ubyte),
    ('ulFrameGap', c_ulong),
    ('ulOption1', c_ulong),
    ('ulOption2', c_ulong),
    ('ulOption3', c_ulong),
    ('ulOption4', c_ulong),
]
assert sizeof(tagTCPSetup) == 60, sizeof(tagTCPSetup)
assert alignment(tagTCPSetup) == 4, alignment(tagTCPSetup)
TCPSetup = tagTCPSetup
class tagTCPISPConnectionData(Structure):
    pass
tagTCPISPConnectionData._fields_ = [
    ('ulType', c_ulong),
    ('ulUserId', c_ulong),
    ('ulSourceAddress', c_ulong),
    ('ulVIPAddress', c_ulong),
    ('ulSourceTCPPort', c_ulong),
    ('ulDestinationAddress', c_ulong),
    ('ulDestinationPort', c_ulong),
    ('ulRouterAddress', c_ulong),
    ('ulIfg', c_ulong),
    ('ulTos', c_ulong),
    ('ulTtl', c_ulong),
    ('ulSendDataTimeout', c_ulong),
    ('ulKeepAliveTimer', c_ulong),
    ('ulWindowSize', c_ulong),
    ('ulMss', c_ulong),
    ('ulDataToSend', c_ulong),
    ('ulAckRatio', c_ulong),
    ('ulCcOptions', c_ulong),
    ('ulCcValue1', c_ulong),
    ('ulCcValue2', c_ulong),
    ('ulRetryCount', c_ulong),
    ('ulRttOptions', c_ulong),
    ('ulRttTimeout', c_ulong),
    ('ulRttAlpha', c_ulong),
    ('ulRttBeta', c_ulong),
    ('ulRttDelta', c_ulong),
    ('ulRttRho', c_ulong),
    ('ulRttEta', c_ulong),
    ('ulOptionBits1', c_ulong),
    ('ulOptionBits2', c_ulong),
    ('ulOptionBits3', c_ulong),
    ('ulOptionBits4', c_ulong),
    ('ulKeepAliveTime', c_ulong),
    ('ulDataExpected', c_ulong),
    ('ucURL', c_ubyte * 20),
    ('ucReserved', c_ubyte * 128),
]
assert sizeof(tagTCPISPConnectionData) == 284, sizeof(tagTCPISPConnectionData)
assert alignment(tagTCPISPConnectionData) == 4, alignment(tagTCPISPConnectionData)
TCPISPConnectionData = tagTCPISPConnectionData
class tagTCPConnectionHTTPConfig(Structure):
    pass
tagTCPConnectionHTTPConfig._fields_ = [
    ('ulTCPConnectionClient', c_ulong),
    ('uiHTTPMode', c_ushort),
    ('uiNoOfHTTPTransactions', c_ushort),
    ('uiHTTPUseURI', c_ushort),
    ('uiTCPCloseOptions', c_ushort),
    ('ucPersistentMode', c_ubyte),
    ('ucReserved', c_ubyte * 127),
]
assert sizeof(tagTCPConnectionHTTPConfig) == 140, sizeof(tagTCPConnectionHTTPConfig)
assert alignment(tagTCPConnectionHTTPConfig) == 4, alignment(tagTCPConnectionHTTPConfig)
TCPConnectionHTTPConfig = tagTCPConnectionHTTPConfig
class tagTCPHTTPExtendedConfig(Structure):
    pass
tagTCPHTTPExtendedConfig._fields_ = [
    ('uiExtendedTestMode', c_ushort),
    ('uiRetransmitWaitTime', c_ushort),
    ('uiConnSetupVerifyMode', c_ushort),
    ('uiConnSetupWithGet', c_ushort),
    ('uiCookieMode', c_ushort),
    ('uiDelayedAck', c_ushort),
    ('uiSimpleReqRep', c_ushort),
    ('uiKeepAlive', c_ushort),
    ('uiReserved', c_ushort * 8),
]
assert sizeof(tagTCPHTTPExtendedConfig) == 32, sizeof(tagTCPHTTPExtendedConfig)
assert alignment(tagTCPHTTPExtendedConfig) == 2, alignment(tagTCPHTTPExtendedConfig)
TCPHTTPExtendedConfig = tagTCPHTTPExtendedConfig
class tagTCPCurveTimeData(Structure):
    pass
tagTCPCurveTimeData._fields_ = [
    ('ulTime', c_ulong),
    ('ulDataSize', c_ulong),
]
assert sizeof(tagTCPCurveTimeData) == 8, sizeof(tagTCPCurveTimeData)
assert alignment(tagTCPCurveTimeData) == 4, alignment(tagTCPCurveTimeData)
TCPCurveTimeData = tagTCPCurveTimeData
class tagTCPCurveRecord(Structure):
    pass
tagTCPCurveRecord._fields_ = [
    ('ulConnId', c_ulong),
    ('ulDataPoints', c_ulong),
    ('CurveTimeData', TCPCurveTimeData * 64),
]
assert sizeof(tagTCPCurveRecord) == 520, sizeof(tagTCPCurveRecord)
assert alignment(tagTCPCurveRecord) == 4, alignment(tagTCPCurveRecord)
TCPCurveRecord = tagTCPCurveRecord
class tagTCPISPConnectionDataCurve(Structure):
    pass
tagTCPISPConnectionDataCurve._fields_ = [
    ('ulRecords', c_ulong),
    ('CurveRecords', TCPCurveRecord * 64),
]
assert sizeof(tagTCPISPConnectionDataCurve) == 33284, sizeof(tagTCPISPConnectionDataCurve)
assert alignment(tagTCPISPConnectionDataCurve) == 4, alignment(tagTCPISPConnectionDataCurve)
TCPISPConnectionDataCurve = tagTCPISPConnectionDataCurve
class tagTCPISPConnectionDataArray(Structure):
    pass
tagTCPISPConnectionDataArray._fields_ = [
    ('ucData', c_ubyte * 1024),
]
assert sizeof(tagTCPISPConnectionDataArray) == 1024, sizeof(tagTCPISPConnectionDataArray)
assert alignment(tagTCPISPConnectionDataArray) == 1, alignment(tagTCPISPConnectionDataArray)
TCPISPConnectionDataArray = tagTCPISPConnectionDataArray
class tagTCPISPReservedStructure(Structure):
    pass
tagTCPISPReservedStructure._fields_ = [
    ('ulOption1', c_ulong),
    ('ulOption2', c_ulong),
    ('ulOption3', c_ulong),
    ('ulOption4', c_ulong),
    ('ulOption5', c_ulong),
    ('ulOption6', c_ulong),
    ('ulOption7', c_ulong),
    ('ulOption8', c_ulong),
    ('ulOption9', c_ulong),
    ('ulOption10', c_ulong),
    ('ulOption11', c_ulong),
    ('ulOption12', c_ulong),
    ('ulOption13', c_ulong),
    ('ulOption14', c_ulong),
    ('ulOption15', c_ulong),
    ('ulOption16', c_ulong),
    ('ulOption17', c_ulong),
    ('ulOption18', c_ulong),
]
assert sizeof(tagTCPISPReservedStructure) == 72, sizeof(tagTCPISPReservedStructure)
assert alignment(tagTCPISPReservedStructure) == 4, alignment(tagTCPISPReservedStructure)
TCPISPReservedStructure = tagTCPISPReservedStructure
class tagTCPArpParams(Structure):
    pass
tagTCPArpParams._fields_ = [
    ('ulClearEntries', c_ulong),
    ('ulAgingTime', c_ulong),
    ('ulGetRetries', c_ulong),
    ('ulGetDelay', c_ulong),
]
assert sizeof(tagTCPArpParams) == 16, sizeof(tagTCPArpParams)
assert alignment(tagTCPArpParams) == 4, alignment(tagTCPArpParams)
TCPArpParams = tagTCPArpParams
class tagTCPArpEntry(Structure):
    pass
tagTCPArpEntry._fields_ = [
    ('ulIpAddress', c_ulong),
    ('ulMacAddr1_4', c_ulong),
    ('uiMacAddr56', c_ushort),
    ('ucType', c_ubyte),
]
assert sizeof(tagTCPArpEntry) == 12, sizeof(tagTCPArpEntry)
assert alignment(tagTCPArpEntry) == 4, alignment(tagTCPArpEntry)
TCPArpEntry = tagTCPArpEntry
class tagTCPICMPPing(Structure):
    pass
tagTCPICMPPing._fields_ = [
    ('ulDestIP', c_ulong),
    ('ulRouterIP', c_ulong),
    ('ulSourceIP', c_ulong),
    ('uiTraceRouterNumb', c_ushort),
    ('ulTraceRouterIndex', c_ulong),
]
assert sizeof(tagTCPICMPPing) == 20, sizeof(tagTCPICMPPing)
assert alignment(tagTCPICMPPing) == 4, alignment(tagTCPICMPPing)
TCPICMPPing = tagTCPICMPPing
class tagTCPInitStackMode(Structure):
    pass
tagTCPInitStackMode._fields_ = [
    ('ulRateThrottle', c_ulong),
]
assert sizeof(tagTCPInitStackMode) == 4, sizeof(tagTCPInitStackMode)
assert alignment(tagTCPInitStackMode) == 4, alignment(tagTCPInitStackMode)
TCPInitStackMode = tagTCPInitStackMode
class tagTCPConfigExt(Structure):
    pass
tagTCPConfigExt._fields_ = [
    ('ulVIP', c_ulong),
    ('ucDispatchEnable', c_ubyte),
    ('ucSMACFilterEnable', c_ubyte),
    ('uiSMACFilterValue', c_ushort),
    ('uiHTTPReplyLength', c_ushort),
    ('ucHTTPReplyCount', c_ubyte),
    ('ucReserved', c_ubyte),
    ('ulReserved1', c_ulong),
]
assert sizeof(tagTCPConfigExt) == 16, sizeof(tagTCPConfigExt)
assert alignment(tagTCPConfigExt) == 4, alignment(tagTCPConfigExt)
TCPConfigExt = tagTCPConfigExt
class tagTCPURLOne(Structure):
    pass
tagTCPURLOne._fields_ = [
    ('szURL', c_char * 8),
]
assert sizeof(tagTCPURLOne) == 8, sizeof(tagTCPURLOne)
assert alignment(tagTCPURLOne) == 1, alignment(tagTCPURLOne)
TCPURLOne = tagTCPURLOne
class tagTCPURLArray(Structure):
    pass
tagTCPURLArray._fields_ = [
    ('uiNumberOfURL', c_ushort),
    ('URL', TCPURLOne * 20),
]
assert sizeof(tagTCPURLArray) == 162, sizeof(tagTCPURLArray)
assert alignment(tagTCPURLArray) == 2, alignment(tagTCPURLArray)
TCPURLArray = tagTCPURLArray
class tagTCPURIOne(Structure):
    pass
tagTCPURIOne._fields_ = [
    ('szURI', c_char * 128),
]
assert sizeof(tagTCPURIOne) == 128, sizeof(tagTCPURIOne)
assert alignment(tagTCPURIOne) == 1, alignment(tagTCPURIOne)
TCPURIOne = tagTCPURIOne
class tagTCPURIArray(Structure):
    pass
tagTCPURIArray._fields_ = [
    ('ulNumOfURIElements', c_ulong),
    ('URI', TCPURIOne * 20),
]
assert sizeof(tagTCPURIArray) == 2564, sizeof(tagTCPURIArray)
assert alignment(tagTCPURIArray) == 4, alignment(tagTCPURIArray)
TCPURIArray = tagTCPURIArray
class tagTCPCookieOne(Structure):
    pass
tagTCPCookieOne._fields_ = [
    ('szCookie', c_char * 128),
]
assert sizeof(tagTCPCookieOne) == 128, sizeof(tagTCPCookieOne)
assert alignment(tagTCPCookieOne) == 1, alignment(tagTCPCookieOne)
TCPCookieOne = tagTCPCookieOne
class tagTCPCookieArray(Structure):
    pass
tagTCPCookieArray._fields_ = [
    ('ulNumOfCookies', c_ulong),
    ('Cookie', TCPCookieOne * 20),
]
assert sizeof(tagTCPCookieArray) == 2564, sizeof(tagTCPCookieArray)
assert alignment(tagTCPCookieArray) == 4, alignment(tagTCPCookieArray)
TCPCookieArray = tagTCPCookieArray
class tagTCPAgentOne(Structure):
    pass
tagTCPAgentOne._fields_ = [
    ('szAgent', c_char * 128),
]
assert sizeof(tagTCPAgentOne) == 128, sizeof(tagTCPAgentOne)
assert alignment(tagTCPAgentOne) == 1, alignment(tagTCPAgentOne)
TCPAgentOne = tagTCPAgentOne
class tagTCPAgentArray(Structure):
    pass
tagTCPAgentArray._fields_ = [
    ('ulNumOfAgents', c_ulong),
    ('Agent', TCPAgentOne * 20),
]
assert sizeof(tagTCPAgentArray) == 2564, sizeof(tagTCPAgentArray)
assert alignment(tagTCPAgentArray) == 4, alignment(tagTCPAgentArray)
TCPAgentArray = tagTCPAgentArray
class tagHTTPURLObjLenArray(Structure):
    pass
tagHTTPURLObjLenArray._fields_ = [
    ('ulNumOfURLObjLens', c_ulong),
    ('ulURLObjLen', c_ulong * 20),
]
assert sizeof(tagHTTPURLObjLenArray) == 84, sizeof(tagHTTPURLObjLenArray)
assert alignment(tagHTTPURLObjLenArray) == 4, alignment(tagHTTPURLObjLenArray)
HTTPURLObjLenArray = tagHTTPURLObjLenArray
class tagTCPURLDistribution(Structure):
    pass
tagTCPURLDistribution._fields_ = [
    ('szURL', c_char * 8),
    ('ulCount', c_ulong),
]
assert sizeof(tagTCPURLDistribution) == 12, sizeof(tagTCPURLDistribution)
assert alignment(tagTCPURLDistribution) == 4, alignment(tagTCPURLDistribution)
TCPURLDistribution = tagTCPURLDistribution
class tagTCPURIDistribution(Structure):
    pass
tagTCPURIDistribution._fields_ = [
    ('szURI', c_char * 128),
    ('ulCount', c_ulong),
]
assert sizeof(tagTCPURIDistribution) == 132, sizeof(tagTCPURIDistribution)
assert alignment(tagTCPURIDistribution) == 4, alignment(tagTCPURIDistribution)
TCPURIDistribution = tagTCPURIDistribution
class tagTCPSetupStream(Structure):
    pass
tagTCPSetupStream._fields_ = [
    ('ulCount', c_ulong),
    ('ulReserved', c_ulong * 8),
]
assert sizeof(tagTCPSetupStream) == 36, sizeof(tagTCPSetupStream)
assert alignment(tagTCPSetupStream) == 4, alignment(tagTCPSetupStream)
TCPSetupStream = tagTCPSetupStream
class tagTCPTestStatus(Structure):
    pass
tagTCPTestStatus._fields_ = [
    ('ulStatus', c_ulong),
    ('ulReserved', c_ulong * 4),
]
assert sizeof(tagTCPTestStatus) == 20, sizeof(tagTCPTestStatus)
assert alignment(tagTCPTestStatus) == 4, alignment(tagTCPTestStatus)
TCPTestStatus = tagTCPTestStatus
__all__ = ['ETMAXCOM', 'FR_NRZI_ENCODE', 'ETDP_F0F0',
           'ATM_E3_PLCP_LINE_CELL_RATE', 'tagNSResolveArps',
           'FC_FSPF_CONFIG', 'HUB_ACT_AS_LINK_UNIT',
           'ATM_CONN_TYPE_PVC', 'SMB_STD_ERR_COLLISION',
           'L3_DHCP_CONFIG', 'NS_CAPTURE_START', 'CT_NOT_PRESENT',
           'AT_PATH_SIGNAL_LABEL_PPP', 'tagFCCustomFrame',
           'tagL3StreamBinding', 'NSIGMPv2Info',
           'FST_PROTOCOL_PARAMETERS', 'HTLED_TX_PAUSE',
           'ATTRIB_CONNECT_BNC', 'NS_EN_RUNTIME_TOTAL_FRAMES',
           'WN_TRIG_COMP1_AND_COMP2', 'L3_AGGR_V2_LATENCY_INFO',
           'IGMPV3_FORCE_IGMPV2_LEAVES',
           'tagNSHistEnhancedLatencyOption', 'CAPTURE_LENGTH_CUSTOM',
           'CAUSE_ACCESS_INF_DISC', 'NS_PMC_FLASH_MEM_TEST_INFO',
           'TCP_CLEAR_STREAM', 'POS_LOOPBACK_MODE_LOCAL_PHY',
           'L3_USB_OFF', 'ETH_PHY_LOCAL_RECEIVER_OK', 'CM_LAN_3200',
           'PPP_CHAPMD5', 'TR_MAC_RXCONGESTED', 'FRAME_WINDOW_SIZE',
           'FR_IP_SUBNET_DEREG', 'PPP_STATUS_PPPOE_DEST_MAC',
           'ATM_DS3_SHORT_BUILDOUT', 'ATM2_TXD_FPGA_VERSION',
           'PPP_STATUS_STREAM_INDEX', 'FAMILY_SMB6000C',
           'LOGFILE_CLOSE', 'NS_DEFINE_MULTI_TCP_STREAM',
           'LOGFILE_CREATE_OVERWRITE_ON_FULL',
           'ATM_LED_STATE_SAAL_UP', 'L3_MOD_VFD', 'RESERVE_NONE',
           'ATM_DS3_E3_PLCP_YELLOW_ALARM', 'ITR_LINEERRORS',
           'LINE_UP', 'ATM_MASK', 'FCFSPFRealTimeStats', 'NO_CLOSE',
           'ATM_DS1_B8ZS_ENCODING', 'NS_PROT_RATES',
           'IPV6_EXT_DESTINATION', 'AT_VC_MODIFY',
           'ATM_CALL_PARAM_CALL_LOG_EVENTS',
           'NSHistComboPerStreamInfo', 'SSCOP_STATE_IN_RECOV_PEND',
           'DAD_FAILED', 'PHY_MODE_POS', 'Layer3DHCPHostInfo',
           'StreamRTPVLAN', 'HTSlotSharingStructure',
           'NSProtocolCounterInfo', 'ATM_SAR_IMAGE_CHECK_FAILURE',
           'ATM_B_BC_UNI40_NON_REAL_TIME_VBR_01', 'PPP_CONFIGURE_MRU',
           'ETH_WRITE_MII', 'CAPTURE_EVENTS_DATA_INTEGRITY_ERROR',
           'XENPAK_NVR_MEMORY_USED', 'IN_SVC_CONN_AS_CLIP_OR_LANE',
           'tagNSCreateHeaderInfo', 'NS_STREAM_TRANSMIT_MODE_INFO',
           'FR_LINE_SPEED_896000L',
           'NS_CAPTURE_STATUS_ALIGNMENT_ERROR',
           'NS_EN_RUNTIME_IN_SEQUENCE_INDEX', 'tagNSErrorEntry',
           'PPP_OE_GEN_ERR', 'MII_CONTROL9_1000BASE',
           'CT_DEFAULT_CAPTURE_FILTER_MODE', 'PROTOCOL_TYPE_IPUDP',
           'L3_HIST_RAW_TAGS_INFO', 'MAX_PORTS_HD', 'MPLSObjectID',
           'MULTI_USER_CONFLICT',
           'tagNSIPv6StatelessAddressCountInfo', 'TRUE', 'SPEED_2GHZ',
           'ATM_STR_STATUS_SVC_CALL_STATE', 'FR_TRIGGER',
           'L3MS_FIELD_IP_CHECKSUM_ERROR_ENABLE', 'Stream8023',
           'ATM1_BPTRG_FPGA_VERSION', 'NSTrigger',
           'FR_LINE_SPEED_4096000L', 'NS_STREAM_SCHEDULE_COUNT_INFO',
           'L3_DHCP_RELEASE_ADDRESS', 'L3_TRANSMIT_GETSTREAM',
           'TCP_GET_CONNECTIONS', 'DS3_OOF_ALARM',
           'SAAL_STATE_DISCONN_PEND', 'VG_CFG_MASTER',
           'NS_IPV4_HEADER', 'INVALID_STRUCT_SIZE',
           'NS_MULTI_IPV4_ARP_REQUESTS_RX', 'TR_PROPERTY_ENTRY',
           'ROUTER_DISCOVERY_ENABLED', 'TCPConnTimeInfo',
           'ATM_DS1_E1_EXCESS_ZEROS_ALARM', 'L3_DEFINE_TCP_STREAM',
           'ATVCCounterInfo', 'STR_ENCAP_TYPE_VC_MULTIPLEXED_PPP',
           'ATM_STR_ACTION_DISCONNECT', 'StreamUDPIPv6VLAN',
           'tagLayer3_TrackingActiveTest', 'CAPTURE_ANY',
           'ETH_PHY_AUTONEGOTIATE_ABILITY_DETECT', 'GIG_STRUC_BG1',
           'GIG_STRUC_BG2', 'FRAME_HEADER_CODE', 'tagATMStream',
           'CM_LAN_3301A', 'MLDV2_EXCLUDE_FILTER_MODE',
           'tagNSRunTimeHistStats', 'tagNSCardInfo',
           'FR_DUMP_MEM_INFO', 'WN_DS1_440_TO_660_BUILDOUT',
           'STREAM_PROTOCOL_TCP', 'L3_TX_EXCESSIVE', 'SPEED_16MHZ',
           'NSL2StatCounterInfo', 'ITR_MAC_BURSTERRORS',
           'HT_LATENCY_OFF', 'Char', 'ATTRIB_CONNECT_AUI',
           'CT_DEFAULT_CAPTURE_MODE', 'L3_MOD_IPX_STREAMS',
           'NS_MULTI_NEIGHBOR_ADVERT_RX', 'WN_DS1_E1_OOF_ALARM',
           'ITR_MAC_FREQUENCYERROR', 'NSPMCPartitionDisk',
           'tagLayer3DHCPHostInfo', 'ETMF_TXTRIG_COUNT',
           'PPP_NCP_DOWN', 'ATM_START_SETUP', 'TRFC_PCF_DAT',
           'NS_TCP_STREAM_INFO',
           'DOT1X_SUPPLICANT_CLEAR_SESSION_STATS',
           'NS_DIFF_SERV_INFO', 'tagNSIPv6ExtRouting',
           'ATM_STR_PARAM_SIG_BW_QOS', 'tagNS0AMCounterInfo',
           'tagATMUNIParams', 'CM_ST_6405', 'FR_LINE_SPEED_1536000L',
           'PPP_STATUS_PPPOE_IPV6CP_STATE', 'CM_LAN_3201B',
           'WN_PVC_CFG', 'FR_DS1_N7X5_DB_BUILDOUT',
           'NS_DECISION_USE_CALLBACK', 'ENCAP_ATM_SVC_SNAP',
           'HTLED_RXRED', 'FW_FC_SRT_FSPF_START', 'FILE_IO_ERROR',
           'ATMV_FIELD_PTI', 'FC_NAME_SERVER_QUERY',
           'NS_PHY_DEFAULT_RESTORE_ORIGINAL_VALUE', 'tagPPPStatsInfo',
           'NS_WIS_PATH_SIGNAL_LABEL_10G_ETHERNET_WAN',
           'NS_HIST_SEQUENCE_INFO', 'tagTCPCurveTimeData',
           'DOT1X_EAP_TYPE_EAPMD5', 'CAPTURE_EVENTS_ALL_FRAMES',
           'WN_FEATURES_PER_PORT_TRIGGERS',
           'NS_MOD_TCP_IPV6_STREAM_VLAN', 'GIG_RETRY_16',
           'NS_PORT_ADDRESS', 'FC_GET_ENTRY_GIVEN_PORT_TYPE_RX',
           'LASER_DISABLE', 'tagMPLSRoutingDomain', 'NS_INSERT',
           'TR_ERR_BURST', 'L3_MOD_ICMP_STREAM', 'PPP_CLOSE_LCP',
           'WN_VFD_RANDOM', 'IL3_TX_STACK', 'ATM_B_BC_CLASS_C',
           'WAN_DS1_533_TO_655_BUILDOUT', 'tagTCPICMPPing',
           'IPV6_EXT_ROUTING_TYPE_0', 'FR_MOD_SMARTBITS_STREAM',
           'COMMAND_RESPONSE_ERROR', 'TCP_INIT_STACK_MODE',
           'EnhancedCounterStructure', 'ATM_B_BC_CLASS_X',
           'tagLayer3LatencyInfo', 'PET_NERR',
           'tagMPLSAttributeObject', 'FC_LOG_LEVEL_OFF',
           'NS_HIST_V3_LATENCY_INFO', 'UChar', 'L3_CAPTURE_OFF_TYPE',
           'NS_MULTI_VLAN_PRI_1_RX',
           'L3_RECEIVE_TRACKING_ACTIVE_TEST', 'ATM_COMP1_ONLY',
           'CM_POS_3519A', 'tagNSOAMConfig',
           'tagNSDOT1XSupplicantStatusInfo', 'tagETCapturePacketInfo',
           'PORT_LINK_RESET', 'FC_DEFINE_STREAM_128', 'NSRateInfo',
           'NS_MULTI_IPV6_PING_REQUESTS_TX', 'tagTCPAgentArray',
           'Layer3CaptureCountInfo', 'WN_DS3_BUILDOUT_GT225',
           'GIG_STRUC_SS2_READBACK', 'NS_TCP_IPV6_STREAM_VLAN_INFO',
           'ATM_CALL_PARAM_MBS', 'ATMV_FIELD_MBURST_COUNT',
           'ATM_CONNECTION', 'tagLayer3GroupInfo',
           'DOT1X_SUPPLICANT_SESSION_PENDING_TO_TERMINATE',
           'NS_DHCP_V2_HOST_INFO', 'WN_CHANNEL_PHYS_CFG',
           'NS_SONET_SECTION_LOS_ALARM', 'CM_POS_6505A',
           'TCPConnectionStatusOnly', 'XFP_TRANSCEIVER_10GBASE_SR',
           'XFP_TRANSCEIVER_10GBASE_SW', 'POS_TRIGGER2_ONLY',
           'tagMPLSObjectID', 'tagFCTransmitMode',
           'NS_IPV6_STREAM_INFO', 'NS_MOD_ICMP_IPV6_STREAM',
           'NS_MLDV2_GROUP_MOD', 'NS_LOOKUP_KEY_DISCONTIGUOUS',
           'NSSetupTime', 'NS_CAPTURE_STOP', 'FRAME_HARDWARE_SIZE',
           'MPLS_LSP_DOWN', 'IL3_TX_RETRIES',
           'NS_HIST_LATENCY_OPTION', 'tagATMStreamParamsModify',
           'XENPAK_NVR_CUSTOMER_FIELD_ADDRESS',
           'NS_CT_CAPTURE_FRAME_COUNT_INFO', 'ATTRIB_CONNECT_TP',
           'MII_REGISTER_AN_EXPANSION', 'FR_CARD_VERSION_INFO',
           'PROTOCOL_TYPE_IPX', 'NS_SET_ARP_GAP',
           'NSHalfDuplexCounterInfo', 'NS_PROTOCOL_HEADER_INFO',
           'AFSIG_RESTART_PROCEEDING', 'FC_DEVICE_LOGIN_STATE',
           'ATMConnectionModifyArray', 'NS_WIS_PATH_FERF_ALARM',
           'L3_ARP_ONE_STREAM', 'MPLS_LSP_SIGNALING', 'NS_ATM_HEADER',
           'CALL_STATE_ACTIVE', 'L3_STREAM_SMARTBITS',
           'NS_DEFINE_MULTI_UDP_STREAM', 'CAUSE_NO_ROUTE_TO_DEST',
           'ATM_STREAM_TRIGGER_INFO', 'ATMELANRegister',
           'L3_AGGR_LATENCY_INFO', 'CONN_STATE_IDLE',
           'UNI_DEFAULT_TMR_T303', 'L3_CAPTURE_PACKET_DATA_INFO',
           'SYNC_INOUT_SLAVE', 'UNI_DEFAULT_TMR_T308', 'TCP_FLAG_FIN',
           'FR_ARP_STREAM_INFO', 'PAT_FFFF', 'L3_CAPTURE_STATUS_VLAN',
           'IP_DEC_SRC_IP_AND_DST_IP', 'FW_FC_FS_CONFIG_GROUP_INFO',
           'MAX_MAX_PORTS', 'IP_INC_SRC_IP_DST_IP',
           'ATMPerConnBurstCount',
           'ETH_PHY_AUTONEGOTIATE_LINK_GOOD_CHECK',
           'NSQuerySubprocess', 'WAN_DS1_133_TO_266_BUILDOUT',
           'NS_MULTI_RX_JUMBO', 'L3_STREAM_UDPDHCP', 'NS_VFD2',
           'NS_VFD1', 'L3_MOD_UDP_IPV6_STREAM_VLAN', 'QUEUE_DISABLE',
           'TR_DUPLEX_FULL', 'WN_LMI_CFG',
           'MII_CTRL_RESTARTAUTONEGOTIATE', 'WN_HIST_RESET_CFG',
           'tagLayer3TagInfo', 'StreamIPVLAN', 'NS_DHCP_STATE',
           'MII_CTRL_RESET', 'CM_POS_3505A', 'CM_LAN_6101',
           'CM_LAN_6100', 'UNSUPPORTED_COMMAND',
           'NS_HIST_LATENCY_INFO', 'XFP_CONNECTOR_SC',
           'NS_UDPDHCP_STREAM_INFO', 'XFP_CONNECTOR_SG',
           'TCP_CONN_EVENT_INFO', 'NS_DOT1X_SUPPLICANT_PORT_CONFIG',
           'L3_HIST_LATENCY_PER_STREAM_32', 'tagNSUDPHeader',
           'MAX_VFD_SIZE', 'MILLI_SCALE', 'ATM_CORRECT_ERRORED_CELLS',
           'CM_ML_5710A', 'L3_HIST_LATENCY_PRECISION',
           'WN_STREAM_FILL_CFG', 'WN_T1E1_LINE_COPY_CFG',
           'ETBNC_10MHZ', 'WNDS3LineCfg', 'Layer3DHCPConfig',
           'ATM_OC12_LINE_CELL_RATE', 'BURST_ENABLE',
           'FIRST_TRANSMIT_MODE', 'GIG_STATUS_CAPTURE_STOPPED',
           'CAUSE_INV_EP_REF', 'PPP_SET_CONFIG',
           'POS_LOOPBACK_MODE_REMOTE_PHY', 'AT_ENCAP_TYPE_NULL',
           'NS_IGMP_CONFIG', 'HTLED_FRAME_CAPTURE', 'WN_CAPTURE_CFG',
           'SPEED_25MHZ', 'ETH_PHY_AUTONEGOTIATE_NEED_PAGE_WAIT',
           'XENPAKPhyConfig', 'GIG_MAX_CAPTURE_FRAMES',
           'SYBOLIC_NODE_NAME_NOT_REGISTERED', 'CAPTURE_ALL',
           'CAPTURE_LENGTH_1ST_128_BYTES',
           'ETH_PHY_CARRIER_EXTENSION_ERROR', 'DS3_LOCD_ALARM',
           'LCP_UP', 'tagETHCounterInfo', 'WNPVCDel',
           'PVC_UNKNOWN_STATUS', 'FRAME_PROTOCOL_UDP',
           'L3MS_FIELD_FC_SRC_WWN', 'L3_FRAMEERROR',
           'DS3_YELLOW_ALARM', 'ETH_EXTENDED_CARD_INFO',
           'TR_ERR_ABORT_DELIMITER', 'ATM_ELAN_MTU_4544',
           'CAUSE_UNASSIGNED_NUM', 'FR_MOD_PVC',
           'FW_FC_SRT_FSPF_SHUTDOWN', 'CONTROLLER_SMB6000C',
           'PMC_VPN', 'L3_HIST_TEST_V1_LATENCY_PER_STREAM',
           'ATM_CORRECTEDHEADERS',
           'MPLS_RSVP_REFRESH_REDUCTION_CAPABLE',
           'XFP_TRANSCEIVER_OC_48_IR',
           'FR_HIST_LATENCY_PER_STREAM_INFO', 'TCPArpParams',
           'SONET_SECTION_BIP8_ERRORS', 'NS_FILL_PATTERN',
           'ATM_B_BC_TYPE_CBR', 'FRAME_HARDWARE_TYPE',
           'NS_SONET_PATH_AIS_ALARM', 'WNDS3LineInfo',
           'tagWNTriggerCtrl', 'WN_TRIG_COMP1_OR_COMP2',
           'DOT1X_SESSION_CONTROL_EVEN_BURST', 'tagStreamICMPVLAN',
           'CAPTURE_ENTIRE_PACKET', 'PVC_END2END_DOWN_STATUS',
           'TCPCurveTimeData', 'tagNSIGMPv3Config', 'WN_VFD_STATIC',
           'tagTCPISPConnectionData', 'NS_RTP_COUNTER_INFO',
           'ATM_MAX_CALL_SETUP_PARAMS',
           'ATM_B_BC_UNI40_REAL_TIME_VBR_01',
           'FR_DEFINE_MULTI_IPX_STREAM', 'PPP_OE_SESSION_STOP',
           'DOT1X_TTLS_PHASE2_CHAP', 'tagFRLmiInfo',
           'FRAME_HEADER_TYPE', 'FR_E1_120_OHM_NORMAL',
           'SIG_TRACE_STOP_ON_SEVERE_ERROR', 'ATM_LED_STATE_ILMI_UP',
           'tagFRPvcMainInfo', 'L3_USB_MODE_CMD',
           'L3_MOD_SMART_TCP_STREAMS', 'L3_CAPTURE_SPECIAL_TYPE',
           'ATM1_BT8222_VERSION', 'NSGetVFDInfo',
           'NSDOT1XSupplicantModify', 'L3_DISABLE_TAG',
           'FC_MULTI_SWITCH_CONFIG_INFO',
           'NS_LINK_FAULT_COUNTER_RESET', 'GIG_STRUC_CARD_INFO',
           'ATM_CONN_INFO', 'ETH_PHY_LINK_UP', 'FRAME_DST_IP_ADDR',
           'FR_ARP_TIMES_INFO', 'CAUSE_USER_BUSY',
           'tagNSHalfDuplexCounterInfo', 'WN_LMI_FILL_CFG',
           'tagNSPMCFlashInfo', 'ATM_SONET_TIMEOUT',
           'Layer3StreamMulticastInfo', 'Layer3LatencyInfo',
           'L3_USB_PORT_LINKED', 'DS3_LOS_ALARM', 'FRAME_SEQUENCE',
           'ILMI_DEFAULT_TMR_COLD_START', 'tagFRPVCStatusInfo',
           'STR_CONN_TYPE_SVC', 'tagATMILMIInfo', 'tagATMLineParams',
           'tagATMExtVCCIStatus', 'XFP_CDR_LOOPBACK_MODE_SUPPORTED',
           'tagLayer3MulticastCounters', 'LOGFILE_SIZE_8192',
           'tagNSRealTimeTrackingConfig',
           'ATM_PROTOCOL_TRACE_CONTROL', 'FC_LINK_COST_5000',
           'tagATMPerPortBurstCount', 'NS_WIS_INJECT_LINE_AIS_ALARM',
           'SINGLE_BURST_MODE', 'L3_STREAM_TRANSMIT_MODE',
           'AT_PORT_RX_CT_BUFFER_SIZE', 'POSCardSetSpeed',
           'L3_MOD_TCP_STREAMS_VLAN', 'NS_MOD_TCP_STREAMS_VLAN',
           'L3_DHCP_STATE_SELECTING', 'XFP_TRANSCEIVER_L_64_1',
           'MPLSRSVPCountInfo', 'TCP_LISTEN_ONE',
           'tagRealTimeCounters', 'FRAME_PROTOCOL_SIZE',
           'tagNSCTCaptureFrameCountInfo', 'FR_LINK_INFO',
           'NS_PMC_HIFN_MEM_TEST_INFO', 'L2StatsInfo',
           'L3_DHCP_ACTION_RELEASE', 'PPP_CONFIG',
           'ATMSigEmulatorInfo', 'MAX_PHEADER_LEN', 'CA_CONNECT_AUI',
           'NS_STREAM_EXTENSION_INFO', 'NS_DESTROY_SUBPROCESS',
           'GIG_TRIGGER1_ONLY', 'tagATMSAALInfo',
           'IGMPGroupAddressBlock', 'tagWNLMIInfo',
           'NS_MULTI_TX_TRIGGER',
           'L3_HIST_V1_LATENCY_PER_STREAM_INFO', 'NS_USB_SET_POWER',
           'SOURCE_ADDRESS_LINK_LOCAL_UNICAST', 'tagNSL2StatRateInfo',
           'MAX_PROTOCOL_TYPES', 'tagLayer3StreamLatencyInfo',
           'FCLinkDown', 'CT_UNKNOWN', 'NS_DIFF_SERV_V2_CONFIG',
           'BANDWIDTH_EXCEEDED_ERROR', 'FR_UNI_DTE',
           'FR_DS1_N22X5_DB_BUILDOUT', 'L3MS_FIELD_DMAC_BYTE01',
           'FC_PLOGI', 'CM_AT_9025', 'NSStreamScheduleEntry',
           'CM_AT_9020', 'NS_BASE_NUM', 'VCDB_STATE_NEW',
           'L3_DEFINE_MULTI_TCP_STREAM', 'ATM_CLASSICAL_IP_INFO',
           'XENPAKAlarmStatus', 'PAT_AAAA', 'CAUSE_RSP_TO_STATUS_ENQ',
           'ATM_OUT_OF_SEQUENCE', 'L3_DEFINE_UDP_STREAM_VLAN',
           'L3MS_FIELD_CRC_ERROR_ENABLE', 'tagATMPVCADResponse',
           'ATM_DS1_N15_DB_BUILDOUT', 'MPLS_LSP_CREATE',
           'TR_TOKEN_EARLY_RELEASE', 'IP_DEC_SRC_IP_DST_IP',
           'ENCAP_ATM_PVC', 'FRAME_PROTOCOL_ICMP',
           'XENPAK_TX_ALARM_LASER_TEMPERATURE_FAULT_ENABLE',
           'NS_MULTI_TX_LATENCY', 'L3_CAPTURE_SETUP',
           'NSIGMPv3Config', 'POS_TRIGGER1_OR_TRIGGER2',
           'IATM_CELL_LOSS_RATIO',
           'L3_HIST_MC_LATENCY_PER_STREAM_INFO',
           'NS_RUNTIME_HIST_STATS_CONFIG',
           'SSCOP_STATE_CC_RESYNC_PEND', 'PPPParamsModify',
           'UNI_DEFAULT_TMR_T322', 'tagNSIPv6ExtESPHeader',
           'COS3_UNSUPPORTED', 'NS_IPV6_STREAM_VLAN_INFO',
           'L3_DHCP_STATE_RENEWING', 'CT_FILTER_MODE_NONE',
           'PET_SIG_TMR_ACTIVITY', 'PPP_RESET', 'ATM_RATE_CLASS_ABR',
           'FR_DEFINE_ARP_STREAM', 'ITR_CLAIMEVENTS',
           'NSMPLSHeaderList', 'FR_TRIG_COMP2_ONLY',
           'FC_STATE_CHNG_REQUEST', 'NSWISConfig',
           'L3_HIST_TEST_SEQUENCE', 'NS_DHCP_STATS_INFO',
           'FSTCaptureDataInfo', 'XENPAK_NVR_VENDOR_MONTH_CODE',
           'INTEROP_NO_ESC', 'NS_MOD_IPV6_EXT_HOP_BY_HOP',
           'ATM_LED_STATE_ILMI_AND_SAAL_UP', 'TCP_FLAG_ACK',
           'TCP_TEAR_DOWN', 'NS_HIST_START', 'FRAME_FLAG_CRC32_ERROR',
           'FR_DS1_E1_OOF_ALARM', 'MAX_HUBS_SMB200',
           'tagATMVCDBClearFlagReq', 'PORT_LINK_UP',
           'RXLED_UNDERSIZEB', 'RXLED_UNDERSIZEA',
           'NS_MULTI_NEIGHBOR_SOLICITATION_RX',
           'ATM_ELAN_MAX_CONTROL_TIMEOUT', 'L3_HIST_SEQUENCE_PREP',
           'ETH_PROTOCOL_GENERATE_PING', 'ETLNM_OFF',
           'ETH_PHY_REMOTE_RECEIVER_OK', 'STREAM_PROTOCOL_SMARTBITS',
           'MAX_TFOM_LIMIT', 'WN_LMI_DEL_ALL',
           'ATM_CALL_PARAM_CALL_LENGTH_TYPE',
           'tagNSCommitStreamConfig', 'NSMLDv2GroupMod',
           'MPLS_LSP_DELETE_ALL', 'NS_GET_SUBSCRIPTION',
           'FAMILY_ET1000', 'L3MS_FIELD_STREAM_FRAME_RATE',
           'PORT_NAME_SERVER_ERROR', 'FR_DEBUG_SCREEN_INFO',
           'TOPOLOGY_PT_2_PT', 'WN_TRIGGER_DEL',
           'IP_INC_SRC_MAC_AND_DST_MAC',
           'NS_MULTI_VLAN_PRIORITY_COUNTERS', 'NS_WRITE_SUBPROCESS',
           'FR_FILL_PATTERN', 'STREAM_PROTOCOL_BRIDGED', 'PET_RCTRL',
           'FRAME_SRC_IP_ADDR', 'NS_MOD_IP_STREAMS_VLAN',
           'ATM_QOS_CLASS_0', 'ATM_QOS_CLASS_3', 'ATM_QOS_CLASS_2',
           'NSIPv6Config', 'ATM_QOS_CLASS_4', 'MII_CTRL_LOOPBACK',
           'SAAL_STATE_CONNECTED', 'NS_DIFF_SERV_V2_COUNTER_INFO',
           'L3_CAPTURE_DETAIL_INFO', 'GIG_STRUC_COUNTER_INFO',
           'XENPAK_NVR_BIT_RATE', 'MII_STATUS_JABBER_DETECT',
           'L3ModifyStreamArray', 'NS_MULTI_RX_TIMESTAMP',
           'CALL_STATE_CALL_INITIATED', 'ATM_LED_STATE_MASK',
           'NS_IPV6_IPV4_TRANSLATION', 'FC_4_TYPES_NOT_REGISTERED',
           'NS_DEFINE_MULTI_IPV6_STREAM', 'NCP_CONFIG_FAILURE',
           'GIG_STRUC_SET_PORT_INTO_GROUP', 'ET_OFF',
           'tagNSMulticastKeepAliveConfig', 'NSMPLSList',
           'FRAME_RESERVED', 'ISMB_VG_TRANSTRAIN_PKT',
           'FRMemoryDumpInfo', 'tagNSDOT1XSupplicantStatsInfo',
           'NS_MLD_COUNTER_INFO', 'GIGAltTransmit', 'IPSubnetReg',
           'PVCAD_INACTIVE', 'FC_MAX_NUM_DEST_SWITCHES',
           'HIST_LAT_STREAM32', 'POS_SONET_PAYLOAD_TYPE_PPP',
           'tagATMSigTraceParams', 'FCLOG_Out',
           'UNI_VERSION_3_0_USER', 'LCP_CLOSE_AUTH_FAILURE_NO_RSP',
           'AT_PORT_CONFIG_INFO', 'tagNSCaptureSetup',
           'FLOWCONTROL_DISABLED', 'L3_STREAM_UDP',
           'FR_RFC1490_MAX_TYPE', 'GIG_CONTINUOUS_MODE', 'HVFD_3',
           'HVFD_2', 'HVFD_1', 'NANO_SCALE', 'L3MS_FIELD_VLANTAG',
           'ATM_CONN_TRIGGER_INFO', 'NS_DEFINE_MULTI_TCP_STREAM_VLAN',
           'XENPAK_PROFILE_INFO', 'tagWNChannelInfo',
           'tagTCPConfigExt', 'DIFFSERV_IPV4_COUNTERS',
           'NSIPv6NextHopResultInfo', 'FST_CAPTURE_STATUS_TRIGGER',
           'CAPTURE_EVENTS_IP_OPTION', 'Layer3HistTagInfo',
           'ETBNC_RXTRIG', 'NS_HIST_EN_MIN_LATENCY',
           'FAMILY_SMB6000C_NTS5000A', 'NS_DEFINE_STREAM_MPLS',
           'FRAME_REC_MAC_ADDR', 'IP_INC_SRC_MAC',
           'ATM_DS1_0_TO_133_BUILDOUT', 'NS_WIS_LINE_STATUS_RESET',
           'DOT1X_SUPPLICANT_FAILURE_EAP_ID_REJECTED',
           'ATM_E1_CELL_FRAMING', 'tagTCPAgentOne', 'GIG_STATUS_LINK',
           'NSEnhancedRunTimeHistStats', 'L3_MOD_V2_STREAMS_ARRAY',
           'NS_PHY_DEFAULT_SPEED_1GHZ',
           'NS_HIST_MULTICAST_LATENCY_PER_STREAM_INFO',
           'NS_CAPTURE_ALL_TYPE', 'PPP_OE_OFFER_AVAILABLE_SERVICE',
           'XENPAK_L_64_2B', 'XENPAK_L_64_2C', 'XENPAK_L_64_2A',
           'tagNSGREHeader', 'XFP_CONNECTOR_LC', 'ETH_COUNTER_INFO',
           'FRAME_FLAGS', 'WN_STREAM_DEL', 'PVC_LOCAL_DOWN_STATUS',
           'ATM_TD_ABR', 'tagATMSigEmulTeardown', 'XFP_OPTIONAL_VPS',
           'XENPAK_NVR_VENDOR_REVISION',
           'CT_FILTER_OPERATOR_PAT1_AND_PAT2',
           'SIG_TRACE_STOP_ON_TRACE_BUFFER_FULL',
           'NSRealTimeTrackingConfig', 'NS_DEFINE_MULTI_ICMP_STREAM',
           'NS_CT_DISABLE_PROCESS', 'PPP_OE_SESSION_STATE',
           'ATMConnTriggerInfo', 'MPLS_LSP_INITIALIZED',
           'ATM_VCDB_PURGE', 'L3MS_FIELD_CUSTOM_STREAM_ID',
           'CALL_STATE_INCOMING_CALL_PROC', 'FR_CAPTURE_COUNT_INFO',
           'NS_DEFINE_MULTI_IPV6_STREAM_VLAN', 'CX4_MODULE_10GBASE',
           'tagTCPURIOne', 'NSCaptureDataInfo',
           'tagMPLSLabelDataInfo', 'XFP_IDENTIFIER_XENPAK',
           'AT_VC_DELETE', 'CONN_STATE_INITIAL_DELAY', 'NS_HW_CONFIG',
           'L3_MOD_UDP_STREAM_VLAN', 'NS_DIFF_SERV_CONFIG_INFO',
           'TCPAgentArray', 'NS_TRACK_TOTAL_LAT',
           'PORT_MAPPING_COMPATIBLE', 'ATM_DS3_E3_FERF_ALARM',
           'NS_VERSION_RELEASED', 'NS_MULTI_RX_SIGNATURE_MPLS_FRAMES',
           'XFP_CONNECTOR_HSSDC_II', 'OPTION_LENGTH_IS_ZERO',
           'tagNSPMCPartitionDisk', 'L3MS_FIELD_ATM_FLAGS',
           'FC_GET_ENTRY_GIVEN_IP_ADDRESS_TX',
           'STREAM_PROTOCOL_TCP_IPV6', 'FC_RECV_CUSTOM',
           'tagFCNameServerEventConfig', 'SIG_EVENT_INCOMING_RELEASE',
           'TR_SPEED_16MBITS', 'tagNSCTStorageFile',
           'NS_MULTI_VLAN_PRI_3_RX', 'FR_NON_GROUP_CMD',
           'GIG_PHY_LOOP_REMOTE_PHY', 'L3_MOD_SMART_TCP_STREAM',
           'CLIENT_CLOSE_4WAY', 'NS_MOD_STREAMS_DELTA',
           'ATTRIB_CAN_CAPTURE', 'AFSIG_RESTART_FAIL', 'WNTriggerCfg',
           'ATPortCLIPCounterInfo', 'tagATPortCounterInfo',
           'tagATMPETEntryRtvl', 'DOT1X_SUPPLICANT_FILL_RIGHT',
           'L3_SET_DEFINESTREAMS', 'FCGetRPN_ID', 'NSPortAddress',
           'tagTCPArpEntry', 'NSRealTimeTrackingCounters',
           'ATMCardInfo', 'SERVICE_PARM_INIT_CTRL',
           'PPP_LOCAL_AUTH_PW', 'NSStreamMultiConfigInfo',
           'NS_VFD_INCR', 'CM_AT_9045', 'PPP_OE_STARTED',
           'CALL_STATE_IDLE', 'FRAME_SNAP_PROTOCOL_ID',
           'NS_TX_SIGNATURE_STOP', 'SYNC_GPS_MASTER_AND_INOUT_SLAVE',
           'ATM_SAR_BOOT_FAILURE', 'FR_CARD_NET',
           'XFP_IDENTIFIER_MODULE_SOLDERED',
           'DOT1X_SUPPLICANT_SEND_EAP_START', 'tagGIGMacConfig',
           'tagFCGetCOS_ID', 'tagNSCTCaptureFrameInfo',
           'FR_AGGR_LATENCY_PER_STREAM_INFO', 'NSIGMPCounterInfo',
           'GIGAutoFiberNegotiate', 'NS_DEFINE_MULTI_802_3_STREAM',
           'ETHQoSCounterInfo', 'tagFRReleaseCaptureFrameInfo',
           'ATM_ILMI_STATIC_REGISTER', 'tagNSMLDCounterInfo',
           'ETCOM4', 'NS_SMARTBITS_STREAM_INFO', 'ETCOM6', 'ETCOM7',
           'tagXENPAKAlarmStatus', 'ETCOM1', 'ETCOM2', 'ETCOM3',
           'STREAM_PROTOCOL_LLC_BRIDGED', 'ETCOM8',
           'tagXENPAKPhyConfig', 'PPP_NCPS_ACKSENT',
           'CaptureStructure', 'NS_MULTI_MPLS_COUNTERS',
           'ATM_CELL_TIME_FRAC', 'tagNSPortAddress',
           'CAPTURE_LENGTH_1ST_64_BYTES', 'PPP_MOD_DESTIPV6',
           'ATMIncomingSVCMethod', 'ATM_B_BC_CLASS_VP',
           'L3MS_FIELD_SIP', 'ATMDS3E3LineInfo',
           'L3MS_FIELD_TRAFFIC_CLASS',
           'DOT1X_SUPPLICANT_REAUTHENTICATE', 'Layer3LongLatencyInfo',
           'FR_IPX_STREAM_INFO', 'tagMPLSStart',
           'TCP_HIST_ACTIVE_TEST_INFO', 'tagStreamFC128',
           'NSIGMPv3GroupConfig', 'XENPAKNVRConfig',
           'FR_HIST_SEQUENCE_INFO', 'VCDB_STATE_STABLE',
           'DOT1X_SUPPLICANT_CONNECTING',
           'ATM_CALL_PARAM_INTER_BURST_GAP', 'FST_MAX_CAPTURE_FRAMES',
           'IL3_RX_TAGS', 'L3_DHCP_CONFIG_INFO', 'ITR_MAC_ACERRORS',
           'FR_UNI_DOWN', 'NS_STREAM_TRANSMIT_MODE', 'tagNSDiffServ',
           'ATM_CALL_LENGTH_FOREVER', 'CT_VG',
           'FC_PUBLIC_DISCOVERY_STATE', 'PPP_DELETE',
           'NS_MPLS_HEADER', 'L3_DEFINE_MULTI_RTP_STREAM_VLAN',
           'SONET_PATH_YELLOW_ALARM', 'TCP_DISABLE_DATA_SEND',
           'ATMStreamSearchInfo', 'AT_PATH_SIGNAL_LABEL_HDLC',
           'CT_FILTER_PROTOCOL_ID_ICMP', 'NSCTStorageFile',
           'SMB_STD_TXTRIGGER', 'NS_SIGNATURE_DETECT_MODE',
           'NS_TX_ADDRESS_INFO', 'MAX_NTP_PEERS', 'NS_WAIT_TIMEOUT',
           'StreamTCPIPv6VLAN', 'WNDS3LineCtrl', 'MPLSOpaqueObject',
           'FR_STATUS_EIA_TM', 'NSNTPStatusInfo', 'ETH_VLAN_PRI_6',
           'ETH_VLAN_PRI_7', 'ETH_ENHANCED_STATUS_INFO',
           'ETH_VLAN_PRI_5', 'ETH_VLAN_PRI_2', 'ETH_VLAN_PRI_3',
           'ETH_VLAN_PRI_0', 'ETH_VLAN_PRI_1',
           'STREAM_PROTOCOL_ICMP_IPV6_VLAN', 'FRAME_DST_MAC_ADDR',
           'NS_LOOP_TIMED_CLOCK', 'AT_RATE_CLASS_CBR',
           'ATM1_GAP_FPGA_VERSION', 'FR_HIST_V2_LATENCY',
           'ATM_ELAN_MTU_18190', 'COMM_PORT', 'NSCaptureStatsInfo',
           'MII_STATUS_AN_COMPLETE', 'WN_CHANNEL_ATTRIB_CFG',
           'NS_IGMPV3_STATS_INFO', 'NSReportErrorList',
           'ATTRIB_BUILT_IN_ADDRESS', 'NS_DEFINE_TCP_STREAM_VLAN',
           'SMB_STD_RXTRIGGER', 'NS_MOD_MPLS',
           'ETH_VLAN_CFI_RIF_ABSENT', 'PPP_STATUS_FAILURE_CODE',
           'PET_MSG', 'L3_STREAM_IP_VLAN', 'NS_MULTI_IPV6_COUNTERS',
           'ETBNC_COLLISIONA', 'ERROR_SMARTCARD_INIT_FAILED',
           'ETBNC_COLLISIONB', 'PAT_RAND', 'WN_LOOPBACK_LOCAL_PHY',
           'XENPAK_UNSPECIFIED_TYPE', 'NS_LAT_SCALE_100_NANOSECOND',
           'HTTRIGGER_2', 'HTTRIGGER_1', 'NSARPConfig',
           'TokenRingAdvancedStructure', 'PPP_CLEAR_SESSION_STATS',
           'PPP_OE_MOD_FRAME', 'FR_ENABLE_PORT', 'NS_RATES_MODE',
           'FR_LMI_INFO', 'L3_START_ARPS', 'ETREMOTEMODE',
           'FR_TX_CONTINUOUS', 'L3_IGMP_RESET', 'PPP_MOD_SRCIPV6',
           'tagETHLink', 'WN_DS3_FRMR_STATUS_RED',
           'NS_CAPTURE_STATS_INFO', 'MII_REGISTER_CONTROL',
           'L3MS_FIELD_STREAM_SIGNATURE', 'NSIPXHeader',
           'ATM_B_BC_NOT_SUSC_CLIP', 'L3MS_FIELD_SIPD',
           'L3MS_FIELD_SIPB', 'L3MS_FIELD_SIPC',
           'NS_MULTI_IPV4_COUNTERS', 'ATM_MAX_MOD_DATA',
           'LOGFILE_SIZE_12288', 'L3MS_FIELD_RTP_PT',
           'WAN_DS1_E1_PLCP_OOF_ALARM', 'POS_READ_SPEED',
           'GIG_STRUC_RATE_INFO', 'WAN_DS1_N7X5_DB_BUILDOUT',
           'SERIAL_PORT_DATA', 'MAX_URI_LEN', 'FCFlogi',
           'TR_TOKEN_RT', 'PPP_OE_CLIENT', 'MII_STATUS_10_HALF',
           'FR_CLK_RISING_EDGE', 'PPP_STATUS_PPPOE_SESSIONID',
           'NS_DEFINE_MULTI_STREAM_BINDING', 'NO_REASON_CODE',
           'WN_FEATURES_PROTOCOL_TRACE', 'ATM_ARP_CONN_RELEASED',
           'CA_BUILT_IN_ADDRESS', 'WAN_DS1_E1_LOCD_ALARM',
           'FAST7410_STATUS_TX_PAUSE', 'NS_MLD_ALL_GROUP_INFO',
           'NS_DIFF_SERV_CONFIG', 'DIFFSERV_IPV6_COUNTERS',
           'FLOWCONTROL_ENABLED', 'PPP_OE_DESTMAC',
           'DIFFSERV_OFFSET_FROM_IPV4_HEADER',
           'L3_DEFINE_UDP_IPV6_STREAM_VLAN', 'XAUI_PRBS_CONFIG_INFO',
           'tagStreamUDPIPv6', 'NS_CAPTURE_PACKET_DATA_INFO',
           'TR_STATUS_EARLY_TOKEN_RELEASE', 'tagS8', 'ATM_TD_NONE',
           'NSHistLatencyOverTimeInfo', 'INVALID_SYNC_CONFIGURATION',
           'PPP_STATUS_MIN_OUR_IPV4_ADDR', 'NSHalfDuplexRateInfo',
           'GIG_CONTROL_IP_CHECKSUM_INHIBIT', 'FC_FSPF_STATS_CONFIG',
           'ATM1_MAIN_FW_VERSION', 'tagNSPMCDiskInfo',
           'ATM_STR_PARAM_SIG_BW_SCR_01', 'HTTRIGGER_INDEPENDENT',
           'L3_RECEIVE_TRACKING_32_LATENCYPERSTREAM',
           'NSHistLatencyDistPerStream', 'ETMF_TXTRIG_RATE',
           'POS_FRAMING_MODE_SONET', 'FR_VFD_OFF',
           'ATM_STR_PARAM_DEST_MAC_ADDR', 'HTECHO_ON',
           'TRFC_PCF_RINGPURGE', 'ATM_CALL_PARAM_CALL_STOP_ON_ERROR',
           'MPLS_ATTRIBUTE_OBJECT', 'NS_CAPTURE_STATUS_TRIGGER',
           'FR_STREAM_DELETE_ALL', 'WN_T1E1_LINE_CTRL',
           'SONET_SECTION_LOS_ALARM', 'COLLISION_ADJ',
           'FC_NODE_CONFIG', 'FC_GET_ENTRY_GIVEN_PORT_TYPE_TX',
           'tagTCPISPConnectionDataArray', 'tagNSVLANHeaderList',
           'STR_ENCAP_TYPE_LANE_802_3', 'L3_DHCP_PORT_COUNTER_INFO',
           'STR_ENCAP_TYPE_LANE_802_5', 'ATM_MAX_ELAN_NAME',
           'FR_HIST_LATENCY_PER_STREAM', 'tagNSLinkFaultInfo',
           'HVFD_STATIC', 'GIG_STRUC_MEMORY_WRITE',
           'FR_LINE_SPEED_1920000L', 'HBA_READY_TO_TEST',
           'CM_LAN_3311A', 'FCPortConfigInfo',
           'WN_RFC1490_BRIDGED_SNAP', 'tagFSTCaptureFrameInfo',
           'CMD_ALREADY_IN_PROGRESS',
           'NS_DOT1X_SUPPLICANT_CONFIG_INFO', 'ATMVCDBCPurge',
           'CM_TR_8405', 'MFTYPEEVENT', 'ATM_CALL_PARAM_RATE_CLASS',
           'WN_PERIOD_CFG', 'NSCaptureSetup', 'NS_IPV6_CONFIG_INFO',
           'tagFRHistScale', 'ATMStreamControl', 'FR_LOAD_IMAGE_CMD',
           'CA_SIGNALRATE_155MB', 'tagNSARPStatusInfo',
           'NS_MULTI_CAPTURE_DESCRIPTOR_FORMAT_SPIRENT',
           'XFP_TRANSCEIVERL_64_2b',
           'XENPAK_RX_ALARM_RECEIVE_OPTICAL_POWER_LOCAL_FAULT_ENABLE',
           'ATM_STR_STATUS_STREAM_STATE', 'XENPAK_MODULE_10GBASE_SW',
           'XENPAK_MODULE_10GBASE_SR', 'MII_CTRL_DUPLEXMODE',
           'XFP_AUX_MONITORING_PLUS_1_8V_SUPPLY_CURRENT',
           'tagWNPVCCfg', 'FRLmiCfg', 'tagMPLSObjectDelete',
           'IL3_TX_LATE', 'tagNSDOT1XSupplicantFill',
           'Layer3IGMPInit', 'SPEED_1GHZ', 'tagATMVCCounts',
           'tagFCSwitchDestConfig', 'tagStreamUDPIPv6VLAN',
           'ETBNC_TXEA', 'StreamSmartTCPVLAN', 'FRAME_URG_BIT',
           'FR_DS1_E1_LOS_ALARM', 'PPP_CHAP_ALGORITHM',
           'FC_DEFINE_HEADER', 'VCDB_RENUMBERED',
           'AT_USRDATA_CONGESTED', 'FRPvcTableEntry',
           'RTPCounterInfo', 'MAX_VERSION_STRING',
           'NS_DEFINE_IPV6_EXT_ESP', 'CAUSE_CHAN_NO_EXIST',
           'HIST_LONG_LAT_STREAM', 'IL3_TX_EXCESSIVE',
           'FR_LOAD_CODE_IMAGE',
           'XFP_AUX_MONITORING_LASER_TEMPERATURE', 'ATMTrigger',
           'NS_CAPTURE_STATUS_DATA_INTEGRITY_ERROR',
           'HUB_GROUP_UNIT_ACTION', 'NS_TX_ADDRESS',
           'L3_CTRL_ARP_RESPONSES_WITH_UNIQUE_MAC',
           'NS_MOD_ICMP_STREAMS', 'PPP_LCP_IPCP_CLOSED',
           'XFP_TRANSCEIVER_10GBASE_LW', 'FR_RESET_CARD_CMD',
           'tagGIGCardInfo', 'tagFCPortConfig', 'ATMStreamParamsCopy',
           'XFP_TRANSCEIVER_S_64_5b', 'XFP_TRANSCEIVER_S_64_5a',
           'TIME_TAG_OFF', 'AT_VC_COUNTER_INFO',
           'NS_DEFINE_MULTI_SMARTBITS_128_STREAM', 'FC_STATUS_INFO',
           'FRAME_HOP', 'GIG_AFN_REMOTE_FAULT2', 'ATMELANDeregister',
           'GIG_AFN_REMOTE_FAULT1', 'PPP_OE_INACTIVE',
           'L3_HIST_V2_LATENCY_DISTRIBUTION', 'TIMEOUT',
           'ENCAP_ROUTE_FR', 'tagATMConnection64InfoSummary',
           'PPP_PEER_AUTH_PW', 'NS_HIST_V3_LATENCY_PER_STREAM_INFO',
           'NS_ARP_STATUS_INFO', 'ATM_RATE_CLASS_VBR',
           'FC_SWITCH_TOPOLOGY_CASCADE', 'IP_INC_SRC_IP',
           'CAPTURE_NONE', 'XFP_IDENTIFIER_XPAK',
           'NS_MOD_IPV6_STREAM_VLAN', 'MPLS_SERVICE_OBJECT',
           'L3_MAX_GROUPS', 'MAX_OBJ_BUFF_SIZE',
           'NS_LOOKUP_KEY_CONTIGUOUS', 'XENPAK_NVR_PACKAGE_OUI',
           'L3StatsInfo', 'FR_HIST_SCALE', 'AT_PORT_CONFIG',
           'VFDStructure', 'MPLS_OBJECT_DELETE', 'TR_MAC_LOSTFRAME',
           'ETH_SELECT_TRANSMIT', 'TCPCookieArray', 'NS_EVENTS_MODE',
           'ETH_LINK_VERIFY', 'MAX_CARD_NAME_LENGTH',
           'GIG_PREAMB_LEN_20_BYTES',
           'DOT1X_SUPPLICANT_USER_PASSWORD', 'AT_STR_CONN_TYPE_PVC',
           'C_LMI_PARM', 'ETH_TRIGGER1_ONLY', 'FCFabricLinkConfig',
           'UNI_DEFAULT_TMR_TEARDOWN', 'XENPAK_L_64_3',
           'XENPAK_L_64_1', 'NS_MULTI_RX_STACK',
           'tagNSCTCaptureFrameV2Info', 'SIG_EVENT_OUTGOING_CONNECT',
           'tagFRStreamControl', 'FR_HIST_V2_LATENCY_DE',
           'CAUSE_QOS_UNAVAILABLE', 'L3_DEFINE_IPV6_STREAM_VLAN',
           'Layer3StreamGroup', 'MULTI_BURST_MODE', 'HTLED_RXOFF',
           'L3_IGMP_JOIN', 'AT_MOD_VC_ARRAY', 'FC_REMOVE_LINK',
           'Layer3DHCPStatsInfo', 'ATM_ICD_AFI', 'StreamICMPIPv6VLAN',
           'NS_MOD_IPX_STREAM', 'AT_SONET_PATH_AIS_ALARM',
           'TARGET_IS_MULTICAST_ADDRESS', 'GIG_STRUC_ALT_TX',
           'PPP_IPX_NET', 'NS_IGMP_TIMESTAMP_INFO',
           'AN_FORCE_AUTONEGOTIATION', 'ETH_FILL_PATTERN',
           'ATM_E3_CELL_LINE_CELL_RATE', 'tagPPPParamCfg',
           'PPP_ECHO_STOP', 'ATM_CONN_64_INFO', 'CAUSE_CALL_REJECTED',
           'ATM_ARP_CONN_PROCEEDING', 'TCPConnRequestTrigger',
           'NS_CAPTURE_BAD_TYPE', 'L3_HIST_JITTER_COMBO_INFO',
           'ETMF_TIME_PORT2PORT', 'ETH_LATENCY', 'CM_L3_6705',
           'WN_CAPTURE_DATA_INFO', 'L3_MOD_UDP_IPV6_STREAM',
           'CAUSE_VPCI_VCI_UNAVAILABLE', 'WN_TX_CONTINUOUS',
           'ROUTER_DISCOVERY_RUNNING', 'ATM_MAX_ARRAY_DIM',
           'CONTROLLER_ET1000', 'WN_STREAMEXT_COPY_CFG',
           'PPP_OE_ADD_EOL_TAG', 'FC_PRIVATE_DISCOVERY_STATE',
           'CT_TRAFFIC_DIRECTION_RX', 'CAUSE_DEST_OUT_OF_ORDER',
           'Layer3DHCPV2ExtendedHostInfo', 'CT_GIGABIT',
           'ETH_TRIGGER2_ONLY', 'TCP_URL_ADD', 'NS_MULTI_RX_BYTES',
           'tagFRVersionInfo', 'ATMLayerInfo',
           'SIG_EVENT_INCOMING_SETUP', 'tagWNChannelDel',
           'TokenRingMACStructure', 'PPP_STATUS_MIN_OUR_IPV6_ADDR',
           'VoiceTestSetup', 'FR_MAX_STATUS_BITMAP_LEN',
           'DOT1X_SUPPLICANT_ACQUIRED', 'NS_HIST_TEST_RAW_SIGNATURE',
           'CONTROLLER_SMB600', 'AT_SONET_LINE_BIP_ALARM',
           'NS_MULTI_VLAN_PRI_5_RX', 'FR_MAX_PVCS', 'ETDP_ALLZERO',
           'POS_SPEED_OC48', 'MPLS_RSVP_INTERFACE_LABEL',
           'tagXAUIPRBSConfig', 'NSMLDv1Listen', 'CA_CONNECT_MII',
           'NS_IPV6_ROUTER_DISCOVERY_INFO', 'STREAM_PROTOCOL_FC',
           'tagU8', 'NSIGMPv2GroupID', 'PORT_PRIVATE_DISCOVERY',
           'ETDP_ALLONE', 'FR_HIST_LATENCY', 'NSVFDConfig',
           'tagWNTriggerDel', 'ATM_TRIGGER_DIR_TX',
           'FRAME_PROTOCOL_RARP', 'NS_SDH_FRAMING',
           'IN_SVC_CONN_AS_SNAP_OR_LANE', 'GIG_TRIGGER1_OR_TRIGGER2',
           'GIG_RETRY_INFINITE', 'ATM_CLIP_RELEASE_CLIENT',
           'NSCardInfo', 'WN_LMI_MOD_CFG', 'GIG_STRUC_IMAGE_VERSIONS',
           'MII_REGISTER_AN_LINK_PARTNER',
           'NS_EN_RUNTIME_IN_SEQUENCE', 'NSIPv6RouterPrefixCountInfo',
           'ATM_E1_BUILDOUT', 'tagNSIGMPv3GroupInfo', 'ETMF_MAX',
           'tagLayer3LongLatencyInfo', 'XFP_PROFILE_INFO',
           'ATTRIB_SPEED_45MB', 'HIGH_DENSITY_CARD_ERROR',
           'HTTriggerStructure', 'tagL2RateInfo',
           'FR_LINE_SPEED_1280000L', 'XENPAK_WIS',
           'L3MS_FIELD_SIG_SEQ_ID', 'ATM_MAX_MODS',
           'GIG_CAP_RUN_DISPARITY', 'L3_HIST_V2_LATENCY_PER_STREAM',
           'NS_MULTI_L2_COUNTERS', 'ATM_TX_AAL_PDU', 'PICO_SCALE',
           'NSPMCDeviceInfo', 'XENPAK_10GBASE_LR', 'SYNACK',
           'XENPAK_10GBASE_LW', 'IATM_SIGNALING', 'NSMLDConfig',
           'POS_STRUC_TRIGGER', 'tagETHEnhancedCounterInfo',
           'WN_CHAN_ATTR_COPY_CFG', 'ATM_155_LINE_CELL_RATE',
           'INVALID_LINK_PORT_TYPE', 'ISMB_VG_ERR_PKT',
           'ATMCallSetupParams', 'FST_CAP_64_BYTES_ONLY',
           'NS_HIST_LATENCY', 'ATM_STR_PARAM_SIG_FW_PCR_01',
           'PMC_VPN_HW_TEST_PASS', 'FR_CARD_CLK_INTERNAL',
           'TR_ERR_FRAME_COPY', 'NORMAL_UNLINK', 'ATM_B_BC_CLASS_A',
           'ATMStreamDetailedStatus', 'NS_HIST_JITTER_COMBO_INFO',
           'tagATMAAL5LayerInfo', 'HTHUBID_1',
           'FR_HIST_V2_LATENCY_DISTRIBUTION',
           'POS_SONET_PAYLOAD_TYPE_SYNCHRONOUS',
           'MPLSAttributeObject', 'ATM_STR_STATE_ADDR_RES_FAILED',
           'WAN_DS1_E1_EXCESS_ZEROS_ALARM', 'ISMB_STD_ERR_CRC',
           'Layer3V2TrackingDistribution', 'GIG_AFN_ACKNOWLEDGE',
           'ETH_PHY_PAUSE_TX_ENABLED',
           'NS_CAPTURE_STATUS_DATA_INTEGRITY_MARKER',
           'L3MS_FIELD_GATEWAY', 'L3_RECEIVE_CAPTURE_OFF',
           'PPP_SESSION_STATS_INFO',
           'GIG_STRUC_AUTO_FIBER_NEGOTIATE_INFO',
           'NS_EN_RUNTIME_TIMESTAMP', 'FR_LINE_SPEED_1344000L',
           'NS_DEFINE_RTP_STREAM', 'ENCAP_BRIDGE_FR',
           'NS_MOD_STREAM_EXTENSION', 'AT_HEC_ERROR_HANDLING_CORRECT',
           'FC_NODE_N_PORT', 'FST_CAP_STOP_ON_CONDITION',
           'POS_SONET_PAYLOAD_TYPE_NON_SPECIFIC',
           'AT_STREAM_TX_COUNTER_INFO',
           'NS_MULTI_NEIGHBOR_SOLICITATION_TX',
           'tagATMClassicalIPInfo', 'NS_DHCP_V2_EXTENDED_HOST_INFO',
           'WNChannelTxCfg', 'ETLOCALMODE', 'ITR_MAC_INTERNALERRORS',
           'PPP_STATUS_LCP_STATE', 'TCPURIArray', 'IATM_TIMEOUT',
           'tagFCDomainStats', 'NS_USB_GET_USB_INFO',
           'PPP_OE_LOCAL_IPV6_ADDR', 'WNFeatureCtrl',
           'GIG_MULTIBURST_MODE', 'MIN_TFOM_LIMIT',
           'ENABLE_ROUTER_DISCOVERY', 'DS3_EXCESS_ZEROS_ALARM',
           'CA_DUPLEX_HALF', 'DOT1X_SUPPLICANT_SESSION_AUTHENTICATED',
           'CM_LAN_3710AS', 'CM_LAN_3710AL',
           'tagNSStreamARPStatusInfo', 'STR_RATE_CLASS_CBR',
           'BUFFER_CONTINUOUS', 'ETHEnhancedCounterInfo',
           'CM_LAN_3710AE', 'ETBNC_TXEB', 'XAUI_MODULE_10GBASE',
           'ETMAXSLOT', 'WN_DS3_CBIT_LINE_FRAMING',
           'XENPAK_NVR_CONFIG_INFO', 'tagATMSigTraceEventInfo',
           'ATM_STR_STATE_CONN_FAILED', 'FST_CAP_ENTIRE_FRAME',
           'NS_STOP_ARPS', 'WN_CARD_CFG_INFO',
           'tagTCPHTTPExtendedConfig', 'FR_HIST_V2_LATENCY_INFO',
           'WAN_DS1_N15_DB_BUILDOUT', 'AFSIG_RESTART_SUCCESS',
           'GIG_STRUC_UPLOAD_ERROR_LOG', 'CAUSE_INV_CALL_REF',
           'ATMConnection', 'CAPTURE_EVENTS_SIGNATURE',
           'tagLayer3TrackingLatency', 'L3_HIST_V2_LATENCY',
           'ATM2_RXT_FPGA_VERSION', 'WN_DS1_AMI_ENCODING',
           'CA_SIGNALRATE_1000MB',
           'ATM_STR_STATE_ADDR_RES_PROCEEDING',
           'TCP_ADD_ACCEPTOR_ADDR', 'tagTCPURIArray', 'FRHistScale',
           'tagFCFSPFRealTimeStatsInfo', 'NS_TRIGGER_CONFIG_INFO',
           'tagWNStreamDel', 'FR_HIST_L3_SEQUENCE',
           'ATMConnectionInfo', 'ATM_TD_COMBO_RATES',
           'tagTCPConnEventInfo', 'tagATMSigRestartAckInfo',
           'ETH_PHY_LINK_GOOD', 'FC_PUBLIC_DISCOVERY', 'HTHUBID_2',
           'HTHUBID_3', 'NS_MOD_IP_STREAMS', 'HTHUBID_4',
           'L3_MULTIBURST_MODE', 'GIG_STATUS_1420B',
           'tagPPPIPv6StatusInfo', 'FR_STEP_CMD', 'ATM_SONET_INFO',
           'Layer3StreamLongLatencyInfo',
           'tagLayer3StreamDistributionInfo', 'L3MS_FIELD_DIPV6',
           'FR_LINE_SPEED_576000L', 'L3MS_FIELD_FC_EOF',
           'NS_MULTI_HW_RATE_COUNTERS', 'MLD_FORCE_RESPONSE',
           'FR_DS3_M13_LINE_FRAMING', 'NS_IGMP_JOIN_VLAN',
           'GIG_VFD3_ON', 'WAN_DS1_E1_B8ZS_ALARM',
           'ATM_RATE_CLASS_UBR', 'CM_LAN_6301A',
           'ISMB_VG_INV_PKTMARK', 'NSCounterInfo',
           'FR_LOOP_TIMED_CLOCK', 'GIG_STRUC_RESTART',
           'CAPTURE_EVENTS_RUNNING_DISPARITY_ERRORS',
           'WN_FEATURES_PER_PVC_RATE', 'L3_DEFINE_IP_STREAM',
           'FC_NODE_CONFIG_INFO', 'LOGFILE_SIZE_16384', 'XENPAK_TYPE',
           'FR_LMP_ANNEX_D_PARM', 'CT_TRAFFIC_DIRECTION_TX',
           'NS_MULTI_HW_RX_FRAMES', 'ITR_TOKEN_RT',
           'FC_FSPF_CONFIG_INFO', 'GIG_STRUC_FILL_PATTERN',
           'DOT1X_EAP_TYPE_PHASE2_MSCHAPV2',
           'MII_STATUS_100BASE_X_FULL', 'TIME_TAG_ON',
           'NSModStreamArray', 'tagNSSignatureDetectMode',
           'NS_TRACK_STREAM_ID', 'MPLS_RSVP_UDP_ENABLE',
           'NS_WIS_SDH_FRAMING', 'NS_ARP_UNRESOLVED',
           'tagTCPTransRateInfo', 'NS_LAT_SCALE_1_MILLISECOND',
           'CAUSE_LOC_TRANS_NET',
           'XFP_AUX_MONITORING_PLUS_5V_SUPPLY_VOLTAGE',
           'SSCOP_STATE_IN_CONN_PEND', 'L3_RECEIVE_ARPTIMES_REPORT',
           'NS_WIS_CONFIG_INFO', 'FC_FABRIC_LINK_CONFIG',
           'NS_DEFINE_UDPDHCP_STREAM', 'TCPConnEventInfo',
           'NS_MOD_IPV6_EXT_FRAGMENT', 'REENTRANT_ERROR',
           'tagNSTCPHeader', 'tagATMConfigureDUT', 'ITR_LATENCY',
           'WAN_DS1_B8ZS_ENCODING', 'L3_ARP_SEND',
           'L3_DATA_INTEGRITY_ERRORS',
           'NSIPv6StatelessAddressCountInfo', 'NS_MAX_STREAMS',
           'CA_GBIC', 'NS_RPM_LIST_INFO', 'ATM_LANE',
           'Layer3_TrackingActiveTest', 'tagNSIGMPv3GroupMod',
           'NS_IGMP_COUNTER_INFO', 'tagFCNameServerStatsInfo',
           'FR_ETSTAT_LINKINTEGRITY', 'tagLayer3Address',
           'ATMSigEmulTeardown', 'tabATMPVCADNewParams',
           'NSIGMPAddressVLAN', 'ATM_VCDB_CLEAR_FLAG',
           'GIG_STRUC_CAP_COUNT_INFO', 'NS_PER_STREAM_COUNTER_INFO',
           'STREAM_PROTOCOL_UDP_PPPOA', 'SSCOP_DEFAULT_MAX_CC',
           'XENPAK_MODULE_10GBASE_LX4', 'ILMI_TMR_TICK_RESOLUTION',
           'WN_E1_HDB3_ENCODING', 'PPP_MAX_TERMINATE',
           'L3_DHCP_PORT_SESSION_INFO', 'ATMPETInfo',
           'MII_CTRL_SPEED_LSB', 'GIG_STRUC_VFD3', 'NSIPAddress',
           'STR_ENCAP_TYPE_LLC_VCM_PPPOE',
           'CAUSE_NO_VPCI_VCI_AVAILABLE', 'tagETHTrigger',
           'ET_CMDLOG_APPEND', 'HIST_RAW_TAGS',
           'ATM_STR_PARAM_SIG_BW_MBS_01', 'tagNSMPLSLabel',
           'NEXT_HOP_COMPLETED', 'PPP_STATUS_PPPOE_STATE',
           'NS_IGMPV3_CONFIG', 'ATM_COMP1_AND_COMP2', 'StreamTCPIPv6',
           'tagNSIGMPConfig', 'SSCOP_DEFAULT_MAX_STAT',
           'NS_CARD_HARDWARE_INFO', 'NS_VOICE_TEST_SETUP',
           'CUT_THROUGH_MODE', 'WN_TRIG_COMP1_ONLY', 'GIG_STRUC_LED',
           'GIG_STRUC_CAP_DATA', 'L3_MOD_TCP_STREAM_VLAN',
           'STREAM_PROTOCOL_UDP_PPPOAOE', 'tagFSTCaptureParams',
           'WN_COMMIT_CFG', 'NSMLDv2StatsInfo',
           'NS_EN_RUNTIME_MAX_LATENCY', 'POS_SET_SPEED',
           'tagATMSigTraceEventData',
           'NS_WIS_INJECT_SECTION_BIP_ERRORS', 'ATM_E3_PLCP_FRAMING',
           'FR_PVC_INFO', 'ETBNC_RDATB', 'ETBNC_RDATA',
           'CM_XLW_3721A', 'ETDP_INCR16', 'MDIO_ACCESS_4_PLUS_4',
           'MII_AN_ACKNOWLEDGE', 'MICRO_SCALE',
           'FR_DS1_266_TO_399_BUILDOUT', 'FR_SET_PORT_LMI_ENQ',
           'PPP_MAX_CONFIGURE', 'ETH_PHY_PARALLEL_LINK_FAULT',
           'FCNameServerStatsInfo', 'ATM_B_BC_NO_END_TO_END_TIMING',
           'tagFRTriggerCfg', 'FR_TX_AGGREGATE_PVC_INFO',
           'L3_RECEIVE_TRACKING_JITTER_COMBO', 'MII_AN_10BASE_T',
           'MII_CTRL_AUTONEGOTIATE', 'TriggerMaskStructure',
           'L3_MOD_IPV6_STREAM', 'CAPTURE_EVENTS_OAM_FRAME_ONLY',
           'HIST_OFF', 'VG_CFG_PRIORITY_PROMO', 'L3MS_FIELD_DPRT',
           'NS_WAIT_COMPLETE', 'CAPTURE_MODE_FILTER_ON_EVENTS',
           'CM_XFP_3731A', 'SLOT_AVAILABLE',
           'ATM_SEVERE_ERROR_CB_RATIO',
           'NSHistMulticastLatencyPerStreamInfo',
           'L3_READ_STREAM_EXTENSION', 'WN_PVC_FILL_CFG',
           'FR_HIST_L3_LONGSTREAMLATENCY', 'Layer3SequenceInfo',
           'tagXENPAKNVRConfig', 'NS_WIS_SECTION_OOF_ALARM',
           'POSCardGetSpeedInfo', 'NS_COMMIT_CONFIG',
           'DOT1X_SUPPLICANT_STATUS_SETUP_TIME', 'FCCustomFrame',
           'SSCOP_STATE_DATA_XFER_RDY',
           'CAUSE_TOO_MANY_PEND_ADD_PARTY', 'UShort',
           'ATM_DS1_E1_LINE_PARAM', 'tagNSPortConfig',
           'L3_DEFINE_MULTI_STREAM_EXTENSION', 'tagNSMPLSHeaderList',
           'L3_CONTINUOUS_MODE', 'L3_MOD_ICMP_STREAM_VLAN',
           'RESERVE_ALL', 'TCP_GET_RX_LOG_2',
           'IP_INC_DST_IP_AND_DST_MAC', 'ATM_BURST_ENABLE',
           'tagNSDiffServCounterInfo', 'ATM_E1_CELL_LINE_CELL_RATE',
           'TCP_CONN_GAP_CFG', 'NS_INTERNAL_CLOCK',
           'UNI_TMR_TICK_RESOLUTION', 'FRAME_SRC_PORT',
           'NS_IP_STREAM_INFO', 'tagLayer3DHCPStatsInfo',
           'tagNSCopyHeaderInfo', 'tagL3ModifyStream', 'CT_L3',
           'FR_LINE_SPEED_19200L', 'WNChannelDel', 'TCP_FLAG_RST',
           'ATM_ELAN_MAX_ARP_RESPONSE_TIME', 'CONTINUOUS_PACKET_MODE',
           'TR_MAC_ACERRORS', 'COPPER_MODE', 'tagNSIPv6Header',
           'FR_MAX_PROTOCOL_STREAMS', 'ATM_DS1_E1_PLCP_YELLOW_ALARM',
           'AT_CELL_SCRAMBLING_HEADER', 'PPP_NCPS_STOPPED',
           'ATM_CALL_PARAM_CALL_SETUP_PARAMS_INDEX',
           'FR_LINE_SPEED_48400L', 'WNT1E1LineStatus',
           'FST_BASE_ITYPE', 'ATM_CELLSLOST',
           'ETH_PHY_AUTONEGOTIATE_ACK_DETECT', 'tagFCWWN',
           'HBA_LINK_UP', 'L3_HIST_LATENCY_PER_STREAM_INFO',
           'DOT1X_SUPPLICANT_KEY_PASSWORD', 'MAX_MAX_HUBS',
           'ITR_RXABORTFRAMES', 'ATM_DS3_E3_LINE_PARAM',
           'XENPAK_NVR_EXT_VENDOR_FIELD_ADDRESS',
           'LCP_CONFIG_FAILURE', 'FRAME_AC_PAD', 'SCHED_TYPE_EQUALLY',
           'L3MS_FIELD_DMAC_BYTE01_WITH_SKIP', 'PPP_IPX_COMPRESS',
           'TRIGLED_MISSING', 'DOT1X_SUPPLICANT_AUTHENTICATING',
           'FR_LINE_SPEED_384000L', 'FW_FC_FS_QUERY_STATS',
           'MAX_REPORT_ERROR_STRING', 'ATMELANInfo',
           'AT_VC_RX_CT_BUFFER_SIZE', 'ARP_VIRTUAL_MODE',
           'ATMConnectionModify', 'L3MS_FIELD_RTP_SSRC', 'StreamUDP',
           'tagNSPortTransmit', 'FR_PVC_STATUS_BITMAP_LEN',
           'tagWNPVCDel', 'ATM_LED_STATUS_LOS', 'NS_ARP_TIMES_INFO',
           'ETHLatency', 'ATMAAL5LayerInfo', 'FR_DEFINE_802_3_STREAM',
           'PPP_OE_RETRYTIMER', 'L3_HIST_SEQUENCE_INFO',
           'NS_SONET_SECTION_BIP_ALARM', 'PPPO_MRU',
           'tagNSDiffServRateInfo', 'FrameSpec_Type', 'HT_LATENCY_TX',
           'HTSTEP', 'NS_MOD_SMARTBITS_STREAMS', 'PROTOCOL_TYPE_ARP',
           'CollisionStructure', 'tagStreamSmartTCPVLAN',
           'XFP_TRANSCEIVER_1200_SM_LL_L',
           'PPP_STATUS_MAX_PEER_IPV6_ADDR', 'L3_CTRL_PING_RESPONSES',
           'ATM_RX_ERRORED_CELLS', 'tagGIGCaptureCountInfo',
           'NS_MOD_802_3_STREAMS', 'ATTRIB_SPEED_1_544MB',
           'XENPAK_OPTICAL_LC_TYPE', 'ETBURST_ON',
           'tagNSIGMPTimestampInfo', 'tagFCSwitchConfig',
           'UNI_VERSION_3_1_USER', 'L3_DEFINE_IP_STREAM_VLAN',
           'HTRUN', 'tagNSCreateSubprocess', 'FRIntervalTimeInfo',
           'CT_FILTER_OPERATOR_PAT2_ONLY', 'FR_DS1_ESF_LINE_FRAMING',
           'tagATPortConfig', 'ATM_CALL_TMR_TICKS_PER_SEC',
           'tagNSIPv6IPv4AddressMapDelete', 'STR_ENCAP_TYPE_RFC1577',
           'ATM_STR_PARAM_SIG_BW_TD_TYPE', 'STREAM_PROTOCOL_IP_PPPOA',
           'FC_NAME_SERVER_EVENT_CONFIG', 'NS_MULTI_ALIGNMENT_ERROR',
           'L3_HIST_MULTICAST_LATENCY',
           'FC_EPORT_SETTING_CONFIG_INFO', 'ETBAUD_9600',
           'ATM_DS1_E1_YELLOW_ALARM', 'NS_MULTI_TX_BYTES',
           'tagFCNodeConfig', 'GPS_SYNC_RETRY_ERROR',
           'NS_EN_RUNTIME_OUT_SEQUENCE', 'ATM_SIG_EMUL_RESET',
           'CT_DEFAULT_STOP_ON_FULL', 'FR_CRC4_ENABLE_LINE_FRAMING',
           'CM_AT_9034B', 'NSSignatureDetectMode', 'GIG_VFD_RANDOM',
           'NS_MAX_TRIGGER_RANGE', 'PPP_OE_USE_DOUBLE_TIMEOUT',
           'FR_UNI_DISABLED', 'L3_MASK', 'VLAN_PRI_6', 'VLAN_PRI_7',
           'VLAN_PRI_4', 'VLAN_PRI_5', 'VLAN_PRI_2', 'VLAN_PRI_3',
           'VLAN_PRI_0', 'VLAN_PRI_1', 'NS_MULTI_TX_MPLS_FRAMES',
           'NS_MULTI_VLAN_PRI_7_RX', 'tagNSCopyTxConfigInfo',
           'DOT1X_SUPPLICANT_SESSION_PENDING_TO_START',
           'HIGH_DENSITY_CONTROLLER_ERROR',
           'tagNSMultiCaptureDataInfo', 'NS_PATH_SIGNAL_LABEL_ATM',
           'FR_NIC_EIA_RD_LLB', 'NS_MPLS_LIST_SIZE', 'MAX_URL_LEN',
           'tagStreamRTP', 'tagATMILMIStaticParams',
           'tagTCPConnectionStatusOnly', 'L3_RECEIVE_CAPTURE_ALL',
           'AN_DISABLE_AUTONEGOTIATION', 'tagVoiceTestSetup',
           'ETBNC_RXEB', 'IATM_CELLS', 'ATM_DS1_E1_PLCP_OOF_ALARM',
           'FR_HIST_L3_RX_DELTA', 'NS_HIST_V1_LATENCY_PER_STREAM',
           'PPP_RESTART_TIMER', 'DOT1X_TTLS_PHASE2_PAP',
           'L3_DEFINE_MULTI_IP_STREAM_VLAN', 'WNLMIInfo',
           'DATA_NOT_AVAILABLE', 'RUN_FIXED_TIME_FLAG', 'L3_USB_ON',
           'WN_HIST_CTRL_ALL', 'L3DataCheck',
           'PPP_STATUS_PEER_IPADDR', 'IGMPV3_SUPPRESS_IGMPV3_RECORDS',
           'GIG_PREAMB_LEN_4_BYTES', 'ATM_SAAL_TIMEOUT',
           'ATM_DS1_E1_OOF_ALARM', 'MAX_AGENT_LEN',
           'NS_STREAM_MULTI_CONFIG', 'POS_LOOPBACK_MODE_MONITOR_PHY',
           'L3_STREAM_128_INFO', 'NSStreamARPStatusInfo',
           'FRPvcMainInfo', 'NS_CREATE_SUBPROCESS',
           'HUB_GROUP_INDEPENDENT_ACTION', 'FR_VFD_INCREASING',
           'ATM_DS3_E3_LOS_ALARM', 'L3_DHCP_STATE_REBOOT',
           'L3_TX_ADDRESS', 'tagNSIPXHeader',
           'FRAME_FRAGMENTS_OFFSET', 'NS_EN_RUNTIME_MIN_LATENCY',
           'NSIPv6ExtFragmentHeader', 'ETHCollision', 'C_DISABLE',
           'FR_AGGR_LATENCY_INFO', 'WN_PVC_MOD_CFG',
           'TCP_CFG_CONNECT_REQUEST',
           'NS_MULTI_IPV4_PING_REQUESTS_RX',
           'tagNSIPv6ExtDestination', 'ATMVCCInfo',
           'NSMulticastKeepAliveConfig', 'tagLayer3IGMPInit',
           'CA_CONNECT_FIBER', 'FR_802_3_STREAM_INFO',
           'POS_SPEED_OC192', 'tagLayer3IPv6Protocol',
           'L3_DHCP_ACTION_REBOOT', 'PPP_OE_TIMEOUT_NO_RSP',
           'tagNSGetVFDInfo', 'FR_AGGR_LATENCY_DISTRIBUTION_INFO',
           'tagGIGTrigger', 'ATMSonetLineInfo',
           'NS_EN_RUNTIME_OUT_SEQUENCE_INDEX',
           'HIST_COMBO_PER_STREAM_INFO', 'POS_CARD_LINE_CONFIG',
           'NS_MOD_SMART_TCP_STREAMS', 'PORT_TYPE_NOT_REGISTERED',
           'ATMPETReadReq', 'CAUSE_BC_NOT_IMPLEMENTED',
           'WN_LMI_COPY_CFG', 'AT_CELL_SCRAMBLING_PAYLOAD',
           'NS_WIS_INTERNAL_TX_CLOCK', 'XFP_TRANSCEIVER_S_64_3a',
           'XFP_TRANSCEIVER_S_64_3b', 'FR_E1_120_OHM_HIRL',
           'L3MS_FIELD_SMAC', 'ATM_TIMEOUT',
           'POS_SONET_PAYLOAD_CONFIG', 'L3_MOD_SMARTBITS_STREAMS',
           'L3_MOD_IP_STREAMS', 'NS_PROTOCOL_HEADER_MAX',
           'MLDV1_START_LISTEN', 'NS_DEFINE_MPLS',
           'WAN_DS1_399_TO_533_BUILDOUT', 'STR_RATE_CLASS_VBR',
           'NS_VFD1_CONFIG', 'NS_PPP_HEADER', 'Layer3Address',
           'NS_TRIGGER1_ONLY', 'XFP_AUX_MONITORING_NOT_IMPLEMENTED',
           'ETBNC_20MHZINV', 'PVC_END2END_UP_STATUS',
           'L4MS_FIELD_VLANID', 'NS_SONET_CONFIG',
           'XFP_IDENTIFIER_XFF', 'XFP_IDENTIFIER_XFP',
           'TCP_GET_URL_DISTRIBUTION', 'MPLS_RSVP_OPAQUE',
           'FC_GET_TX_MODE', 'GRE_PAYLOAD_IPX', 'ATM_MAX_STREAMS',
           'tagStreamTCP', 'ATM_STR_ACTION_START',
           'PRODUCTION_RELEASE',
           'NS_DOT1X_SUPPLICANT_PORT_CONFIG_INFO', 'PPP_OE_PADR_SENT',
           'FR_STATUS_EIA_RDL', 'NS_MLDV2_LISTENER_REPORT_CONFIG',
           'NS_SIGNAL_SUBPROCESS', 'NS_AGGREGATE_INFO',
           'GIG_STRUC_TEST_RX_LOOPBACK', 'PPP_LCP_IPCP_STOPPING',
           'NON_BLOCKING_RESPONSE_ERROR', 'TR_DUPLEX_HALF',
           'MAX_EVENT_DATA_LEN', 'WNLMICfg', 'NSIPv6CounterInfo',
           'ARPEntry', 'FR_NUM_PVCS', 'TCP_ENABLE_DATA_SEND',
           'NS_DEFINE_RTP_STREAM_VLAN',
           'CAPTURE_EVENTS_FILTER_FRAME_LENGTH',
           'NS_HIST_LATENCY_PER_STREAM', 'FR_LINE_SPEED_1216000L',
           'TCP_HTTP_AGENT_CONFIG', 'AT_HEC_ERROR_HANDLING_PASS',
           'MII_REGISTER_STATUS', 'ATM_ILMI_REG_TIMEOUT',
           'NSOAMRateInfo', 'ETH_CLEAR_PORT', 'NS_DELETE_STREAM',
           'NSIPv6ExtESP', 'WAN_DS1_E1_PLCP_LOF_ALARM',
           'ATM_STR_STATUS_CONN_INDEX', 'TokenRingPropertyStructure',
           'NSSubscriptionInfo', 'FR_E1_CRC4_DISABLE',
           'POS_QOS_TRIGGER', 'ATM_FEATURES_MULTI_BURST',
           'tagMPLSLSPBindStreams', 'tagATMConnection64Status',
           'NS_PMC_FLASH_INFO', 'TCPDataLogEventTx', 'L3MS_FIELD_DIP',
           'Layer3HistDistribution', 'HT_LATENCY_RX',
           'CA_CONNECT_USB', 'DS3_SEV_ERROR_FRAME_ALARM',
           'FR_SET_PROTO_STACK', 'TR_BURSTERRORS', 'LINK_PORT_TYPE',
           'L3_RECEIVE_TRACKING_RAWTAGS', 'OUT_OF_RESOURCES',
           'FRAME_TOTAL_LENGTH', 'XENPAK_SONET_SDH', 'ETH_TRANSMIT',
           'NS_HIST_RAW_TAGS', 'PPP_STATUS_PPPOE_MODE',
           'PPPO_USEMAGIC', 'ATM_PVC', 'tagNSVFDConfig',
           'FR_PVC_AGGREGATE_CNT_MAX', 'IP_INC_DST_MAC', 'PMC_FLASH',
           'ETDP_RANDOM', 'ISMB_STD_ERR_OVERSIZE', 'MAX_SLOTS_NUMBER',
           'tagMPLSItem', 'AT_USRDATA_NOT_CONGESTED',
           'ATM_ELAN_AVAILABLE', 'WN_CAPTURE_START',
           'NS_IPV6_RATE_INFO', 'FSTCaptureParams', 'PET_TIMER',
           'PPP_MOD_SESSION_STATUS', 'NS_DEFINE_MULTI_IP_STREAM',
           'WNChannelStatus', 'NS_MOD_RTP_STREAMS',
           'FR_SET_START_CFG', 'SSCOP_TMR_TICK_RESOLUTION',
           'ATMCallSetupParamsEx', 'ATM_MEAN_CELL_TRANSFER_DELAY',
           'SPEED_100MHZ', 'FC_MAX_DEVICES',
           'XFP_TRANSCEIVER_I_64_2r', 'CONN_STATE_CALL_RELEASED',
           'CAUSE_REQ_IE_MISSING', 'GIGCaptureInfoRequest',
           'L3_MOD_TCP_IPV6_STREAM', 'WN_CHANNEL_INFO',
           'RXLED_ALIGNA', 'FR_MAX_VFD_PATTERNS',
           'ATM2_TXQ_FPGA_VERSION', 'TCP_GET_TX_TIME_INFO',
           'MPLS_CREATE_SINGLE_LSP', 'ATM_DS3_E3_IDLE_ALARM',
           'FRAME_PSH_BIT', 'ATM_E1_AMI_ENCODING', 'NSL2StatRateInfo',
           'NSCustomHeader', 'tagNSHistLatencyDistPerStreamInfo',
           'NSMLDv2ListenerReportConfig',
           'NS_DEFINE_IPV6_EXT_ROUTING',
           'WAN_DS1_E1_PLCP_YELLOW_ALARM', 'ATM_LOOPBACK_REMOTE_PHY',
           'IATM_UNCORRECTABLEHEADERS', 'PPP_START', 'FC_LINK_DOWN',
           'ATM_CLIP_TIMEOUT', 'ETBNC_ALB', 'ETBNC_ALA',
           'ATMVCDBClearFlagReq', 'CAPTURE_MODE_START_ON_EVENTS',
           'TCP_ARP_SET_ENTRY', 'NS_IPV6_EXT_FRAGMENT_HEADER',
           'PORT_DEVICE_LOGIN', 'CM_SX_7405', 'NCP_DOWN',
           'Layer3_Tracking_Distribution',
           'ATM_CALL_PARAM_CELL_LOAD_GEN_ENABLE',
           'NS_IPV6_PROTOCOL_HEADER_INFO',
           'OTHER_STATEFUL_CONFIGURATION', 'GIG_PHY_LOOP_PBUS',
           'ATM_CELLS', 'tagATModifyVCArray',
           'L3_HIST_V1_LATENCY_PER_STREAM',
           'tagNSCardFirmwareVersion',
           'TCPISP_CONNECTIONDATA_TYPE_CONNECTION',
           'tagNSHeaderStackInfo', 'GPS_STATUS_NOT_CONNECTED',
           'L3_DEFINE_STREAM_BINDING', 'L3MS_FIELD_TTL',
           'MPLS_LDP_TEST', 'ATM_ILMI_UME_RUNNING',
           'NS_DEFINE_SMART_TCP_STREAM_VLAN',
           'L3MS_FIELD_ROUTER_ADDR', 'TR_PURGEEVENTS', 'TRFC_PCF_SMP',
           'ETBNC_OVRB', 'ETBNC_OVRA', 'L3_DEFINE_MULTI_IPV6_STREAM',
           'FC_LINK_SPEED_10GIG', 'TRFC_DEFAULT',
           'tagNSCTCaptureFilterParams', 'XENPAK_I_64_1',
           'XENPAK_I_64_2', 'XENPAK_I_64_3', 'WN_VFD_INCREASING',
           'ATM_CALL_PARAM_CONN_TYPE', 'ATM_LOOPBACK_DISABLED',
           'Short', 'WAN_E1_AMI_ENCODING', 'WNChannelCtrl',
           'L3_DEFINE_802_3_STREAM',
           'NS_MULTI_IPV6_NEIGHBOR_SOLICITATION_COUNTERS',
           'HT_LATENCY_RXTX', 'FRAME_TYPE',
           'NSIPv6IPv4AddressMapDelete',
           'CONN_STATE_INTER_CALL_DELAY', 'IPV6_EXT_HOP_BY_HOP',
           'tagTCPConnectionStatus', 'TR_ERR_FRAME_FS', 'WN_VFD_OFF',
           'NS_MOD_802_3_STREAM', 'CMD_NOT_SUPPORTED', 'PPP_IPX_NODE',
           'NS_DEFINE_SMARTBITS_128_STREAM', 'ATM_E1_HDB3_ENCODING',
           'tagNSHistMulticastLatencyPerStreamInfo', 'FRAME_AC',
           'DOT1X_SUPPLICANT_VLAN_ENABLE', 'FW_FC_FS_CONFIG_GROUP',
           'STREAM_PROTOCOL_TCP_IPV6_VLAN',
           'DOT1X_SUPPLICANT_START_TIME', 'FRAME_SYN_BIT',
           'WN_DS3_BUILDOUT_LT225',
           'XENPAK_TX_ALARM_PHY_XS_TRANSMIT_LOCAL_FAULT_ENABLE',
           'tagHTSlotSharingStructure', 'ETMF_TOTAL_LENGTH',
           'NSIPv6IPv4Translation', 'tagWNChannelCtrl',
           'VLAN_CFI_RIF_PRESENT', 'FRHistDataInfo',
           'LAST_TRANSMIT_MODE', 'L3_RNDIS_MODE_ON',
           'ATM_LOOP_TIMED_CLOCK', 'NS_READ_MDIO_INFO',
           'FC_LOG_LEVEL_ERROR', 'StreamUDPIPv6',
           'WN_T1E1_LINE_MOD_CFG', 'PPP_OE_STATS_INFO', 'NS_VFD_OFF',
           'PPP_OE_NO_AC', 'tagNSHistLatencyOption',
           'MPLS_ROUTING_DOMAIN_DELETE_ALL',
           'AT_PATH_SIGNAL_LABEL_ATM', 'WAN_DS3_LONG_BUILDOUT',
           'tagTCPStateInfo', 'AT_VC_CREATE',
           'FR_SET_PORT_LMI_STATUS', 'ETH_ENHANCED_COUNTER_INFO',
           'WN_DEFINE_UDP_STREAM', 'ETVFD_DISABLE', 'WNT1E1LineDel',
           'NS_HALF_DUPLEX_RATE_INFO', 'tagNSIGMPVLANTimestampInfo',
           'L3MS_FIELD_STREAM_ACTIVE', 'tagNSMLDConfig',
           'ATM_LED_STATE_PHY_DOWN', 'DOT1X_EAP_TYPE_LEAP',
           'tagATMConnection64Info', 'RXLED_OVERSIZEA',
           'RXLED_OVERSIZEB', 'NS_VFD_RANDOM', 'PPP_USE_NONE',
           'NSEthernetHeader', 'HTLED_LINK_100MHZ', 'TCPURLArray',
           'CM_WN_3441A', 'ETMF_SQE_COUNT', 'GIG_AFN_FULL_DUPLEX',
           'TRFC_PCF_RRS', 'GET_IPV4_FROM_IPV6',
           'CT_TRAFFIC_DIRECTION_TXRX', 'ETH_TRIGGER1_AND_TRIGGER2',
           'L3_MOD_RTP_STREAMS', 'NS_MOD_TCP_STREAM_VLAN', 'PAT_F0F0',
           'WN_PVC_RET_ADMIN_STATUS', 'NS_DOT1X_SUPPLICANT_CONTROL',
           'FC_LOG_LEVEL_CRITICAL', 'ITR_RXMAC',
           'NS_SONET_CONFIG_INFO', 'tagETHCardInfo',
           'INVALID_IP_HOP_LIMIT', 'CAUSE_INV_NUMBER_FORMAT',
           'WAN_E1_HDB3_ENCODING', 'IP_DEC_SRC_IP_AND_SRC_MAC',
           'NS_CT_CONFIG_CAPTURE_FILTER_PARAMS',
           'FR_MOD_STREAMS_ARRAY', 'ATM_CONN_64_INFO_SUMMARY',
           'ATMFrameCopyMod', 'DOT1X_EAP_TYPE_EAPPEAP',
           'tagNSFileTransferStructure', 'WNChannelAttribCfg',
           'tagFCLOG_Out', 'tagFRLayer3LongLatencyDEInfo',
           'FR_TX_ECHO', 'TCP_HTTP_STOP_EXTENDED_TEST',
           'ATTRIB_ATM_SIGNALING', 'XFP_IDENTIFIER_UNKNOWN',
           'MAX_OBJECTS', 'tagNSPerStreamCounterInfo',
           'MAX_DATA_PATTERN', 'FR_HIST_TYPE_INFO',
           'DISABLE_NON_BLOCKING_MODE', 'NS_PMC_DISK_INFO',
           'MPLS_FILTER_OBJECT', 'tagTCPInfo', 'TCP_ICMP_PING',
           'L3_DHCP_STATE_RENEW', 'NS_HIST_JITTER_COMBO',
           'HTLED_TRIGLOSYELLOW', 'ATM_ARP_CONN_FAILED',
           'XENPAK_MODULE_10GBASE_CX4', 'PPP_OE_SERVICENAME',
           'PPP_IPV6_CONFIG', 'IP_DEC_DST_IP',
           'ATM_ELAN_DEFAULT_AGING_TIME', 'L3_MOD_TCP_STREAMS',
           'POS_TRANSCIEVER_MODE_SINGLE', 'POS_CARD_PORT_ENCAP',
           'GIG_PREAMB_LEN_24_BYTES', 'CT_MAX_CARD_MODELS',
           'NSCopyHeaderInfo', 'tagNSReportErrorEntry',
           'GROUP_NOT_HOMOGENEOUS', 'WN_CHANNEL_STATUS',
           'XENPAK_NVR_VENDOR_PART_NUMBER', 'ATTRIB_DUPLEX_FULL',
           'FC_DEFINE_HEADER_INFO', 'FR_ALL_PVC_INFO',
           'NSIPv6RouterDiscoveryCountInfo',
           'TCP_HTTP_URL_OBJ_LEN_CONFIG', 'CAUSE_NORMAL_UNSPEC',
           'NS_MOD_IPV6_OVER_IPV4_TUNNELING',
           'NSTCL_INVALID_STRUCT_COUNT', 'ATM_PER_CONN_BURST',
           'tagStream8023', 'tagFRGetCaptureFrameCmdInfo',
           'PPP_PARAMS_FILL', 'L3_RECEIVE_CAPTURE_SPECIAL',
           'ETMF_TIME_ROUNDTRIP', 'NS_MULTI_TX_TIMESTAMP',
           'L3_V2_STREAM_INFO', 'ATM_CALL_LENGTH_RANDOM',
           'FAMILY_UNKNOWN', 'L3_DHCP_STREAM_COUNT_INFO',
           'MAX_HUBS_HD', 'IPV6_EXT_ESP', 'CM_WN_3445A',
           'SIG_EMUL_NO_TEARDOWN', 'ATM_STR_STATUS_ARP_RESP_LATENCY',
           'GIG_AFN_RESERVED9', 'TCP_GET_URI_DISTRIBUTION_INFO',
           'GIG_AFN_RESERVED4', 'GIG_AFN_RESERVED3',
           'GIG_AFN_RESERVED2', 'GIG_AFN_RESERVED1',
           'GIG_AFN_RESERVED0', 'FC_NAME_SERVER_STATS_INFO',
           'FC_SWITCH_TOPOLOGY_BINARY_TREE', 'PPP_USE_PPPOE',
           'tagGIGCaptureFrameInfo', 'FC_NODE_NL_PORT',
           'FCCounterInfo', 'TR_STATUS_DEVICE', 'XENPAK_NVR_ENCODING',
           'MII_STATUS_LINK', 'L3_TX_RETRIES', 'FR_ETSTAT_TXLED',
           'FC_GET_ENTRY_GIVEN_IP_ADDRESS_RX', 'MAX_SLOTLIST_SIZE',
           'HTECHO_OFF', 'tagATMStreamDetailedStatus', 'CM_UNKNOWN',
           'NS_OAM_PATTERN', 'VGCardPropertyStructure',
           'GIGCaptureDataInfo', 'tagATMStreamParamsFill',
           'MPLS_OPAQUE_OBJECT',
           'XFP_TRANSCEIVER_1000BASE_LX_1xFC_SMF',
           'TCP_TIME_COUNT_INFO', 'CA_TRANSCEIVER_MULTIMODE',
           'ATMILMIStaticParams', 'ATMVCDBInfo',
           'CAPTURE_EVENTS_RX_TRIGGER', 'L3_DEFINE_VFD',
           'FR_VFD_STATIC', 'HIST_MULTICAST_LAT_STREAM',
           'NS_EN_RUNTIME_TOTAL_LATENCY', 'tagWNPVCStatus',
           'ATMVCCIStatus', 'DOT1X_SUPPLICANT_STATUS_FAILURE_CODE',
           'CA_DUPLEX_FULL', 'TCPISP_CONNECTIONDATA_TYPE_LISTEN',
           'MAX_MAX_SLOTS', 'TR_MAC_TOKENERROR',
           'NSDOT1XDownloadCertificateFiles', 'SMB_STD_TXBYTES',
           'ETBNC_TDAT', 'COLLISION_LONG', 'HT_CBA_1',
           'ATM_FRAME_COPY', 'NS_PMC_VPN_HW_TEST_INFO',
           'WN_DS3_FRMR_STATUS_ACE', 'FCFSPFConfig',
           'PPPEnhancedConfig', 'tagATMConnectionStatus',
           'NS_SET_STREAM_STATE', 'MIN_GAP_VALUE',
           'FR_CLK_FALLING_EDGE', 'TCPURIDistribution',
           'tagTCPConnRequestTrigger', 'NS_TRIGGER_OUT_L3_ERROR',
           'FR_CISCO_HDLC_RTD_IP', 'NSIPv6Header',
           'L3_RECEIVE_SETCAPTURETYPE', 'TR_STATUS_16MB',
           'NSHistSequencePerStreamInfo',
           'POS_TRANSCIEVER_MODE_MULTI',
           'NS_IPV6_STATELESS_ADDRESS_INFO', 'FR_STREAM_SMARTBITS',
           'Layer3IGMPJoin', 'NS_MULTI_IPV6_PAYLOAD_CHECKSUM_ERROR',
           'NSErrorCallbackFunc', 'NSDiffServRateInfo',
           'ATTRIB_CONNECT_XENPAK', 'L3MS_FIELD_BG_INDEX',
           'PPP_OE_NEGOTIATE_IPV6', 'NS_MULTICAST_KEEP_ALIVE_CONFIG',
           'tagATMPETLogFileReq', 'Layer3StreamLatencyInfo',
           'NSTCL_STRUCT_NOT_DEFINED', 'ATTRIB_OAM_CAPABLE',
           'NS_APPEND', 'FR_AGGREGATE_INFO', 'GPS_STATUS_NOT_READY',
           'WN_FEATURES_STREAM_COPY_PASTE',
           'NS_LOOKUP_KEY_CONTIGUOUS_16BIT_MAX', 'PPP_NO_ACTION',
           'COMMAND_MODE_SEND_ONLY', 'tagU64', 'NS_IPV6_HEADER',
           'SMB_STD_ERR_UNDERSIZE', 'GIG_BASE_NUM',
           'XFP_IDENTIFIER_300_PIN_XBI', 'tagFCGetGID_PN',
           'tagATMPETListHdr', 'NSIPv6ExtRouting',
           'NS_HIST_ACTIVE_TEST_PREP', 'tagFCPortConfigInfo',
           'L3_DEFINE_MULTI_ICMP_IPV6_STREAM', 'ATMPerPortBurstCount',
           'FC_LOG_LEVEL_MESSAGE', 'FR_LINE_SPEED_128000L', 'FC_LOGO',
           'REMOTE_MODE', 'TCP_SET_TEARDOWN_TIME_MODE',
           'ATM_VCC_INFO', 'FST_CAP_ALL_FRAMES',
           'FRReleaseCaptureFrameInfo', 'ATM_STR_PARAM_SIG_BW_SCR_0',
           'XFP_TRANSCEIVER_V_64_2b', 'XFP_TRANSCEIVER_V_64_2a',
           'WN_LOOPBACK_REMOTE_PHY', 'WN_DS3_LINE_STATUS',
           'FSTCaptureFrameInfo', 'tagNSICMPHeader', 'DAD_SUCCESSFUL',
           'ATTRIB_CONNECT_FIBER', 'L3_DHCP_STATE_REBOOTING',
           'IL3_DATA_INTEGRITY_ERRORS', 'ATM_DS1_PLCP_LINE_CELL_RATE',
           'NS_IPV6_ROUTER_PREFIX_COUNT_INFO',
           'AT_MODIFY_VC_ARRAY_SIZE', 'TCP_ARP_GET_ENTRIES',
           'CAPTURE_EVENTS_COLLISIONS', 'PPP_ENHANCED_CONFIG_INFO',
           'FR_AGGR_MC_LATENCY_PER_STREAM_INFO',
           'tagNSIPv6RouterPrefixCountInfo', 'GIG_VFD_STATIC',
           'FST_CAPTURE_INFO', 'NS_IGMP_RESET',
           'L3MS_FIELD_FRAME_RATE', 'L3_RECEIVE_TRACKING_TCP_ISP',
           'NS_ARP_CONFIG_INFO', 'L3_DHCP_ACTION_DONE',
           'L3_IGMP_LEAVE', 'PORT_DOWN',
           'tagLayer3_Tracking_Distribution',
           'CAUSE_IE_CONTENT_ERROR', 'ET_CMDLOG_NOCOMMENT',
           'CM_SX_7210', 'ATM_VCDB_LIST_INFO', 'GIGCaptureFrameInfo',
           'HTSTOP', 'ATM_CALL_PARAM_CALL_DELAY_FROM_START',
           'NS_IPV4_RATES', 'ATM_ATM25_FRAMING',
           'ATM_FEATURES_PROTOCOL_TRACE', 'MAX_DIFFSERV_VALUES',
           'CAPTURE_UNDERSIZE', 'tagHTTPURLObjLenArray',
           'ATMV_FIELD_TX_MODE', 'MAX_COOKIE_LEN', 'CM_LAN_3327A',
           'WN_T1E1_LINE_CFG', 'NS_TRACK_MIN_LAT',
           'NS_CAPTURE_STATUS_CRC_ERROR', 'NS_MOD_STREAMS_ARRAY',
           'WNStreamExtCfg', 'ATTRIB_HAS_DEBUG_MONITOR',
           'SMB_VG_PRIO_PROM_PKT', 'FAMILY_SMB6000',
           'NS_ARP_COMPLETE', 'SIG_EVENT_OUTGOING_SETUP',
           'MPLS_EXPLICIT_ROUTE_LSP_ID', 'tagNSIPv6CounterInfo',
           'NS_PATH_SIGNAL_LABEL_PPP', 'ETBAUD_2400',
           'ATM_ILMI_UME_COLD_START', 'ATM_SAR_CONFIG_FAILURE',
           'WAN_DS1_D4_LINE_FRAMING', 'tagWNFeatureCtrlAll',
           'NS_IPV6_CONTROL', 'tagFRMemoryDumpInfo',
           'WN_CAPTURE_STOP', 'PPP_NCPS_REQSENT',
           'NS_HIST_SEQUENCE_EXPRESS_INFO', 'NS_PROTOCOL_RATE_INFO',
           'ATM_STREAM_CONTROL', 'ATM_ELAN_MIN_AGING_TIME',
           'CM_AT_9015', 'L3_DEFINE_MULTI_UDPDHCP_STREAM',
           'FRAssignAddress', 'tagNSMLDTimestampInfo', 'CAPTURE_GOOD',
           'CM_L3_7505', 'tagFCFSPFConfig', 'NS_L2_STAT_COUNTER_INFO',
           'ETH_FIND_MII_ADDR_INFO', 'AT_ENCAP_TYPE_LLC_IPV4',
           'INVALID_NODE_OR_FABRIC_NAME',
           'FR_DEFINE_MULTI_UDP_STREAM', 'L3_STREAM_TCP_VLAN',
           'L3_MAX_GROUP_SIZE', 'HIST_LONG_LAT_TIME', 'CRC_ERROR',
           'NSDOT1XSupplicantControl', 'FC_ADD_LINK',
           'NS_MOD_IPV6_STREAM', 'L3_DELETE_STREAM',
           'CT_MAX_CARD_TYPE', 'MPLSExplicitObject',
           'INVALID_ICMP_LENGTH', 'DOT1X_SUPPLICANT_LOG_OFF',
           'WN_DS3_FRMR_STATUS_LOS', 'L3_TX_LATE',
           'Layer3CaptureData', 'FRAME_PROTOCOL_TYPE',
           'tagFCFSPFStatsInfo', 'CM_LAN_6310A',
           'ATM_ELAN_DEFAULT_ARP_RETRY_COUNT',
           'tagNSHalfDuplexRateInfo', 'TR_STATUS_BEACONING',
           'NS_MULTI_RX_LATENCY', 'CAUSE_INCOR_MSG_LEN',
           'SONET_PATH_BIP8_ERRORS', 'VC_TYPE_PVC', 'NS_DHCP_RESTART',
           'L3_AGGR_LATENCY_PER_STREAM_INFO',
           'XFP_OPTIONAL_VPS_LV_REG_MODE', 'NS_IGMPV3_GROUP_MOD',
           'L3_STREAM_PPP', 'ATM_DS1_ESF_LINE_FRAMING',
           'SONET_SECTION_OOF_ALARM', 'AT_CLP_ON',
           'FR_GROUP_STOP_CMD', 'FC_MULTI_SWITCH_CONFIG',
           'SERVICE_PARM_CREDIT', 'F64', 'CAUSE_BC_NOT_AUTH',
           'tagATCardSetSpeed', 'GIG_AFN_NEXT_PAGE',
           'NS_DEFINE_MULTI_VFD',
           'PROTOCOL_ENCAP_TYPE_HDLC_WITH_ETHERTYPE',
           'NSCommitStreamConfig',
           'L3_HIST_LATENCY_PER_STREAM_INFO_32',
           'CAUSE_UCR_UNAVAILABLE', 'ATM_LED_STATE_PHY_UP',
           'tagATMELANRegister', 'HTLED_XENPAK_PROFILE_CHANGE',
           'ETH_PHY_RX_ERROR', 'XENPAK_10GBASE_LW4',
           'FC_PORT_CONFIG_INFO', 'HTTPURLObjLenArray',
           'NSIPv6ExtRoutingHeader', 'NSU64IsEq', 'NS_PROT_COUNTERS',
           'IL3_PINGREQ_SENT', 'XFP_TRANSCEIVER_10GBASE_EW',
           'ATM_CALL_SETUP', 'XFP_TRANSCEIVER_10GBASE_ER',
           'Layer3TrackingLatency', 'ETH_TRANSMIT_INFO',
           'ATM_DS3_E3_AIS_ALARM', 'ETSTEP',
           'ATM_TD_QUAL_PEAK_RATES_W_TAG', 'INVALID_PORT_NAME',
           'tagATMTriggerInfo', 'FR_COMMIT_CFG',
           'FABRIC_PORT_NAME_NOT_REGISTERED',
           'UPDATED_FIRMWARE_NEEDED', 'NSTCL_INVALID_STRUCT_SIZE',
           'CONTINUOUS_BURST_MODE', 'PORT_TX_FAULT',
           'FR_PVC_RET_ADMIN_STATUS', 'NSHistEnhancedLatencyOption',
           'FRAME_PROTOCOL_ARP', 'NSIPv6StatelessAddressInfo',
           'MPLS_ROUTING_DOMAIN_CREATE',
           'FR_CAPTURE_PACKET_DATA_INFO', 'RXLED_NONE',
           'WN_CAPTURE_CTRL_ALL', 'NS_MULTI_IPV4_PING_REQUESTS_TX',
           'CountStructure', 'XENPAK_10GBASE_EW',
           'NS_MLD_CLEAR_COUNTERS', 'NS_QUERY_SUBPROCESS',
           'L3_RX_TAGS', 'GIGCounterInfo',
           'XENPAK_NVR_VERSION_NUMBER', 'tagNSDOT1XSupplicantCopy',
           'XENPAK_NVR_VENDOR_SPECIFIC', 'TCP_HTTP_COOKIE_CONFIG',
           'NS_DHCP_GET_ADDRESS',
           'DOT1X_SUPPLICANT_FAILURE_EAP_RESPONSE_REJECTED',
           'tagFCCounterInfo', 'L3MS_FIELD_VFD2_PATTERN', 'PET_TRAN',
           'L3MS_FIELD_VFD1_MODE', 'NSCTCaptureFrameInfo',
           'FC_LOG_LEVEL_WARNING', 'tagStreamIP', 'SYNEND',
           'ATMILMIInfo', 'tagMPLSRoutingDomainDeleteAll',
           'MPLS_LSP_ESTABLISHED', 'ET_CMDLOG_TIMESTAMP',
           'FR_ETSTAT_FRAMEWAITING', 'ATM_TX_CELLS', 'PPP_OE_SERVER',
           'ETBAUD_19200', 'ATM25_LOS_ALARM', 'ETMF_RXTRIG_COUNT',
           'FR_IPSUBNET_NOT_DEFINED', 'tagMPLSLDPTest',
           'NS_MLDV2_STATS_INFO', 'CAPTURE_LENGTH_LAST_64_BYTES',
           'ATM_LED_STATUS_ALARM_YELLOW', 'WNLMIDel',
           'tagLayer3TrackingDistribution', 'ATMConnTriggerStatus',
           'IP_INC_SEQ_NUM', 'CT_FASTX',
           'CALL_STATE_OUTGOING_CALL_PROC', 'NSDiffServV2CounterInfo',
           'NS_FIELD_UNCHANGED', 'StreamTCP', 'tagNSIGMPAddressVLAN',
           'FC_COS_QUERY', 'FC_CONFIG_COMMIT', 'FR_VFD_DECREASING',
           'CM_LAN_3302A', 'MAX_SLOTS_SMB200', 'CM_VG_7605',
           'XENPAK_LASI_RX_ALARM_ENABLE', 'ATM_CLIP_ESTABLISH_CLIENT',
           'L3_HIST_LATENCY_DISTRIBUTION_INFO',
           'L3_DHCP_STATE_REQUESTING', 'TCPTimeInfoCount',
           'MULTI_USER_INCAPABLE', 'ATM_ARP_CONN_ESTABLISHED',
           'TCP_HTTP_URI_CONFIG', 'SMB_VG_INV_PKTMARK',
           'NS_IPV6_EXT_DESTINATION_HEADER',
           'NO_ADDITIONAL_EXPLANATION', 'ATM_B_BC_UNI40_CBR',
           'VCDB_LOSS_OF_TRANS', 'NS_HIST_EN_ENHANCED_RUNTIME',
           'FR_PVC_RET_ACTIVE_STATUS', 'NSReportErrorEntry',
           'NSIPv6Address', 'NS_HIST_EN_TOTAL_LATENCY',
           'ETLOOPBACK_OFF', 'NS_MULTI_VLAN_PRI_6_RX',
           'tagUSBProtocolPower', 'HTLED_LINK_PAUSE', 'tagATMPETInfo',
           'ATM_TD_COMBO_RATES_W_TAG', 'tagPPPControlCfg',
           'ETHCardInfo', 'L3_MOD_STREAM_BINDING',
           'FST_CAPTURE_COUNT_INFO', 'WAN_DS1_E1_AIS_ALARM',
           'NS_HIST_RAW_SIGNATURE_INFO', 'LOGFILE_CLEAR',
           'NS_DEFINE_IP_STREAM_VLAN', 'AT_LOOPBACK_LOCAL',
           'ATM_PER_STREAM_BURST', 'GPS_STATUS_UNKNOWN',
           'WN_DS3_LINE_CFG_INFO', 'TCP_RESET_ALL',
           'CT_TRAFFIC_DIRECTION_NONE', 'ET_CMDLOG_NOVERSION',
           'IATM_SEVERE_ERROR_CB_RATIO', 'NS_DEFINE_ICMP_IPV6_STREAM',
           'L3_SET_START_STREAM', 'ET_ON', 'FRAME_SRC_SOCKET',
           'tagPPPEnhancedConfig', 'IATM_MISINSERTION',
           'MPLS_RSVP_REFRESH_ACK_DESIRED', 'WN_TRIG_DIR_TX',
           'tagATMELANDeregister', 'PPP_STATUS_WEACK_OPTIONS',
           'WAN_DS1_E1_SEV_ERROR_FRAME_ALARM', 'TCPDataLogEventRx',
           'WN_E1_120_OHM_HIRL', 'ATM_MAX_SETUP_CONNECTIONS',
           'CM_LAN_3325A', 'TCPArpEntry', 'U64',
           'ETH_PROTOCOL_DISABLED', 'PPP_PEER_IPADDR',
           'tagLayer3StreamJitterComboInfo', 'MPLS_LSP_COPY_DELTA',
           'NS_MULTI_RX_UNDERSIZE',
           'L3_DEFINE_MULTI_ICMP_IPV6_STREAM_VLAN',
           'FCEPortSettingConfig', 'L3_STREAM_IP',
           'GIG_PHY_LOOP_LOCAL_XCVR', 'TCP_SETUP_STREAM',
           'ETH_PHY_REMOTE_FAULT', 'FC_FSPF_SHUTDOWN',
           'WN_HIST_DEL_LINE', 'MII_AN_LINK_PARTNER',
           'GIGCaptureInfo', 'MEMORY_ALLOCATION_ERROR',
           'ATM_DS1_399_TO_533_BUILDOUT', 'NS_HIST_MULTICAST_LATENCY',
           'FR_LINK_STATUS_INFO', 'SSCOP_DEFAULT_MAX_PD',
           'SAAL_STATE_IDLE', 'CA_SIGNALRATE_2_048MB',
           'POS_CLOCK_SOURCE_INTERNAL', 'PPP_STATUS_OSI_ALIGNMENT',
           'XFP_TRANSCEIVER_1200_MX_SN_L', 'DEVICE_NOT_READY',
           'ETBNC_RCKB', 'ETBNC_RCKA', 'NS_HIST_LATENCY_PRECISION',
           'FCSwitchDestConfig', 'L3MS_FIELD_STREAM_START',
           'NS_START_ARPS', 'XFP_ENCODING_8B10B', 'RXLED_ALIGNB',
           'PPP_MOD_SRCIP', 'L3_PINGREP_SENT',
           'XFP_CONNECTOR_FIBERJACK', 'TRFC_PCF_CLAIMTOKEN',
           'PET_SSCOP_MSG_TRAFFIC', 'NS_WRITE_MDIO',
           'MPLS_EXPLICIT_ROUTE_AS', 'GIG_STRUC_MEMORY_READ',
           'DOT1X_SUPPLICANT_FAILURE_USER_LOGOFF', 'FR_CARD_DTE',
           'CAUSE_NORMAL_CALL_CLEAR', 'GIG_RECEIVE',
           'NS_ARP_ONE_STREAM', 'NS_DHCP_RENEW', 'CAPTURE_COLLISION',
           'WN_CONN_PPP', 'WN_STREAM_DEL_ALL',
           'NS_MULTICAST_COUNTER_INFO', 'NS_HIST_SEQUENCE',
           'NS_DIFF_SERV_COUNTER_INFO', 'S8', 'TCPURLOne',
           'FR_LINE_SPEED_832000L', 'L3_STATUS_6710',
           'FRAME_FLAG_SOURCE_FRAME_FOR_COPY',
           'CAPTURE_EVENTS_NO_SIGNATURE', 'HTLED_FULL_DUPLEX',
           'HT_GET_LATENCY', 'ATM_CALL_PARAM_INTER_CALL_GAP',
           'NS_CT_CONFIG_CAPTURE_PARAMS', 'tagNSDiffServV2RateInfo',
           'PAT_1111', 'FCWWN', 'ATMPVCADNewParams',
           'NS_AGGR_LATENCY_DISTRIBUTION_INFO',
           'NS_DEFINE_MULTI_RTP_STREAM_VLAN',
           'tagLayer3ModifyStreamDelta', 'ETH_PROTOCOL_PARAMETERS',
           'XFP_TRANSCEIVER_64_2a', 'PET_SIG_HEADLINES',
           'L3StreamBGConfig', 'tagNSWISLineStatusInfo',
           'ATM_OC12_FRAMING', 'FST_CAPTURE_DATA_INFO',
           'MDIO_ACCESS_8_VIA_0_3', 'ARP_ALL_VLAN_TAG',
           'NS_COMMIT_STREAM_CONFIG_OBJECT', 'tagStreamIPVLAN',
           'FRAME_DST_SOCKET', 'HT_CBA_2', 'HT_CBA_3', 'HT_CBA_4',
           'HT_CBA_5', 'HT_CBA_6', 'HT_CBA_7', 'HT_CBA_8', 'HT_CBA_9',
           'WN_DS3_LINE_CFG', 'tagNSLinkFaultConfig',
           'TR_MAC_FREQUENCYERROR', 'tagNSStreamIDTableInfo',
           'WN_T1E1_ALARM_COUNTER_INFO', 'ATM_ELAN_MTU_1516',
           'L3_AGGR_V2_LATENCY_PER_STREAM_INFO', 'NSMPLSHeader',
           'CONN_STATE_INTER_BURST_DELAY', 'PVCAD_DEFAULT_PORT',
           'ETBNC_3', 'L3_CONTINUOUS_MULTIBURST_MODE',
           'TCP_SET_ISP_CONNECTIONDATA_ARRAY', 'WN_RFC1490_MAX_TYPE',
           'NSDOT1XSupplicantPortConfig', 'tagWNPVCCtrl',
           'NS_ALTERNATE_KEY_CONFIG', 'SERVICE_PARM_CONCURRENT_SEQS',
           'ATTRIB_SPEED_4MB', 'ATM_ILMI', 'RXLED_ALIGNAB',
           'CAPTURE_EVENTS_CRC_ERRORS', 'NSU64IsGE', 'NSPhyConfig',
           'PPP_OE_IPV6_ENABLE', 'ATTRIB_SPEED_1000MB', 'NSU64IsGT',
           'ATM_CALL_DIST_BURSTY', 'ENCAP_TOKEN_RING',
           'MAX_SUPPLICANT_DELTA', 'DOT1X_SUPPLICANT_START',
           'FAST7410_STATUS_LINK', 'MPLS_RSVP_COUNT_INFO',
           'CONTROLLER_SMB200', 'ATMUNIParams',
           'XENPAK_MODULE_10GBASE_EW', 'IL3_ARP_REQ',
           'XENPAK_MODULE_10GBASE_ER', 'WAN_E1_BUILDOUT',
           'WN_DS3_FRMR_STATUS_OOF', 'FR_CAP_CNT_INFO',
           'tagLayer3CaptureSetup', 'ATM_GLOBAL_TRIGGER_PARAMS',
           'L3_CTRL_IPV6_ND_RESPONSES_WITH_UNIQUE_MAC',
           'FR_RFC1490_RTD_NLPID', 'NS_DUP_STREAM',
           'ATM_B_BC_UNI40_NON_REAL_TIME_VBR',
           'CAUSE_UCR_UNAVAILABLE_3_0', '_HubSlotPort',
           'L3MS_FIELD_NETMASK', 'NOT_MULTI_USER_CHASSIS',
           'STR_CONN_TYPE_INCOMING_SVC', 'tagATMVCDBPurge',
           'PPPO_USENONE', 'NS_MULTI_IPV4_ARP_REPLIES_RX',
           'ATM_STREAM_DETAIL_INFO', 'NS_MULTI_TX_IPV6_FRAMES',
           'NS_WIS_PSLM_ALARM', 'NSPMCHifnMemTestInfo',
           'STREAM_PROTOCOL_UDP_IPV6', 'tagPPPDelCfg',
           'L3_HIST_TCP_CONNECTION_INFO', 'tagPOSCardSetSpeed',
           'L3_DHCP_ACTION', 'tagNSDOT1XSupplicantPortConfig',
           'ATM_DS3_E3_LINE_INFO', 'ATMV_FIELD_RATE_CLASS', 'FR_LINE',
           'L3_USB_MODE_OFF', 'ATM_MISDELIVERED',
           'ATM_ELAN_MIN_ARP_RETRY_COUNT',
           'tagLayer3HistDistribution', 'L4MS_FIELD_TCP_LENGTH',
           'PPP_ENHANCED_CONFIG', 'tagLayer3IGMPLeave', 'HVFD_RANDOM',
           'FRCardCfg', 'ETH_RSMII', 'UNKNOWN_STACK',
           'tagIGMPJoinLeaveTimeStampInfo', 'FR_TRIG_DISABLE',
           'PPP_LCP_IPCP_STARTING', 'L3_STREAM_TRANSMIT_GROUP_MODE',
           'ISMB_STD_ERR_ALIGN', 'NS_USB_MODE_ON',
           'FRAME_UDP_HEADER_LENGTH',
           'NS_DEFINE_MULTI_IPV6_OVER_IPV4_TUNNELING',
           'L3_RECEIVE_TRACKING_LATENCY_PRECISION',
           'ETHExtendedCounterInfo', 'NS_SPEED_OC3',
           'ATM_STR_PARAM_SIG_CLIPPING',
           'L3_MODIFY_STREAM_ARRAY_SIZE',
           'FC_PUBLIC_DISCOVERY_COMPLETE_STATE', 'ETH_TRIGGER',
           'PPP_IPV6_CONFIG_INFO', 'tagFCNode',
           'HUB_ACT_INDEPENDENTLY', 'tagNSIPv6Config', 'CM_AT_3451A',
           'ATM_STR_ACTION_CONNECT', 'AT_ENCAP_TYPE_VCMUX_BRIDGED',
           'PPP_STATUS_SEARCH_INFO', 'ETH_PHY_UNUSED_12',
           'FR_HIST_SUMMARY_INFO', 'ETH_PHY_UNUSED_15',
           'ETH_PHY_UNUSED_14', 'XAUI_PRBS_STATUS_INFO',
           'NSCTCaptureFrameCountInfo', 'TCPTestStatus',
           'NS_CT_STOP_CAPTURE', 'WN_DS3_ALARM_COUNTER_INFO',
           'XENPAK_OPTICAL_MT_RJ_TYPE', 'L3_PINGREQ_RECV',
           'L3MS_FIELD_SPRT', 'tagNSOAMRateInfo', 'CT_FC',
           'NSDiffServV2Config', 'FR_DISABLE_PORT',
           'XFP_CONNECTOR_FC_COAXIAL_HEADERS',
           'FR_LINE_SPEED_1024000L', 'AT_SONET_PATH_RDI_ALARM',
           'ATM_B_BC_NO_TIMING_INFO',
           'NS_DEFINE_TCP_IPV6_STREAM_VLAN',
           'PROTOCOL_ENCAP_TYPE_MPLS_STACK',
           'NS_MOD_SMARTBITS_STREAM', 'FR_HIST_RAW_TAGS',
           'ATM_CALL_PARAM_CALL_LENGTH', 'SIMPLE_COUNTER_AVERAGE',
           'ETH_PHY_LINK_PARTNER_AUTONEG_CAPABLE',
           'CAUSE_TIMER_RECOVERY', 'ATM_CALL_LENGTH_CONST_FROM_SETUP',
           'GIGVersions', 'PORT_LINK_DOWN', 'NS_PORT_TRANSMIT',
           'ETBNC_UNDRB', 'tagNSRateInfo',
           'NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_12',
           'NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_13',
           'NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_10',
           'NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_11',
           'NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_14',
           'NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_15', 'FRAME_VERSION',
           'L3_AGGR_MC_LATENCY_PER_STREAM_INFO',
           'tagNSSonetAlarmCounterInfo',
           'PORT_PUBLIC_DISCOVERY_COMPLETE', 'GIG_PHY_LOOP_LOCAL_PHY',
           'L3_DHCP_RESTART',
           'DOT1X_SUPPLICANT_FAILURE_EAPOL_START_NO_RESPONSE',
           'NSTCL_INVALID_MSG_FUNC', 'IL3_PINGREP_SENT',
           'POS_TRANSCEIVER_MODE_SINGLE', 'ATTRIB_GBIC',
           'NS_CAPTURE_SPECIAL_TYPE',
           'NS_DOT1X_SUPPLICANT_SESSION_STATS_INFO',
           'NSDetailedLibVersionStructure',
           'FR_DEFINE_MULTI_ARP_STREAM', 'ADDRESS_AUTOCONFIG_QUEUED',
           'CAPTURE_OFF', 'CT_WAN_FRAME_RELAY',
           'SYMBOLIC_PORT_NAME_NOT_REGISTERED', 'RXLED_ANY',
           'GIG_TRIGGER2_ONLY', 'SetLatencyStructure',
           'WN_STREAM_CTRL', 'FR_T1E1_LINE_INFO',
           'NS_WIS_INJECT_LINE_RDI_ALARM', 'FR_TX_ADDRESS_INFO',
           'L3_DEFINE_MULTI_TCP_IPV6_STREAM',
           'XFP_CDR_SUPPORT_FOR_11_1_GBS',
           'GIG_TRANSMIT_ERROR_GENERATE', 'NS_DIFF_SERV_RATE_INFO',
           'ATM_SAAL_RELEASE', 'AT_BASE_NUM',
           'POS_TRANSCEIVER_MODE_MULTI', 'NSSlotInfo',
           'PORT_ALREADY_LINKED', 'L3_ARP_REPLIES',
           'FR_DS1_B8ZS_ENCODING', 'FRLineCfg',
           'SONET_LINE_AIS_ALARM', 'tagNSIGMPAddress', 'CM_ML_7710',
           'AT_SONET_LINE_RDI_ALARM', 'tagLayer3StreamGroup',
           'POS_SPEED_OC1', 'POS_SPEED_OC3', 'XENPAK_S_64_3B',
           'XENPAK_S_64_3A', 'TCP_ARP_ALL', 'ET_NO_SECURE',
           'FR_HIST_LATENCY_PRECISION', 'FRVersionInfo',
           'NS_MULTI_RX_FRAMES', 'tagNSStreamMultiConfigInfo',
           'IPV6_EXT_AUTHENTICATION', 'L4MS_FIELD_STARTING_OFFSET',
           'ATM_MAX_CALL_ADDRESSES', 'HTLED_100MB',
           'XFP_CDR_LINESIDE_LOOPBACK_MODE_SUPPORTED',
           'FR_LINE_SPEED_38400L', 'FSTProtocolCounterInfo',
           'ATM_CALL_LENGTH_CONST', 'L3_CAPTURE_BAD_TYPE',
           'WN_DEFINE_MULTI_UDP_STREAM', 'NSMLDv2GroupConfig',
           'L3_RECEIVE_TRACKING_V2_LATENCYDISTRIBUTION',
           'ATM_STREAM_TRIGGER_PARAMS', 'GIG_STRUC_TEST_FLASH_CRC',
           'NS_HW_CONFIG_INFO', 'UNI_DEFAULT_TMR_T398',
           'NS_MULTI_XS_COLLISION', 'ATMPETEntryRtvl',
           'L3_RECEIVE_TRACKING_MC_LATENCYPERSTREAM',
           'tagNSRealTimeTrackingCounters', 'XENPAK_NVR_PROTOCOL',
           'ETH_EXTENDED_COUNTER_INFO', 'CM_POS_3502A',
           'WN_T1E1_LINE_STATUS',
           'L3_DEFINE_MULTI_UDP_IPV6_STREAM_VLAN', 'ATM_MISINSERTION',
           'L3_MOD_IP_STREAMS_VLAN', 'SCHEDULE_MODE_GAP',
           'NS_MULTI_VLAN_PRI_4_RX', 'TCP_HTTP_CONNECTION_CONFIG',
           'MII_SELECT_SMII', 'SSCOP_DEFAULT_RX_WINDOW', 'ULong',
           'tagL3StreamExtension', 'CAUSE_LOC_PRIV_REM',
           'tagNSL3StatInfo', 'CLASS_OF_SERVICE_NOT_VALID',
           'ATM_CALL_PARAM_CDVT', 'NS_IGMP_LEAVE', 'FR_NIC_EIA_RD_TM',
           'NS_DOT1X_DOWNLOAD_CERTIFICATE_FILES', 'PVCAD_DOWN',
           'CAUSE_VPI_VCI_UNACCEPTABLE', 'PPP_STATUS_OUR_IFACE_ID',
           'IP_DEC_SRC_MAC_DST_MAC', 'tagATMCallSetupParams',
           'tagGIGCaptureInfo', 'FC_WWN_INFO',
           'IGMP_INIT_ALWAYS_SEND_V2_LEAVE_REQUEST',
           'L3_DEFINE_MULTI_IPX_STREAM',
           'NS_WIS_INJECT_FRAMING_ERRORS', 'WN_DS3_FRMR_STATUS_AIS',
           'tagATMCallAddrList', 'tagARPEntry',
           'CA_SIGNALRATE_1_544MB', 'tagNSSonetConfig',
           'FC_SET_TX_MODE', 'MPLSLabelDataInfo',
           'ATM_STR_STATE_CONN_RELEASED', 'PET_SIG_MSG_TRAFFIC',
           'NSMultiCounterInfo', 'L3_DHCP_EXTENDED_HOST_INFO',
           'L3_MOD_UDPDHCP_STREAM', 'ATM_FRAME_DEF',
           'ISMB_STD_ERR_COLLISION', 'ATM_TRIGGER_MODE_AAL5',
           'ATM1_SAR_MAIN_FW_VERSION', 'FRAME_SEN_MAC_ADDR',
           'CT_FILTER_OPERATOR_PAT1_OR_PAT2', 'TCP_CONNECT',
           'NS_MULTI_IPV4_ARP_REPLIES_TX', 'POSConfig',
           'StreamIPv6VLAN', 'HVFD_NONE', 'TR_LATENCY',
           'FC_FABRIC_LINK_CONFIG_INFO', 'IL3_IP_CHECKSUM_ERRORS',
           'WN_CARD_CLK_INTERNAL', 'L3_CAPTURE_ALL_TYPE',
           'SONET_LINE_AIS_ALARMS', 'FLUSH_ERROR', 'WN_PVC_CTRL',
           'NSCopyTxConfigInfo', 'LOGFILE_SIZE_1024',
           'L3_WRITE_DATA_CHECK', 'UNI_DTE', 'RXLED_OVERSIZEAB',
           'FCDomainStats', 'NSCTConfig', 'WN_TRIG_COMP2_ONLY',
           'tagNSIPv6IPv4AddressMapInfo', 'WN_STREAM_EXT_CFG',
           'ISMB_STD_RXTRIGGER', 'TR_LINEERRORS', 'IATM_TX_AAL_PDU',
           'NS_TRANSMIT_PADDING_MODE', 'ATM_STR_PARAM_DEST_ATM_ADDR',
           'MII_STATUS10_1000BASE', 'FR_START_CMD', 'StreamSmartTCP',
           'FRAME_TCP_HEADER_LENGTH', 'ITR_INSERTIONS',
           'FRAME_ACK_BIT', 'MII_REGISTER_AN_ADVERTISEMENT',
           'Layer3StreamTransmitMode', 'tagATMPETReq',
           'L3_DEFINE_MULTI_UDP_STREAM', 'NS_TRIGGER_OUT_RX',
           'ATM1_SAR_BOOT_FW_VERSION', 'TCPISPReservedStructure',
           'XFP_AUX_MONITORING_MINUS_5_2V_SUPPLY_VOLTAGE',
           'ATM_E3_CELL_FRAMING', 'WN_T1E1_LINE_DEL', 'HTLED_OFF',
           'MII_AN_FLOW_CONTROL', 'FR_CRC4_DISABLE_LINE_FRAMING',
           'HTTRANSMIT_STD', 'CM_AT_3453A', 'PPP_NCPS_STARTING',
           'FST_PROTOCOL_GENERATE_ARP', 'tagATMFrameCopyReq',
           'tagFCLinkDown', 'POSSonetPayloadConfig', 'StreamICMP',
           'tagNSReportErrorList', 'WN_DS3_M13_LINE_FRAMING',
           'CM_WN_3415', 'FST_PROTOCOL_PARAMETER_INFO',
           'ATM_DS1_E1_LOCD_ALARM', 'GIG_STRUC_VFD3_READBACK',
           'L3_MOD_IPX_STREAM', 'WN_CHANNEL_TX_CFG',
           'ATM_STR_STATUS_ARP_RETRY_COUNT',
           'DIFFSERV_AGGREGATE_IPV4_IPV6_COUNTERS',
           'XAUI_PRBS_TEST_RUNNING', 'CALL_STATE_RELEASE_REQUEST',
           'L3_HIST_ACTIVE_TEST_INFO', 'ISMB_STD_TXBYTES',
           'WN_TRIGGER_DEL_ALL', 'ARP_INNER_VLAN_TAG',
           'NSMDIORegister', 'tagNSProtocolHeaderInfo',
           'PET_SSCOP_TMR_ACTIVITY', 'WN_DS1_B8ZS_ENCODING',
           'tagLayer3DHCPPortCounterInfo', 'GIG_STATUS_10MHZ',
           'ISMB_STD_TXFRAMES', 'tagWNDS3LineCfg',
           'MII_AN_100BASE_TX', 'FC_HBA_MODE_START', 'XENPAK_10GFC',
           'MII_AN_100BASE_T4', 'L3_RECEIVE_GETCAPTUREPACKET',
           'CM_LAN_3321A', 'NS_MLD_CONFIG', 'NS_MOD_IPV6_EXT_ROUTING',
           'tagNSMLDGroupInfo', 'L3_HIST_TEST_RAW_TAGS',
           'RUNTIME_MODE_OFF', 'FR_UNI_UP', 'FR_PVC',
           'L3_HIST_SEQUENCE', 'L3_CAPTURE_PACKET_DATA_INFO_MT',
           'NS_MULTI_IPV4_ICMP_UNREACHABLE_RX',
           'FR_TRIG_COMP1_OR_COMP2', 'ATMConnectionEx',
           'AT_VC_CLIP_COUNTER_INFO', 'ATTRIB_TERAMETRICS',
           'POS_CLOCK_SOURCE_LOOP_TIMED', 'NS_UDP_IPV6_STREAM_INFO',
           'NS_HIST_COMBO_PER_STREAM', 'ATM2_RXD_FPGA_VERSION',
           'NS_MLDV1_LISTEN', 'FR_LINE_SPEED_1152000L',
           'XENPAK_NVR_OPTICAL_CONNECTOR', 'FR_HIST_RESET',
           'FR_HIST_RAW_TAGS_INFO', 'NS_CT_CLEAR_BUFFER',
           'XENPAK_I_64_2R', 'tagWNStreamExtCfg', 'ATM_STM4_FRAMING',
           'ISMB_STD_RXFRAMES', 'HUB_SLOT_PORT_UNAVAILABLE',
           'NS_HIST_RAW_TAGS_INFO', 'HTLED_ORANGE',
           'HTLED_LINK_10MHZ', 'tagNSMLDv1Listen',
           'NSDOT1XSupplicantSessionStatsInfo', 'ETBNC_UNDRA',
           'NS_L2_STAT_RATE_INFO', 'NS_MULTI_TX_IPV4_FRAMES',
           'L3_DEFINE_ICMP_IPV6_STREAM',
           'tagNSIPv6RouterDiscoveryCountInfo',
           'INVALID_SOURCE_ADDRESS', 'XFP_OPTIONAL_SMU_SUPPORT_MODE',
           'NS_PHY_DEFAULT_SPEED_100MHZ', 'WN_HIST_CTRL',
           'PPPO_USEPAPAUTH', 'INVALID_SOLICITED_FLAG',
           'CT_TOKENRING', 'GIGTrigger', 'ATM_ILMI_UME_INACTIVE',
           'NS_WIS_SONET_FRAMING', 'FR_NIC_EIA_RD_CTS',
           'FW_FC_FS_RUN_TEST', 'NS_ALTERNATE_KEY_HASH_CONFIG_INFO',
           'WN_DS3_FRMR_STATUS_FERF', 'FR_DS1_AMI_ENCODING',
           'tagGIGRateInfo', 'NS_IGMPV3_LEAVE_ALL', 'tagS16',
           'tagNSChassisCardInfo', 'ATM_TD_AGGR_PEAK_RATE',
           'GIG_FILL_SELECTED', 'NS_CAPTURE_SETUP', 'GIGCaptureSetup',
           'XENPAK_TX_ALARM_PMA_PMD_TRANSMITTER_LOCAL_FAULT_ENABLE',
           'tagATVCCLIPCounterInfo', 'RTP_PAYLOAD_G711U',
           'tagWNChannelAttribCfg', 'NS_MULTI_RX_CRC_ERROR',
           'XFP_CONNECTOR_MU', 'L3_MOD_IP_STREAM_VLAN',
           'tagATMConnTriggerInfo', 'L3_CAPTURE_STATUS_ALIGNMENT',
           'ATMExtVCCIStatus', 'CAPTURE_EVENTS_OVERSIZE',
           'CM_POS_3500B', 'CM_POS_3500A', 'HUB_DEFAULT_ACTION',
           'FR_SET_RELEASE_CAP_CNT', 'L3MS_FIELD_IP_MAN_MODE',
           'tagStreamSmartBits128', 'AT_ENCAP_TYPE_LLC_ROUTED',
           'ATTRIB_SPEED_622MB', 'L3_STREAM_ICMP_VLAN',
           'CAUSE_IE_INV_OR_NOT_AVAIL', 'ATM_SAAL_ESTABLISH',
           'GIGTransmit', 'FR_MOD_PVC_MAP', 'NS_DEFINE_TCP_STREAM',
           'GIG_CONTROL_VLAN_GENERATE',
           'NS_HIST_LATENCY_PRECISION_INFO', 'L3_MODIFY_STREAMS',
           'XENPAK_RX_ALARM_PMA_PMD_RECEIVER_LOCAL_FAULT_ENABLE',
           'ATM_CALL_PARAM_CALL_ADDR_INDEX',
           'tagNSHistLatencyDistPerStream', 'NS_IPX_STREAM_INFO',
           'tagTCPConnTimeInfo', 'PET_SSCOP_API_TRAFFIC',
           'L3_DEFINE_MULTI_STREAM_BINDING', 'tagNSMLDv2StatsInfo',
           'XENPAK_ALARM_CONFIG', 'L3_HIST_LATENCY_INFO',
           'ETH_PHY_MLT3_CODE_ERROR', 'MPLS_RSVP_PHP_ENABLE',
           'tagFSTCaptureDataInfo', 'XAUIPRBSConfig', 'ETSTOP',
           'XFP_AUX_MONITORING_APD_BIAS_VOLTAGE', 'TCPURIOne',
           'tagNSIPv6ExtAuthentication', 'FC_SEND_CUSTOM',
           'NSIPv4OptionHeader', 'NSHistRawSignatureInfo',
           'FRGetCaptureCountInfo', 'ECHO_MODE',
           'ETHEnhancedStatusInfo', 'ATMSchedParams',
           'FRGetCaptureFrameCmdInfo', 'IGMP_FORCE_RESPONSE',
           'FR_AGGR_RAW_TAGS_INFO', 'SONET_PATH_FERF_ALARM',
           'NS_AGGR_V2_LATENCY_INFO', 'HTTRANSMIT_COL',
           'TIMESTAMP_CLOCK_SOURCE_40_MHZ', 'tagFRCardCfg',
           'FR_LINE_SPEED_1792000L', 'NS_PHY_DEFAULT_CONFIG_INFO',
           'L3_READ_DATA_CHECK', 'ATM_DCC_AFI', 'ATM_TRIGGER_DIR_RX',
           'MAX_REPORT_ERRORS', 'TCP_FLAG_SYN',
           'tagATMStreamParamsCopy', 'GIG_STATUS_CAPTURED_FRAMES',
           'MAX_ATM_PORT_BURST_SIZE',
           'tagNSIPv6NextHopResultCountInfo',
           'XFP_TRANSCEIVER_OC_48_LR', 'FR_STREAMID_NOT_DEFINED',
           'Layer3DHCPPortCounterInfo',
           'CAUSE_NO_ROUTE_TO_TRANSIT_NET', 'PPPDelete',
           'L3_STREAM_TRANSMIT_STREAM_MODE',
           'ATMConnection64InfoSummary', 'FRAME_PROTOCOL_TCP',
           'tagATMStreamSearchInfo', 'NSTxConfig',
           'DOT1X_SUPPLICANT_USER_NAME',
           'CT_FILTER_OPERATOR_MATCH_ALL', 'ATM_RATE_CLASS_CBR',
           'WN_TRIGGER_CFG', 'NS_IPV6_IPV4_ADDRESS_MAP_INFO',
           'TCP_GET_TEST_STATUS', 'WNT1E1LineCtrl',
           'WN_CAP_RELEASE_CNT', 'GIG_SINGLE_BURST_MODE',
           'ATM_CALL_PARAM_CELL_HEADER',
           'NS_HIST_MC_LATENCY_PER_STREAM_INFO', 'PPPControlCfg',
           'tagATMStreamControl', 'tagTCPURIDistribution',
           'PORT_INVALID_STATE_ERROR',
           'PORT_IP_ADDRESS_NOT_REGISTERED',
           'XENPAK_TX_ALARM_TRASMITTER_FAULT_ENABLE', 'SYNC_NONE',
           'ETH_LATENCY_INFO', 'L3_DEFINE_UDPDHCP_STREAM',
           'PORT_NOT_LINKED', 'PPP_STATUS_PPPOE_SOURCE_MAC',
           'tagTCPISPReservedStructure', 'PPP_LCP_IPCP_CLOSING',
           'NS_IPV6_STATELESS_ADDRESS_COUNT_INFO',
           'NS_TRIGGER_OUT_TX', 'tagFRLmiCfg',
           'AT_SONET_SECTION_LOF_ALARM', 'FR_AGGR_V2_LATENCY_INFO',
           'WNPVCStatus', 'PET_XDATA', 'HBA_EMULATION_MODE',
           'L3_IGMP_INIT', 'BUFFER_ONESHOT', 'AT_VC_INTERLEAVE_ALL',
           'L3_DHCP_ACTION_DECLINE', 'FC_STATS_TYPE_PORT_COUNTS',
           'tagWNDS3LineCtrl', 'NS_MOD_TCP_STREAM',
           'L3_DHCP_GET_ADDRESS', 'PPP_STATS_RESET',
           'NS_MULTI_RX_DATA_INTEGRITY_ERROR', 'WN_TRIG_DIR_RX',
           'L3_IP_CHECKSUM_ERRORS', 'tagWNT1E1LineDel',
           'LCP_CLOSE_REASON_UNKNOWN',
           'NS_HIST_TEST_SEQUENCE_PER_STREAM', 'ITR_MAC_LOSTFRAME',
           'PPP_OE_SVC_ERR', 'NS_IPV4_COUNTERS',
           'AT_ENCAP_TYPE_VCM_IPV4', 'tagLayer3ModifyStreamArray',
           'FR_LMP_LMI', 'ET_CMDLOG_NOWRITE', 'FRAME_TIME_TO_LIVE',
           'VCDB_LOSS_OF_DELETED', 'L3_DHCP_STATE',
           'tagNSSonetCounterInfo', 'NS_IGMPV2_ALL_INFO',
           'GIG_TRIGGER_OFF', 'POS_TRIGGER1_AND_TRIGGER2',
           'ATM_STR_PARAM_SIG_FW_SCR_01',
           'tagCardTRDVersionStructure',
           'NS_DEFINE_MULTI_SMART_TCP_STREAM', 'FRAME_OPERATION',
           'FRAME_ICMP_HEADER_CRC', 'WN_E1_CRC4_DISABLE',
           'USBProtocolPower', 'ATM_DS1_D4_LINE_FRAMING',
           'ETBNC_RXEA', 'GIG_STRUC_ALT_TX_READBACK', 'ATPortConfig',
           'L3_STREAM_SMART_TCP', 'SIG_EVENT_SAAL_ESTABLISH',
           'L3_MOD_ICMP_STREAMS', 'IP_INC_SRC_IP_AND_DST_IP',
           'StreamSmartBits128', 'tagFrameSpec',
           'FR_AGGR_SEQUENCE_INFO', 'NS_PHY_CONFIG_INFO',
           'tagATMStreamTriggerTimeStatus', 'CHANNEL_DOWN',
           'tagRTPCounterInfo', 'FR_HIST_L3_LATENCYBYTIME',
           'tagNSCTCaptureParams', 'L3_DEFINE_STREAM_MPLS',
           'STREAM_PROTOCOL_PPP', 'FCPlogi',
           'L3_DEFINE_MULTI_SMARTBITS_STREAM', 'ATM_PVCAD_RESPONSE',
           'NSCTCaptureFilterParams', 'XENPAK_ALL_FIELD',
           'ETH_PROTOCOL_RESPOND_PING', 'ATM_SIG_EMUL_INFO',
           'L3_GROUP_DELETE_GROUP', 'NS_CT_CAPTURE_FRAME_V2_INFO',
           'PPPDelCfg', 'TR_MODE_MAU', 'L2_READ_COUNTERS',
           'GRE_PAYLOAD_IPV6', 'GRE_PAYLOAD_IPV4',
           'NS_DHCP_PORT_SESSION_INFO', 'Layer3DHCPPortSessionInfo',
           'tagFRPvcTableEntry', 'CT_ATM', 'ATMClassicalIPInfo',
           'WN_DS1_E1_SEV_ERROR_FRAME_ALARM', 'NS_ICMP_HEADER',
           'NS_DOT1X_SUPPLICANT_RESET', 'ET_CMDLOG_FIELDNAMES',
           'ATM_STR_PARAM_GEN_CDVT', 'TRFC_PCF_AMP',
           'MEDIA_AUTO_SENSE_MODE', 'STREAM_PROTOCOL_ARP',
           'DOT1X_SUPPLICANT_FAILURE_UNKNOWN',
           'CT_FILTER_PROTOCOL_ID_UDP', 'tagS32',
           'NS_SONET_PATH_RDI_ALARM', 'NS_TCP_HEADER',
           'MAX_ENCAPHEADER_LEN', 'WN_CHAN_CFG_INFO', 'FSTVLAN',
           'NSDOT1XSupplicantCopy', 'tagETHExtendedCardInfo',
           'ETH_FILL_PATTERN_INFO', 'COLLISION_OFF',
           'FR_HIST_L3_PACKETTAG', 'NS_SONET_LINE_BIP_ALARM',
           'ATM1_AM29240_VERSION',
           'L3_HIST_TEST_LATENCY_DISTRIBUTION',
           'MPLS_RSVP_SERVICE_GUARANTEED_OBJECT',
           'AT_PORT_COUNTER_INFO', 'ATM_DS3_CELL_FRAMING',
           'FR_NIC_EIA_RD_DTR', 'tagPOSTrigger', 'CM_FBC_3601A',
           'PPPStatusSearchInfo', 'WN_PERIODIC_CFG_INFO',
           'L3_ENGINE_TRANSMIT', 'NS_MOD_ARP_STREAM', 'HVFD_INCR',
           'FR_HIST_V2_LATENCY_DE_INFO', 'FR_STREAM_UDPDHCP',
           'ATM_DS1_533_TO_655_BUILDOUT', 'ATTRIB_SPEED_2488MB',
           'NSTCL_PARAMETER_TYPE', 'FR_STATUS_EIA_DTR',
           'MLD_FORCE_LEAVE_RECORDS', 'ETDP_5555',
           'tagATMConnectionInfoSummary', 'NS_MULTI_VLAN_PRI_2_RX',
           'LCP_CLOSE_AUTH_FAILURE_LOCAL_REJ',
           'NSIPv6IPv4AddressMapInfo', 'XFP_CONNECTOR_MT_RJ',
           'tagL3ModifyStreamArray', 'NS_DHCP_RELEASE_ADDRESS_ALL',
           'tagNSIPv6OverIPv4Tunneling', 'FR_TRIG_DIR_TX',
           'GIG_PREAMB_LEN_28_BYTES', 'tagNSMFGPROM', 'tagNSCTConfig',
           'NS_DOT1X_SUPPLICANT_MODIFY', 'NSMFGPROM',
           'WN_E1_CRC4_ENABLE', 'XENPAK_V_64_3', 'tagTCPURLOne',
           'L3_DHCP_HOST_INFO', 'L3_PINGREQ_SENT',
           'ATM_STR_PARAM_DEST_IP_ADDR', 'PPP_DEL_SESSION',
           'PORT_LOSS_OF_SYNC', 'ATMStream', 'tagTCPCookieOne',
           'TCP_GET_ALL_CONNECTIONS_STATUS', 'ATM_COMP1_OR_COMP2',
           'MPLSLSPDeleteAll', 'WN_DS3_CARD_BASE',
           'tagNSIPv6StatelessAddressEntry', 'L3_READ_COUNTERS',
           'GIG_STRUC_AUTO_FIBER_NEGOTIATE', 'L3_DHCP_V2_HOST_INFO',
           'PET_TRACE', 'tagPPPSessionStatsInfo', 'FR_STREAM_8023',
           'CAPTURE_ERRS_RXTRIG', 'PPP_DEL_ALL', 'ATMPETLogFileReq',
           'ETH_PHY_LINK_PARTNER_REMOTE_FAULT', 'tagSlotUserInfo',
           'RESET_STACK', 'NS_EN_RUNTIME_TOTAL_LATENCY_INDEX',
           'tagINT64_T', 'XENPAK_NVR_FIBER_TYPE',
           'CAUSE_LOC_NET_BEYOND', 'TCPICMPPing', 'TR_SPEED_4MBITS',
           'SYNC_GPS_MASTER', 'GIG_STRUC_BG1_READBACK', 'PET_WARN',
           'LOGFILE_SIZE_512', 'NS_CAPTURE_TRIGGERS_TYPE',
           'ATM_CONNECTIONEX', 'NSCardFirmwareVersion',
           'ATM_FEATURES_PER_PORT_BURST',
           'Layer3TrackingDistribution', 'CA_CAN_CAPTURE',
           'FR_PVC_DELETE_ALL', 'TCP_HTTP_STOP_VERIFICATION',
           'GIGAfnConfig', 'tagFSTProtocolCounterInfo',
           'SSCOP_STATE_IDLE', 'NSDiffServCounterInfo',
           'FR_ETSTAT_TRIGLED', 'XENPAK_NVR_TRANSCEIVER_TYPE',
           'WN_DS1_E1_AIS_ALARM',
           'tagNSDOT1XSupplicantSessionStatsInfo',
           'MPLS_LSP_NOT_INITIALIZED', 'MPLSLSPCountInfo',
           'ETBNC_MAX', 'ATMConnectionCopyParams',
           'XFP_IDENTIFIER_X2', 'ATM_B_BC_TYPE_NONE',
           'NSCTCaptureFrameV2Info', 'L3_STREAM_TCP',
           'NS_CAPTURE_COUNT_INFO', 'ATM_MAX_PORT_BURST_SIZE',
           'STREAM_PROTOCOL_TCP_PPPOAOE',
           'CAUSE_MSG_INV_OR_NOT_AVAIL', 'PORT_READY_TO_TEST',
           'NS_MULTI_RX_TRIGGER', 'PET_SIG_STATE_CHANGE',
           'PPP_CONFIGURE_MAXFAILURE',
           'FR_HIST_V2_LATENCY_PER_STREAM',
           'NS_HIST_V3_LATENCY_DISTRIBUTION_INFO',
           'FR_HIST_L3_LONGLATENCY_DE', 'NS_MULTI_COUNTER_INFO',
           'MII_AN_REMOTE_FAULT', 'AT_RX_CT_PROTOCOL_AAL5',
           'ATM_DROP_ERRORED_CELLS', 'tagNSIPv6ExtHopByHopHeader',
           'TRFC_PCF_BEACON', 'IGMPV3_EXCLUDE_FILTER_MODE',
           'WN_CARD_CAPABILITY_INFO', 'CM_ST_6410',
           'PET_SSCOP_HEADLINES', 'FR_NIC_EIA_RD_DSR',
           'ATM_TD_QUAL_PEAK_RATES', 'ATMSigTraceEventInfo',
           'FR_DUP_PVC_MAP', 'ATTRIB_VFDRESETCOUNT', 'WNPVCCtrl',
           'POSCardPortEncapsulation', 'tagNSSubscriptionInfo',
           'tagFSTCaptureInfo', 'NSPhyDefaultConfig',
           'FR_STATUS_EIA_LLB', 'STR_ENCAP_TYPE_LLC_PPPOE',
           'PPP_STATUS_MAX_PEER_IPV4_ADDR',
           'tagNSRunTimeHistStatsConfig', 'tagATMDS3E3LineParams',
           'L3_DEFINE_ICMP_IPV6_STREAM_VLAN',
           'L3_DHCP_V2_EXTENDED_HOST_INFO',
           'MLDV2_INCLUDE_FILTER_MODE',
           'DOT1X_SUPPLICANT_AUTHENTICATED', 'XFP_TRANSCEIVER_L_64_3',
           'PPP_STATS_QUERY', 'FR_MOD_ARP_STREAM',
           'COMMAND_MODE_LOG_AND_SEND', 'L3_TX_STACK',
           'ATMFrameCopyReq', 'GIG_AFN_HALF_DUPLEX',
           'MPLSRoutingDomain', 'N10tagINT64_T3DOT_0E',
           'tagFCMultiSwitchConfig',
           'XFP_AUX_MONITORING_MINUS_5_2V_SUPPLY_CURRENT',
           'L3MS_FIELD_RANDOM_BG_ENABLE', 'NS_PATH_SIGNAL_LABEL_HDLC',
           'PPP_STATUS_MTU', 'FR_STATUS_EIA_CTS', 'ETCOLLISION_MAX',
           'L3_MODIFY_STREAMS_ARRAY', 'IL3_FRAMEERROR',
           'ATM_CONN_TRIGGER_PARAMS', 'XENPAK_10GBE',
           'ETBNC_10MHZINV', 'L3_STREAM_RTP_VLAN',
           'AT_ENCAP_TYPE_VCMUX_ROUTED', 'FR_DUP_STREAM',
           'NS_HIST_V2_LATENCY_INFO', 'FC_HBA_MODE_STOP',
           'FR_DUP_PVC', 'NS_MULTI_TX_SIGNATURE_FRAMES',
           'XFP_TRANSCEIVER_OC_48_SR', 'PPP_MAGICNUMBER',
           'PPP_OE_OPTIONS', 'MII_STATUS_AN_ABILITY',
           'tagNSSignalSubprocess', 'SAAL_STATE_CONN_PEND',
           'L3_DEFINE_MULTI_SMARTBITS_128_STREAM',
           'tagFRHistTypeInfo', 'tagFSTCaptureCountInfo',
           'NS_MOD_ICMP_IPV6_STREAM_VLAN', 'NS_RESOLVE_ARPS',
           'ATM_E1_PLCP_LINE_CELL_RATE', 'ATMV_FIELD_CDVT',
           'MAX_ATM_BURST_SIZE', 'NS_OAM_RATE_INFO', 'IPV6_EXT_NONE',
           'NS_CAPTURE_STATUS_RUN_DISPARITY', 'NS_DOWNLOAD_FILE',
           'ETPREAMBLE_MAX', 'NS_REAL_TIME_TRACKING_TX_CONFIG',
           'Layer3ModifyStreamArray', 'WN_DS1_E1_LOCD_ALARM',
           'VLAN_PRI_LOWEST',
           'MPLS_RSVP_SERVICE_CONTROLLED_LOAD_OBJECT',
           'tagNSIPv6ExtRoutingHeader', 'NS_IGMP_GROUP_COUNT_INFO',
           'NSMultiCaptureDataInfo', 'WN_LMI_DEL', 'ATMVCDBCounts',
           'WN_HIST_LATENCY_SCALE', 'NS_SONET_LINE_AIS_ALARM',
           'L3_RNDIS_MODE_ENABLED', 'CALL_STATE_CONNECT_REQUEST',
           'GIG_PHY_LOOP_LOCAL_DTE_XS', 'tagPPPParamsFill',
           'XFP_IDENTIFIER_SFP', 'FR_E1_75_OHM_NORMAL',
           'TR_STATUS_FULL_DUPLEX', 'ATMCardType',
           'STREAM_PROTOCOL_TCP_PPPOA', 'ATMCallAddrList',
           'FR_LINE_SPEED_1664000L', 'NS_DIFF_SERV_V2_RATE_INFO',
           'NS_HIST_V3_SEQUENCE_INFO', 'AN_NO_EXTENDED_CAPABILITY',
           'NS_HIST_LATENCY_PER_STREAM_32', 'XENPAK_S_64_5A',
           'XENPAK_S_64_5B', 'ATM_STR_PARAM_GEN_PCR',
           'NODE_NAME_NOT_REGISTERED', 'ATM_STR_PARAM_SIG_BW_PCR_0',
           'ATVCCLIPCounterInfo', 'CM_AS_9155',
           'ATM_DS1_CELL_LINE_CELL_RATE', 'MAX_URL_OBJ_LEN',
           'ETRUN_RUN', 'ATM_MAX_ELANS', 'NSSignalSubprocess',
           'NS_DOT1X_SUPPLICANT_STATS_INFO', 'WNFeatureCtrlAll',
           'FALSE', 'L3_SINGLE_BURST_MODE',
           'DOT1X_TTLS_PHASE2_MSCHAP', 'tagNSCaptureStatsInfo',
           'ITR_MAC_ABORTTX', 'WN_STREAM_COPY_CFG', 'MAX_ARRAY_DIM',
           'WNCardCapInfo', 'NSRunTimeHistStats', 'CM_POS_3504A',
           'SERVER_CLOSE_3WAY', 'ATTRIB_SPEED_10MB',
           'UNI_DEFAULT_TMR_T399', 'XFP_ENCODING_SONET_SCRAMBLED',
           'WNDS3AlarmCounterInfo', 'tagATMVCCIStatus',
           'tagNSATMHeader', 'HTTRIGGER_DEPENDENT', 'PPPParamsFill',
           'CT_DEFAULT_DIRECTION', 'FCFSPFRealTimeStatsInfo',
           'WNT1E1LineCfg', 'TRFC_PCFON', 'MAX_NTP_STRING_SIZE',
           'NSAlternateKeyConfig', 'tagFRLineCfg',
           'ATMStreamParamsFill', 'GIG_STRUC_TEST_CAPTURE_MEMORY',
           'tagStreamICMPIPv6VLAN', 'L3_VFD_INCR',
           'MPLSServiceObject', 'ATM_CARD_TYPE', 'ATTRIB_SPEED_25MB',
           'tagNSNTPPeerListInfo', 'ET_SECURE',
           'STREAM_PROTOCOL_RTP_VLAN', 'CT_PATTERN_SIZE_IN_BYTES',
           'ETCRC_ON', 'FR_E1_BUILDOUT', 'ATM_LED_STATUS_TRIG',
           'SSCOP_DEFAULT_TMR_NO_RESP_3_1',
           'SSCOP_DEFAULT_TMR_NO_RESP_3_0',
           'ATM_DS1_E1_SEV_ERROR_FRAME_ALARM', 'CM_GX_1420B',
           'ENGINEERING_QA_RELEASE', 'ATM_ELAN_MIN_CONTROL_TIMEOUT',
           'SSCOP_DEFAULT_TMR_CC', 'WN_PVC_DEL_ALL', 'RXLED_ERRORB',
           'RXLED_ERRORA', 'FC_LINK_COST_2000',
           'NS_HIST_LATENCY_DISTRIBUTION_INFO', 'PPP_LCP_IPCP_ACKRCV',
           'NSVFD', 'WN_CARD_CFG', 'PPP_LCP_AUTHENTICATING',
           'CHANNEL_DISABLED', 'ETVFD_ENABLE', 'Layer3GroupInfo',
           'PPP_SESSION_CLOSE_USER', 'LOGFILE_SIZE_4096',
           'ATMStartCardSetupParams', 'ETDP_DECR8',
           'CLIENT_CLOSE_3WAY', 'ATM_STREAM_EXT_VCC_INFO',
           'NSUDPHeader', 'ALLOW_LATENCY_COUNTER_RESET', 'ETDP_FF00',
           'ATM_ILMI_UME_DOWN', 'NS_REAL_TIME_TRACKING_RX_STOP',
           'WN_FEATURES_PER_STREAM_RATE', 'FR_RFC1662_RTD_PPP',
           'GIG_STRUC_TX_READBACK', 'HTLED_CAPTURE_STOP',
           'FR_STATUS_EIA_RTS', 'L3_DEFINE_MULTI_TCP_STREAM_VLAN',
           'L3_STREAM_TRANSMIT_MODE_INFO', 'TR_ERR_FCS',
           'WN_FEATURES_STATE_TRACKING', 'tagMPLSRSVPCountInfo',
           'CAUSE_NO_USER_RESPONDING',
           'NS_AGGR_LATENCY_PRECISION_INFO', 'FRAME_PROTOCOL_NULL',
           'NS_MULTI_TX_FRAMES', 'FC_LOG_LEVEL_RECURSION',
           'XENPAK_RX_ALARM_PMA_PCS_RECEIVE_LOCAL_FAULT_ENABLE',
           'IL3_ARP_REPLIES', 'TCPStateInfo', 'VCDB_STATE_TRANSITORY',
           'WAN_DS3_SHORT_BUILDOUT', 'STREAM_PROTOCOL_SMART_TCP',
           'DOT1X_SUPPLICANT_RETRY_COUNT', 'NS_DHCP_CONFIG_INFO',
           'DOT1X_PORT_MODE_MULTI_HOST', 'IP_INC_SRC_IP_AND_SRC_MAC',
           'FC_EPORT_SETTING_CONFIG', 'TCPConnectionStatus',
           'GIG_VFD_OFF', 'L3_DEFINE_UDP_IPV6_STREAM',
           'NS_ALTERNATE_KEY_TRIG_PREFILTER',
           'MPLS_EXPLICIT_ROUTE_OBJECT', 'NS_FFS_INFO',
           'PPP_STATUS_LOCAL_IPADDR', 'FC_COMMIT', 'SPEED_4MHZ',
           'tagNSEnhancedRunTimeHistStats',
           'DOT1X_SUPPLICANT_FILL_LEFT', 'FC_DEFINE_MULTI_STREAM',
           'tagXENPAKProfile', 'tagTCPISPConnectionDataCurve',
           'L3_USB_INFO_CMD', 'L3_CAPTURE_STATUS_SIGNATURE_TAG',
           'L3_TX_IPV6_ADDRESS_INFO', 'AT_PORT_DEFAULT_FLAGS',
           'NS_HIST_COMBO_PER_STREAM_INFO', 'MLD_V1', 'MLD_V2',
           'tagNSCopyStreamInfo', 'ATM_PVCAD_PARAMS', 'HTLED_LINKED',
           'NS_TCP_IPV6_STREAM_INFO', 'CM_POS_3518A', 'ETH_VLAN',
           'ATM_DS3_E3_LOCD_ALARM', 'TCP_GET_TX_LOG',
           'SSCOP_DEFAULT_TMR_IDLE', 'tagNSIPv6IPv4Translation',
           'MPLS_RSVP_SERVICE_COS_OBJECT', 'HUB_GROUP_DEFAULT_ACTION',
           'PPP_STATUS_MRU', 'AT_PORT_CLIP_COUNTER_INFO',
           'tagNSDiffServV2CounterInfo', 'WN_IP_SUBNET_DEL',
           'FCTransmitMode', 'ATM_FRAMER_PART_NUM_FAILURE',
           'NS_DISABLE_TAG', 'TCP_EXTENDED_CONN_EVENT_INFO',
           'NS_WAIT_FOR_EVENT', 'tagFCFabricLinkConfig',
           'NS_LINK_FAULT_CONFIG', 'POS_CONFIG_INFO',
           'L3_DEFINE_MULTI_RTP_STREAM', 'FCNode',
           'FR_CARD_CLK_EXTERNAL', 'NS_ARP_STREAM_INFO',
           'FRPVCStatusInfo', 'FC_MAX_NUM_NODES', 'FRT1E1LineInfo',
           'CM_POS_6504A', 'ATM_TRIGGER_MODE_CELL',
           'FRAME_HEADER_CRC', 'NS_PORT_CONFIG',
           'TR_STATUS_BURST_MODE', 'L3_DHCP_RELEASE_ADDRESS_ALL',
           'NS_MOD_TCP_STREAMS', 'STR_ENCAP_TYPE_NULL',
           'DOT1X_SUPPLICANT_RETRY', 'MII_AN_10BASE_T_FULL',
           'TCP_GET_URL_DISTRIBUTION_INFO',
           'NS_REAL_TIME_TRACKING_TX_COUNTERS', 'PPP_LCP_UP',
           'FRAME_UDP_SEQUENCE', 'FC_LINK_SPEED_2GIG', 'AT_SET_SPEED',
           'CONN_STATE_CALL_ESTABLISHED',
           'ATM_STR_PARAM_SIG_BW_MBS_0',
           'POS_LOOPBACK_MODE_REMOTE_TRANSCEIVER',
           'WN_VFD_DECREASING', 'INVALID_GROUP_COMMAND',
           'WN_PVC_STATUS_BITMAP_LEN', 'FST_PROTOCOL_DISABLED',
           'CT_FILTER_PROTOCOL_ID_TCP', 'NSRunTimeHistStatsConfig',
           'ET_CMDLOG_NOLINKINFO', 'NS_CT_CAPTURE_FRAME_INFO',
           'Layer3TagInfo', 'ATM_DS3_PLCP_LINE_CELL_RATE',
           'WN_RFC1662_RTD_PPP', 'NS_PROTOCOL_COUNTER_INFO',
           'tagNSDOT1XSupplicantStatusSearchInfo',
           'NS_MULTI_ERROR_COUNTERS', 'PPP_NCPS_OPENED',
           'SMB_VG_MASK', 'CAUSE_TD_UNSUPPORTED', 'PPPIPv6ParamCfg',
           'PARAMETER_RANGE', 'IP_OPTION_LOOSE_SOURCE_RECORD_ROUTE',
           'L3_USB_SET_POWER', 'FST_PROTOCOL_RESPOND_PING',
           'TriggerStructure', 'ETHRSMII',
           'NS_STOP_NEIGHBOR_DISCOVERY', 'XENPAK_10GBASE_ER',
           'ETHProtocolParameters', 'NSIPv6ExtFragment',
           'CT_MODE_HALT', 'INCORRECT_MODE', 'ATMFrameDefinition',
           'ATCardSetSpeed', 'XFP_CONNECTOR_OPTICAL_PIGTAIL',
           'FR_LINE_SPEED_512000L', 'GIG_PREAMB_LEN_16_BYTES',
           'Layer3IPv6Address', 'FR_DS1_533_TO_655_BUILDOUT',
           'FST_CAP_FILTERED_FRAMES_ONLY', 'MPLS_LSP_NOT_COMPLETE',
           'MII_SELECT_RMII', 'CONN_STATE_CALL_PROCEEDING',
           'tagLayer3CaptureCountInfo', 'NS_AGGR_SEQUENCE_INFO',
           'L3_RECEIVE_TRACKING_SEQUENCE', 'StreamICMPVLAN',
           'TR_STATUS_TRANSMITTING', 'PPP_USE_PPP',
           'FC_LINK_COST_200', 'UNI_DEFAULT_TMR_T313',
           'STREAM_PROTOCOL_ICMP', 'UNI_DEFAULT_TMR_T310',
           'UNI_DEFAULT_TMR_T317', 'UNI_DEFAULT_TMR_T316',
           'TOPOLOGY_E_PORT', 'XENPAK_NVR_WAVELENGTH_CHANNEL2',
           'NS_AGGR_RAW_TAGS_INFO', 'NS_DECISION_IGNORE', 'PAT_0000',
           'ET1000_OUT_OF_SYNC', 'CONTROLLER_SMB2000',
           'tagPOSCardPortEncapsulation', 'PPP_NEGOTIATE_IP',
           'ATM_SCHED_PARAMS', 'WN_STREAMEXT_CFG_INFO',
           'RXLED_ERRORAB', 'INVALID_TYPE1', 'ATM_PVCAD_DISABLE',
           'WN_DS1_E1_LOS_ALARM', 'tagFRT1E1LineInfo',
           'FR_DS1_E1_B8ZS_ALARM', 'MDIO_ACCESS_8_VIA_4_7',
           'FSTCaptureCountInfo', 'ATMAddress', 'tagFRAssignAddress',
           'NS_ALTERNATE_KEY_DISABLE', 'GPS_NOT_CONNECTED',
           'L3_VFD_RANDOM', 'FR_HIST_ACTIVE_TEST_INFO',
           'GIG_STRUC_DEBUG_DISPLAY', 'ATM_LOOPBACK_INPUT_RX_TX',
           'L3_TRANSMIT_START_ARPS', 'NS_DEFINE_IPV6_STREAM_VLAN',
           'ETH_PROTOCOL_GENERATE_ARP', 'ATM_TD_BEST_EFFORT',
           'tagNSIPAddress', 'L3MS_FIELD_ISEQNUM',
           'XENPAK_NVR_BASIC_FIELD_ADDRESS', 'CAUSE_OPT_UNAVAILABLE',
           'FR_LINE_SPEED_960000L', 'NS_ETH_PHY_RATES',
           'FSTProtocolParameters', 'TCPConnectionHTTPConfig',
           'ATM_LED_STATUS_ALARM_RED', 'TR_INSERTIONS',
           'DOT1X_USER_MODE_NORMAL', 'L3_MULTICAST_COUNTER_INFO',
           'FR_PVC_RET_CONF_STATUS', 'ATM1_L64363_VERSION',
           'LISTENFIN', 'NSCardHardwareInfo', 'TCP_PREPARE_TEST',
           'NS_MAX_HEADERS', 'WN_STREAMEXT_FILL_CFG',
           'tagATMConnectionModifyArray', 'CM_LAN_6101B',
           'CM_LAN_6101A', 'tagTCPCookieArray', 'tagStreamICMPIPv6',
           'HT_CBA_10', 'NSCreateSubprocess', 'NS_SONET_FRAMING',
           'tagNSIPv6ExtFragment', 'L3StreamBinding',
           'STR_ENCAP_TYPE_LLC_PPP', 'NSPPPHeader',
           'NS_MOD_UDP_STREAM_VLAN', 'ETHMIIInfo',
           'MPLSLSPBindStreams', 'NS_STREAM_SCHEDULE', 'CT_PASSIVE',
           'L3_CTRL_IPV6_ND_RESPONSES', 'TCP_SET_ISP_CONNECTIONDATA',
           'tagTCPURLArray', 'NSNTPFOMInfo', 'ETBURST_OFF',
           'NS_DEFINE_IPV6_EXT_AUTHENTICATION',
           'ATM_UNI_RESTART_ACK_STATS', 'ATM_COMP2_ONLY',
           'FR_IP_STREAM_INFO', 'ATM_ELAN_LES_SVC_WAIT',
           'HBA_DEVICE_LOGIN', 'NS_MOD_IP_STREAM_VLAN', 'L2RateInfo',
           'NS_DEFINE_MULTI_SMARTBITS_STREAM',
           'NS_DEFINE_MULTI_IPX_STREAM', 'UNABLE_TO_PERFORM_CMD',
           'PPP_OE_USE_ZEROLEN_SVCNAME', 'ATM_DS1_E1_B8ZS_ALARM',
           'GIG_STRUC_CAPTURE_DESCRIPTION', 'NS_PMC_PARTITION_DISK',
           'ATModifyVCArray', 'SMB_STD_TXFRAMES', 'ETDP_DECR16',
           'STREAM_PROTOCOL_UDP', 'L3_RECEIVE_TRACKING_V2_LATENCY',
           'FC_FSPF_START', 'tagTCPArpParams', 'L3_SET_ARP_GAP',
           'ETH_VLAN_PRI_HIGHEST', 'ETH_COLLISION',
           'AT_SONET_SECTION_LOS_ALARM', 'Layer3DHCPExtendedHostInfo',
           'NSSonetConfig', 'FC_SWITCH_TOPOLOGY_GRID',
           'NS_GRE_HEADER', 'SIG_EVENT_SAAL_RELEASE',
           'Layer3CaptureDetailInfo',
           'DOT1X_SUPPLICANT_VLAN_CONFIGURATION',
           'ATMStreamDetailedInfo', 'ATMV_FIELD_BURST_COUNT',
           'NSIPv6StatelessAddressEntry',
           'NS_MOD_UDP_IPV6_STREAM_VLAN', 'NS_CUSTOM_HEADER',
           'FR_INPUT_MSG_CMD', 'POS_SPEED_OC12', 'NS_MULTI_RX_VLAN',
           'ATMSigTraceParams', 'tagNSPMCOnePartition',
           'NS_IPV6_NEXT_HOP_RESULTS_COUNT_INFO',
           'GIG_STRUC_SS1_READBACK', 'CLEAR_STACK_ERRORS',
           'MPLS_LSP_INFO', 'FR_ETSTAT_LINEWAITING',
           'L3_ARP_TIMES_INFO', 'TR_BADTOKEN',
           'tagLayer3CaptureDetailInfo',
           'NS_DOT1X_SUPPLICANT_STATUS_INFO',
           'HIST_FRDE_LONG_LAT_TIME', 'WN_CAPTURE_COUNT_INFO',
           'NS_DEFINE_STREAM_EXTENSION', 'tagTCPDataLogEventTx',
           'ATMCardCapabilities', 'PPP_IPX_ENABLE',
           'FC_MAX_NUM_SWITCHES', 'tagNSMDIORegister',
           'L3_DHCP_ACTION_DISCOVER',
           'DOT1X_SUPPLICANT_AUTHENTICATION_TYPE',
           'FR_LOOPBACK_DISABLED', 'PPS_TO_GAP_BITS',
           'TCPDataLogEventRx2', 'ATMPVCADResponse',
           'ATMConnTriggerParams', 'IATM_CELL_DELAY_VARIATION',
           'GIG_CAP_OVERSIZE', 'PET_EVENT',
           'NS_HIST_TEST_LATENCY_OVER_TIME',
           'NS_IPV6_NEXT_HOP_RESULTS_INFO',
           'tagNSDOT1XSupplicantModify', 'NS_MULTI_ETH_COUNTERS',
           'L3_HIST_LATENCY_DISTRIBUTION',
           'MPLS_OPAQUE_OBJECT_CREATE', 'WNT1E1AlarmCounterInfo',
           'NS_HIST_LATENCY_OVER_TIME_INFO',
           'NS_HIST_SEQUENCE_PER_STREAM_INFO', 'tagLayer3DHCPRenew',
           'tagGIGAltTransmit', 'STREAM_PROTOCOL_IP', 'TOPOLOGY_LOOP',
           'tagLayer3V2TrackingDistribution', 'L3MS_FIELD_HOP_LIMIT',
           'OFFSET_FROM_START_OF_FRAME', 'FR_HIST_L3_ARPEXCHANGE',
           'NSGetHeaderInfo', 'NEXT_HOP_QUEUED', 'TCPGaps',
           'tagNSIGMPv3GroupConfig', 'IP_DEC_DST_IP_AND_DST_MAC',
           'NS_MULTICAST_KEEP_ALIVE_STOP', 'tagFCStatus',
           'CT_FILTER_MODE_PROTOCOL', 'L3_DHCP_GET_ADDRESS_ALL',
           'NSErrorEntry', 'MII_AN_NEXT_PAGE',
           'L3_HIST_TEST_V2_LATENCY', 'NSU64IsNEq',
           'tagNSHistComboPerStreamInfo', 'ATMILMIParams',
           'ATMV_FIELD_RX_ENABLE', 'GIG_STRUC_FILL_PATTERN_READBACK',
           'ATTRIB_CONNECT_USB', 'INT64_T', 'tagWNFeatureCtrl',
           'PACKET_NOT_FOUND', 'ETH_READ_MII_INFO',
           'DOT1X_SUPPLICANT_HELD_TIME', 'ATM_EXT_VCC_INFO', 'ATVC',
           'VCDB_UPDATED', 'MAX_DELTA', 'CM_AT_9034',
           'NS_DHCP_RELEASE_ADDRESS', 'tagFRHistReset',
           'AT_LOOP_TIMED_CLOCK', 'L3_CAPTURE_START',
           'AFSIG_RESTART_IDLE', 'WN_PVC_STATUS',
           'ATM_DS1_133_TO_266_BUILDOUT', 'TCPConfigExt',
           'SONET_LINE_RDI_ALARMS', 'ATM_LAYER_INFO',
           'ATM_ELAN_LECS_CONFIG_WAIT', 'ATM_STR_ACTION_STOP',
           'FST_CAPTURE_STATUS_OVERSIZE', 'NSL3StatInfo',
           'NS_CAPTURE_STATUS_OAM_FRAME', 'FR_LOOPBACK_REMOTE_PHY',
           'L3_ARPS_STILL_TXING', 'ATM_CALL_PARAM_CALL_COUNT_LIMIT',
           'tagETHExtendedCounterInfo',
           'TCP_HTTP_EXTENDED_CONN_EVENT_INFO', 'CT_ACTIVE',
           'tagETHRSMII', 'MII_CTRL_SPEED_MSB', 'IPV6_EXT_FRAGMENT',
           'tagNSGetTxConfigInfo', 'FR_STATUS_UNI_UP', 'SMB_STD_MASK',
           'NS_COUNTER_INFO', 'NSHWConfig',
           'ATM_CALL_PARAM_CALL_DIST_TYPE', 'NSReadWriteSubprocess',
           'NS_HIST_TCP_CONNECTION_INFO', 'ITR_BADTOKEN',
           'ILMI_DEFAULT_TMR_REG_TIMEOUT',
           'NS_EN_RUNTIME_MAX_LATENCY_INDEX', 'L3_DHCP_ACTION_RENEW',
           'GIG_CAP_UNDERSIZE', 'PPP_OE_SELECT_AC_BY_ACNAME',
           'NSCardTRDVersion', 'ATM_DS3_E3_PLCP_OOF_ALARM',
           'tagNSIPv6StatelessAddressInfo', 'ETH_VLAN_PRI_LOWEST',
           'XENPAK_NVR_SIZE', 'NS_DEFINE_ICMP_STREAM_VLAN',
           'MII_STATUS_10_FULL', 'L3_DEFINE_ICMP_STREAM_VLAN',
           'PET_SIG_API_TRAFFIC', 'TCP_TEAR_DOWN_CLEAN',
           'WN_DS1_110_TO_220_BUILDOUT', 'PPPSessionStatsInfo',
           'Layer3IPv6Protocol', 'TR_STATUS_LATENCY_STABLE',
           'NS_CAPTURE_STATUS_UNDERSIZE', 'PATCH_RELEASE',
           'ETH_PHY_LOCK_ERROR', 'XENPAK_ALARM_STATUS_INFO',
           'PPP_MAX_FAILURE', 'DOT1X_SESSION_CONTROL_VARIED_BURST',
           'ATM1_PCI_FPGA_VERSION', 'tagMPLSISLSPComplete',
           'ATM_DS1_AMI_ENCODING', 'FR_TRIG_DIR_RX',
           'CAUSE_LOC_INTL_NET', 'NS_REAL_TIME_TRACKING_RX_COUNTERS',
           'LCP_CLOSE_AUTH_FAILURE_PEER_REJ',
           'tagATStreamCounterInfo',
           'NS_DOT1X_SUPPLICANT_STATUS_SEARCH_INFO',
           'TR_MAC_FRAMECOPIED', 'tagWNChannelStatus',
           'NS_MLD_TIMESTAMP_INFO', 'L3_SET_MODIFYSTREAM',
           'tagNSIPv6ExtESP', 'NSDOT1XSupplicantConfig', 'MAX_HUBS',
           'FR_DS1_133_TO_266_BUILDOUT', 'ATM_ARP_CONN_INACTIVE',
           'MII_STATUS_REMOTE_FAULT', 'L3_TX_IPV6_ADDRESS',
           'TCP_CONN_STATE_INFO', 'tagATMConnectionCopyParams',
           'FRT1E1LineCfg', 'DOT1X_SUPPLICANT_CERTIFICATE_USEMODE',
           'L3_CTRL_SNMP_OR_RIP_RESPONSES', 'TimeStructure',
           'L3MS_FIELD_VC_INDEX', 'UInt',
           'NS_MULTI_IPV4_ARP_COUNTERS', 'FRAME_ACKNOWLEDGE',
           'FRAME_PROTOCOL', 'FCHBAConfig', 'SMB_STD_ERR_OVERSIZE',
           'tagGIGCounterInfo', 'FCConfig', 'NS_PMC_DEVICE_INFO',
           'tagTCPInitStackMode', 'VG_STATUS_MODE', 'ETBNC_TXTRIG',
           'FC_PRIVATE_DISCOVERY', 'L3_DHCP_STATE_UNDEFINED',
           'ETH_TRIGGER1_OR_TRIGGER2', 'PPP_OE_SELECT_AC_BY_SVCNAME',
           'NS_MULTI_IPV4_PING_COUNTERS', 'tagNSTxConfig',
           'tagATMPVCADVPIVCIForGetnext',
           'CT_DEFAULT_BUFFER_SIZE_IN_MBYTES',
           'FST_CAP_FIRST_64_BYTES', 'PPPIPv6StatusInfo',
           'ATM_UNCORRECTABLEHEADERS', 'XFP_CDR_SUPPORT_FOR_10_5_GBS',
           'NSGREHeader', 'StreamSmartBits', 'tagNSMLDv2GroupConfig',
           'DOT1X_SUPPLICANT_MAX_START', 'tagNSFlashData',
           'tagStreamTCPIPv6', 'NS_DEFINE_VFD',
           'FRIPSubnetDeRegister', 'NS_ARP_CONFIG',
           'ATM_LOGFILE_READ_INFO', 'WN_HIST_ADD_LINE',
           'CA_CAN_ROUTE', 'ATM_CALL_PARAM_INTER_CALL_GAP_RND_DELTA',
           'FC_DEFINE_STREAM', 'NSIGMPAddress',
           'FST_PROTOCOL_RESPOND_ARP', 'FST_PROTOCOL_COUNTER_INFO',
           'LASER_ENABLE', 'L3_STREAM_INFO', 'HTLED_TRIGLOSGREEN',
           'L3_RECEIVE_TRACKING_LATENCY',
           'LOGFILE_CREATE_STOP_ON_FULL', 'AN_SETTINGS_NOT_VERIFIED',
           'AT_CLP_OFF', 'tagATMFrameCopyMod',
           'L3_HIST_SEQUENCE_EXPRESS_INFO', 'FC_FSPF_STATS_INFO',
           'CT_ATM_SIGNALING', 'FC_COUNTER_INFO', 'ATMSSCOPParams',
           'NS_LINK_FAULT_INFO', 'NS_HIST_SUMMARY_INFO',
           'PROTOCOL_TYPE_IP', 'MAX_PORTS', 'StreamFC',
           'NS_MOD_SMART_TCP_STREAM', 'ATM_STREAM_PARAMS_COPY',
           'NS_IGMPV3_GROUP_CONFIG', 'ATM_B_BC_UNI40_CBR_01',
           'L3_HIST_V2_LATENCY_PER_STREAM_INFO', 'UL_SET_TO_ONE',
           'NS_WIS_LOCD_ALARM', 'FC_SWITCH_TOPOLOGY_FULL_MESH',
           'CAPTURE_RXTRIG', 'IPSubnetDeReg',
           'CAUSE_AAL_NOT_SUPPORTED', 'ATM_CELL_LOSS_RATIO',
           'ETBAUD_4800', 'CA_CONNECT_BNC', 'NS_MOD_UDPDHCP_STREAM',
           'NS_IPV6_STATUS_INFO', 'NS_DHCP_EXTENDED_HOST_INFO',
           'L3_GROUP_SET_GROUP', 'WN_DS3_ENCODING_B3ZS',
           'tagATMGlobalTrigger', 'XFP_ENCODING_RZ',
           'L3MS_FIELD_IP_LIMIT_COUNT', 'tagXENPAKAlarmConfig',
           'NS_CT_ENABLE_PROCESS', 'NS_USB_MODE_OFF', 'tagWNPortInfo',
           'NS_MULTI_CAPTURE_DESCRIPTOR_FORMAT_ETHEREAL',
           'C_ANNEX_A_PARM', 'MLDV1_STOP_LISTEN', 'MIN_FFOM_LIMIT',
           'NS_WIS_LINE_LOP_ALARM', 'NS_TRANSMIT_PADDING_MODE_INFO',
           'ITR_MAC_TOKENERROR', 'tagStreamIPX', 'AT_SONET_FRAMING',
           'NS_VERSION_UNRELEASED', 'XENPAK_PHY_MODE_LAN',
           'PPP_USE_PPP_SESSION_ID', 'UL_COMPLEMENT',
           'tagLayer3DHCPV2ExtendedHostInfo', 'ETH_PHY_BAD_SSD_ERROR',
           'NSPMCDiskInfo', 'L3_RECEIVE_TRACKING_SUMMARY',
           'GIG_STRUC_INIT', 'FC_LOG_LEVEL_DEBUG',
           'CAPTURE_EVENTS_VLAN_TAG', 'tagNSIPv6ExtHopByHop',
           'CM_POS_6500B', 'CM_POS_6500A',
           'Layer3_V2_Tracking_Distribution', 'tagWNLMICfg',
           'tagXFPProfile', 'FR_STATUS_EIA_DCD',
           'NS_HIST_EN_SCALE_1_MILLISECOND',
           'XFP_AUX_MONITORING_PLUS_1_8V_SUPPLY_VOLTAGE',
           'TR_STATUS_ACCESSED', 'MII_AN_100BASE_TX_FULL',
           'NS_VFD_STATIC', 'AT_RX_CT_PROTOCOL_PPP',
           'NS_RNDIS_MODE_ON', 'CA_CONNECT_TP',
           'UNSUPPORTED_PLATFORM', 'NS_VLAN_LIST_SIZE',
           'L3MS_FIELD_FC_DEST_WWN', 'ATTRIB_LAN_3201C',
           'XENPAK_RX_ALARM_WIS_LOCAL_FAULT_ENABLE', 'IGMP_V3',
           'IGMP_V2', 'IGMP_V1', 'L3_DHCP_STATE_INIT',
           'FR_VFD3_BUFFER', 'DOT1X_PORT_MODE_SINGLE_HOST',
           'FRHistReset', 'ATM_CONN_MODIFY_ARRAY',
           'ACTIVE_HUB_NOT_PRESENT', 'ATM_STR_STATE_IDLE',
           'WN_TX_SINGLE_BURST', 'L3MS_FIELD_VFD1_PATTERN',
           'FR_LOOPBACK_LOCAL_PHY', 'MII_STATUS_MF_PREAMBLE_SUP',
           'NS_RATE_INFO', 'TCPCurveRecord', 'WN_TRIGGER_CTRL',
           'SOURCE_ADDRESS_SELECT_FAILED', 'CM_LAN_3310A',
           'ATM_ELAN_INFO', 'ATMVCDBEntryRtvl', 'tagLayer3DHCPConfig',
           'WN_DEFINE_IP_STREAM', 'FR_LINE_SPEED_1088000L',
           'NS_START_NEIGHBOR_DISCOVERY',
           'POS_SONET_PAYLOAD_TYPE_UNEQUIPPED',
           'GIG_PHY_LOOP_REMOTE_PHY_XS', 'tagMPLSServiceObject',
           'UNSUPPORTED_INTERLEAVE', 'NS_DEFINE_MULTI_ARP_STREAM',
           'WN_STREAM_STATUS', 'tagMLDGroupAddressBlock',
           'NSIPv6NextHopResultCountInfo', 'FUNCTION_ABORT',
           'WN_HIST_CHAN_CFG', 'NS_MLDV2_GROUP_CONFIG',
           'NSVLANHeaderList', 'POS_LOOPBACK_MODE_LOCAL_TRANSCEIVER',
           'TCP_MAX_CONNECTIONS', 'Layer3DHCPRenew',
           'SSCOP_STATE_RECOV_RSP_PEND', 'tagFRGetCaptureCountInfo',
           'HUB_ACT_AS_MASTER', 'L3_MOD_SMART_TCP_STREAM_VLAN',
           'AT_CELL_SCRAMBLING_BOTH', 'NS_ALTERNATE_KEY_ENABLE',
           'NSIPv6RouterDiscoveryInfo', 'ATM_SAR_PCI_FAILURE',
           'NS_DEFINE_MULTI_RTP_STREAM', 'LOOP_PORT_B',
           'FC_FABRIC_INIT_STATE', 'LOOP_PORT_A', 'STR_CONN_TYPE_PVC',
           'FR_HIST_L3_LONGLATENCY', 'FR_LOAD_FPGA_IMAGE',
           'L3_MOD_UDP_STREAM', 'MAX_PORT_IDS',
           'tagStreamTCPIPv6VLAN', 'tagNSVFD', 'L3_DHCP_STATE_BOUND',
           'ATM_STR_STATUS_SVC_CAUSE_LOC', 'tagL3DataCheck',
           'GIG_STATUS_1420', 'RUNTIME_MODE_NORMAL', 'LOGICAL_BUSY',
           'GIGMacConfig', 'NS_HIST_ACTIVE_TEST_INFO',
           'TCP_ICMP_GET_ROUTE', 'FR_STREAM_IPX',
           'NS_LINK_FAULT_CLEAR', 'tagNSSlotInfo',
           'FRLayer3LongLatencyDEInfo',
           'NS_REAL_TIME_TRACKING_RX_CONFIG', 'FC_STREAM_COS_NONE',
           'CA_CAN_COLLIDE', 'FC_HBA_CONFIG', 'NSPortConfig',
           'VG_PROPERTY_ENTRY', 'MII_CTRL_SPEED',
           'NSAlternateKeyHashConfig',
           'PVC_LOCAL_UP_END2END_UNKNOWN_STATUS', 'MAX_VFD_PATTERNS',
           'SCHED_TYPE_EARLY', 'USE_STREAM_ID',
           'WN_CHAN_PHYS_FILL_CFG', 'tagNSReadWriteSubprocess',
           'WNChannelInfo', 'L3_DEFINE_RTP_STREAM',
           'tagFRPvcStrmMapCfg', 'tagFCFSPFRealTimeStats',
           'L3_MOD_ICMP_IPV6_STREAM_VLAN', 'tagATVCCounterInfo',
           'PPP_OE_MODE', 'ETSELB', 'tagATVC', 'XFP_IDENTIFIER_XFP_E',
           'PPP_DELETE_ALL', 'CAPTURE_EVENTS_UNDERSIZE',
           'FCFSPFStatsInfo', 'ATM_CALL_TMR_TICK_RESOLUTION',
           'L3_AGGREGATE_INFO', 'MPLS_START', 'ATMPETListHdr',
           'ETGAP_1US', 'TCP_ISP_RESERVED_COMMAND',
           'MAX_REPORT_ERROR_IP_LEN', 'FirmwareVersionStructure',
           'L3MS_FIELD_VFD2_MODE', 'IP_INC_SRC_IP_AND_DST_MAC',
           'MAX_SEARCH_SUPPLICANT_ARRAY', 'ATM_STM1_FRAMING',
           'PET_RDATA', 'NSDiffServConfig', 'WN_STREAMEXT_MOD_CFG',
           'tagNSDetailedLibVersionStructure',
           'L3_DEFINED_STREAM_COUNT_INFO', 'NS_STREAM_GROUP_DEFINE',
           'WNStreamCtrl', 'NS_HIST_ENHANCED_LATENCY_OPTION',
           'FC_WWN_COUNT_INFO', 'FRAME_SRC_MAC_ADDR',
           'TCPISPConnectionDataCurve', 'tagNSDiffServV2Config',
           'tagWNDS3AlarmCounterInfo', 'IL3_RX_STACK',
           'NS_LINK_FAULT_REMOTE', 'WN_RFC1490_RTD_PPP_FR',
           'FRIPSubnetRegister', 'IP_DEC_DST_IP_AND_SRC_MAC',
           'ATM_TRIGGER', 'ET_CMDLOG_ALWAYSLINKINFO', 'UNLINK_FAILED',
           'NS_MAX_STREAM_ID_ARRAY', 'NS_AGGR_LATENCY_INFO',
           'NS_DEFINE_MULTI_ICMP_IPV6_STREAM_VLAN',
           'MII_CONTROL9_1000BASE_FULL',
           'NS_MULTI_CAPTURE_MAX_DATA_SIZE_IN_KB',
           'ATM_LOOPBACK_OUTPUT_TX_RX',
           'NS_HIST_LATENCY_DISTRIBUTION', 'FR_TRIG_ENABLE',
           'ENGINEERING_TEST_RELEASE', 'Layer3CaptureSetup',
           'AT_SONET_CELL_HEC_ALARM', 'GIG_STRUC_TEST_TX_LOOPBACK',
           'PPP_CONFIGURE_MAGICNUMBER', 'CM_LAN_6302A',
           'GIG_VFD_DECREMENT', 'TCPSetupStream',
           'SSCOP_TMR_TICKS_PER_SEC', 'ITR_BEACONEVENTS',
           'CONTROLLER_SMB600C', 'FC_LINK_SPEED_1GIG',
           'ATM_CLASSICAL_IP', 'L3_STREAM_IPX', 'POSCardLineConfig',
           'ATM_B_BC_UNI40_REAL_TIME_VBR',
           'PPP_CONFIGURE_MAXCONFIGURE', 'CM_GX_1405',
           'SMB_VG_ERR_PKT', 'tagGIGTransmit',
           'GIG_STRUC_TRIGGER_READ_WRITE', 'tagPOSCardLineConfig',
           'XENPAK_LSS', 'NS_HIST_EN_FIRST_TIMESTAMP',
           'TR_TOKEN_DEFAULT', 'L3_DEFINE_STREAM_EXTENSION',
           'CAUSE_LOC_USER', 'CONTROLLER_SMB6000',
           'MII_STATUS_EXT_STATUS', 'DOT1X_SUPPLICANT_DISCONNECTED',
           'TCP_GET_CONNECTION', 'CM_POS_6502A', 'PPPStatsInfo',
           'LINE_DISABLED', 'PPP_CHAPMS',
           'L3_RECEIVE_GETCAPTUREPACKETS', 'NSSonetCounterInfo',
           'PMC_DISK_NO_ERROR', 'L3MS_FIELD_CUSTOM_STREAM_ID_ENABLE',
           'FR_CISCO_HDLC_RTD_UDP',
           'NS_CAPTURE_STATUS_IP_CHECKSUM_ERROR',
           'NS_SIGNATURE_DETECT_MODE_INFO', 'PPP_NCPS_CLOSING',
           'NS_MULTICAST_KEEP_ALIVE_START',
           'UNACCEPTABLE_PORT_IDENTIFIER', 'ATMV_FIELD_GFC',
           'NS_WIS_LINE_AIS_ALARM', 'TCP_ARP_PARAMS',
           'L3_CTRL_ARP_RESPONSES', 'ATM_STREAM', 'WN_STREAM_CNT_MAX',
           'PPP_CONFIGURE_ECHOERRFREQ', 'XENPAK_PHY_CONFIG',
           'L3_TRANSMIT_GETADDRESS', 'FRAME_FC',
           'WN_DS1_220_TO_440_BUILDOUT', 'ETDP_FFFF0000',
           'XENPAK_10GBASE_LX4', 'PROTO_FR_ONLY',
           'SERVICE_PARM_OPTIONS', 'SIG_EVENT_OUTGOING_RELEASE',
           'FR_NIC_EIA_RD_RDL', 'L3_RECEIVE_TRACKING_TYPE',
           'XFP_OPTIONAL_TX_DISABLE', 'ATM_ILMI_INFO',
           'ATM_ELAN_BUS_SVC_WAIT', 'L3_HIST_TCP_CONNECTION',
           'RTP_PAYLOAD_G729', 'USBInfo', 'tagFSTProtocolParameters',
           'tagTCPConnectionsInfo', 'TR_ERR_FRAME_BIT',
           'ETH_PHY_BAD_ESD_ERROR', 'NS_MULTI_COLLISION',
           'INHIBIT_LATENCY_COUNTER_RESET', 'GIG_STRUC_SS1',
           'NS_DEFINE_IPV6_EXT_FRAGMENT', 'GIG_STRUC_SS2',
           'WN_RFC1490_RTD_NLPID', 'tagNSIPv6StatusInfo',
           'FR_INTERVALTIME_INFO', 'ATM2_SAR_FW_VERSION',
           'GIGRateInfo', 'NSATMHeader', 'L4MS_FIELD_TCP_FLAGS',
           'XAUIPRBSStatusInfo', 'XENPAK_NVR_VENDOR_LOT_CODE',
           'UNI_VERSION_3_1_NET', 'NS_VFD_INFO',
           'GIG_STRUC_MAC_CONFIG',
           'XENPAK_TX_ALARM_LASER_BIAS_CURRENT_FAULT_ENABLE',
           'FR_TRIG_NO_TRIG', 'ATM_ELAN_MAX_AGING_TIME',
           'IPForwardConfig', 'tagFCSwitchMultiLinkConfig',
           'tagFRLinkStatusInfo', 'MLDV2_SUPPRESS_RECORDS',
           'ATM_SIG_EMUL_TEARDOWN', 'STATS_MODE_NORMAL',
           'L3_STREAM_UDP_VLAN', 'TCPCookieOne', 'SOCK_PORT',
           'DOT1X_SUPPLICANT_CLEAR_SUPPLICANT_STATS',
           'ATM_UNI_RESTART', 'ATM_VCDB_COUNTS',
           'DOT1X_TTLS_PHASE2_MSCHAPV2', 'PPPoEStatsInfo',
           'tagNSPMCVPNInfo', 'ATM_TRIGGER_INFO', 'GIG_STRUC_STEP',
           'NS_IPV6_COUNTER_INFO', 'WNCardCfg',
           'HUB_GROUP_SYNC_ACTION', 'GIG_PREAMB_LEN_8_BYTES',
           'FC_READY_TO_TEST_STATE', 'UNI_VERSION_4_0_USER',
           'WAN_DS1_N22X5_DB_BUILDOUT', 'ATM_STR_PARAM_SIG_FW_PCR_0',
           'NS_DEFINE_802_3_STREAM', 'NS_HIST_EN_STREAMID_IN_STATS',
           'NSARPStatusInfo', 'FRLinkInfo', 'HTLED_SYNC_LOCK',
           'NS_HIST_ACTIVE_TEST_EXPRESS_INFO', 'NS_UDP_HEADER',
           'tagATMSSCOPParams', 'CAPTURE_LENGTH_LAST_128_BYTES',
           'FR_STOP_CMD', 'MAX_SUBSYSTEMS', 'NS_IP_OPTION_CONFIG',
           'tagNSCaptureDataInfo', 'GIGCardInfo',
           'XFP_TRANSCEIVER_L_64_2c', 'PROTOCOL_TYPE_8023',
           'L3_MOD_RTP_STREAM_VLAN', 'FRAME_PROTOCOL_IPX',
           'NS_IPV6_ROUTER_PREFIX_INFO', 'NS_IPV6_EXT_ROUTING_HEADER',
           'RXLED_UNDERSIZEAB', 'GIG_CAP_CRC',
           'NS_MULTI_RX_MPLS_FRAMES', 'CAUSE_PROTOCOL_ERROR',
           'NS_GROUP_DELETE_GROUP', 'NS_IGMPV2_INFO',
           'SIMPLE_RATE_AVERAGE', 'FR_DS1_B3ZS_ENCODING',
           'SPEED_10MHZ', 'XFPProfile', 'TCP_END_STACK_MODE',
           'MAX_SLOTS', 'NSFFSInfo', 'DEVICE_NOT_FOUND_ERROR',
           'TR_RXABORTFRAMES', 'MAX_TOTAL_PORTS',
           'FR_TX_SINGLE_PVC_INFO', 'WN_CHAN_ATTR_FILL_CFG',
           'tagWNDS3LineStatus', 'L3_ARP_REQ',
           'tagMPLSExplicitObject', 'tagIPForwardConfig',
           'GIG_PHY_LOOP_REMOTE_XCVR', 'tagATMCallSetupParamsEx',
           'NS_PORT_ADDRESS_INFO', 'SPEED_10GHZ',
           'DOT1X_TTLS_PHASE2_UNDEFINED', 'ATM_ILMI_REGISTER',
           'NS_SET_START_STREAM', 'IP_DEC_IP_AND_MAC_DST',
           'FCWWNCount', 'NO_OBJECT_REGISTERED_IN_SCOPE',
           'CT_FILTER_PROTOCOL_ID_RARP', 'PPP_STATUS_INFO', 'ETCOM5',
           'NS_PHY_DEFAULT_SPEED_10GHZ',
           'GIG_STRUC_GET_PORT_GROUP_INFO', 'NS_CT_CONFIG',
           'IGMPV1_V2_FORCE_UNSOLICITED_JOIN_REPORTS',
           'WN_CHANNEL_DEL', 'HTTRIGGER_ON', 'COS_NOT_REGISTERED',
           'tagNSNTPStatusInfo', 'SERVER_CLOSE_4WAY',
           'WN_DS1_E1_B8ZS_ALARM',
           'NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_0',
           'NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_1',
           'NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_2',
           'NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_3',
           'NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_4',
           'NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_5',
           'NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_6',
           'NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_7',
           'NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_8',
           'NS_EN_RUNTIME_LATENCY_BUCKET_INDEX_9',
           'NSGetTxConfigInfo', 'L3_DEFINE_TCP_IPV6_STREAM',
           'PVCAD_RUNNING', 'PROTOCOL_TYPE_OFF',
           'tagMPLSLSPDeleteAll', 'POS_CARD_PORT_ENCAP_INFO',
           'STREAM_BIND_VC', 'tagETHQoSCounterInfo', 'CAUSE_CLIR',
           'PPP_CLEAR_STATS', 'ATM_ELAN_MIN_ARP_RESPONSE_TIME',
           'CM_L3_6710', 'tagNSIGMPv3StatsInfo', 'FR_NRZ_ENCODE',
           'PPP_PEER_AUTH_ID', 'BOOL', 'NSSonetAlarmCounterInfo',
           'MULTICAST_SOURCE_ADDRESS',
           'XFP_AUX_MONITORING_PLUS_5V_SUPPLY_CURRENT',
           'ETH_PHY_AUTONEGOTIATE_MODE_25',
           'ETH_PHY_AUTONEGOTIATE_MODE_24', 'WN_PORT_INFO',
           'ETH_PHY_AUTONEGOTIATE_MODE_26', 'NS_STREAM_COUNT_INFO',
           'L3_VFD_STATIC', 'L3_USB_PORT_ENABLED', 'IATM_TX_CELLS',
           'FC_MAX_NUM_LINKS', 'tagFRLinkInfo',
           'PORTS_PER_ACTIVE_CARD', 'PPP_STATS_INFO',
           'CLIENT_CLOSE_RST', 'ETH_QOS_COUNTER_INFO',
           'NS_MOD_TCP_IPV6_STREAM', 'WAN_DS1_AMI_ENCODING',
           'tagWNCardCapInfo', 'IGMPV3_INCLUDE_FILTER_MODE',
           'CM_LAN_6300A', 'StreamIPv6', 'tagATMExtVCCInfo',
           'PROTO_PPP_ONLY', 'FR_IP_SUBNET_REG',
           'FR_LINE_SPEED_56000L', 'tagFRIPSubnetDeRegister',
           'AT_SONET_LINE_AIS_ALARM', 'NSLinkFaultConfig',
           'VG_CFG_TOKENRING', 'HTLatencyStructure',
           'GIG_CONTINUOUS_MULTIBURST_MODE', 'MPLSLSPNotComplete',
           'NSIGMPVLANTimestampInfo', 'CM_SC_6305',
           'NS_AGGR_MC_LATENCY_PER_STREAM_INFO',
           'IP_INC_IP_AND_MAC_SRC', 'tagATMILMIParams',
           'NS_HIST_LATENCY_OVER_TIME',
           'NS_DEFINE_MULTI_TCP_IPV6_STREAM_VLAN',
           'L3_VOICE_TEST_SETUP', 'STR_RATE_CLASS_UBR', 'ETDP_INCR8',
           'MPLS_EXPLICIT_ROUTE_OBJECT_CREATE',
           'PORT_IDENTIFIER_NOT_REGISTERED', 'L3_DEFINE_ICMP_STREAM',
           'CM_POS_3510A', 'ETHVLAN', 'AT_LOOPBACK_DISABLED',
           'ADDRESS_AUTOCONFIG_RUNNING', 'FST_CAP_START_ON_CONDITION',
           'OFFSET_FROM_IP_HEADER', 'FR_VFD_RANDOM',
           'NSIPv6ExtAuthenticationHeader', 'PPP_LCP_IPCP_REQSENT',
           'NS_HIST_TEST_COMBO_PER_STREAM', 'NSChassisCardInfo',
           'CT_MAX_FRAME_LENGTH', 'L3_RECEIVE_TRACKING_REPORT',
           'NSU64IsLE', 'L3_MOD_UDP_STREAMS',
           'tagIGMPGroupAddressBlock', 'Long',
           'XFP_TRANSCEIVER_2xFC_SMF', 'NSU64IsLT',
           'XFP_TRANSCEIVER_10GBASE_LR',
           'SOURCE_ADDRESS_SELECT_PASSED', 'tagNSIPv4OptionHeader',
           'GIG_VFD_INCREMENT', 'ATM_CALL_PARAM_SCR',
           'tagNSAlternateKeyConfig', 'tagFCFSPFStatsConfig',
           'CAPTURE_MODE_STOP_ON_EVENTS', 'tagATMClassicalIP',
           'MAX_FILL_PATTERN_SIZE', 'L3_ETHERNET_ON',
           'tagNSPPPHeader', 'FR_RX_AGGREGATE_PVC_INFO',
           'PHY_MODE_LAN', 'FRAME_IDENTIFIER', 'CT_POS',
           'FR_SMARTBITS_STREAM_INFO', 'ATM_ELAN_LES_JOIN_WAIT',
           'NS_ALTERNATE_KEY_CONFIG_INFO', 'NSLinkFaultInfo',
           'TCP_HIST_TCP_CONNECTION_INFO', 'tagNSIGMPv2Info',
           'NS_MULTI_LFS_LOCAL_CONTINUE', 'L3_MOD_802_3_STREAMS',
           'PORT_PUBLIC_DISCOVERY', 'GIG_IP_CHECKSUM_ERROR_GENERATE',
           'GIG_STRUC_CAP_INFO_REQUEST', 'tagFRIntervalTimeInfo',
           'ATM_STR_PARAM_SIG_FW_TD_TYPE',
           'ATM_CALL_PARAM_BURST_COUNT', 'tagNSIPv6RateInfo',
           'tagATMConnectionEx', 'ATTRIB_SPEED_8MB', 'CM_LAN_3100',
           'CM_LAN_3101', 'PPPO_USECHAPAUTH',
           'NS_MULTI_TX_SIGNATURE_MPLS_FRAMES',
           'tagNSQuerySubprocess', 'NSMLDGroupInfo',
           'L3MS_FIELD_VFD1_CYCLE_COUNT', 'DOT1X_SUPPLICANT_SRC_MAC',
           'NS_MULTI_IPV6_ICMP_UNREACHABLE_RX', 'tagNSMLDv2GroupMod',
           'TR_RXMAC', 'HT_CBA_DEFAULT', 'FR_DS1_E1_YELLOW_ALARM',
           'tagNSIPv6Address', 'POS_CONFIG',
           'L3_DEFINE_MULTI_802_3_STREAM', 'SLOT_RESERVED_BY_USER',
           'NS_IGMPV3_GROUP_INFO', 'DOT1X_ALL', 'FRAME_DST_PORT',
           'ATM_CONN_TYPE_SVC', 'DOT1X_SUPPLICANT_STATUS_INDEX',
           'tagErrorList', 'NS_RUNTIME_HIST_COMBO_PER_STREAM_INFO',
           'CM_LAN_6201B', 'CM_LAN_6201A', 'VC_TYPE_SVC',
           'ETGAP_100NS', 'PMC_DISK_MEM_TEST_FAILURE',
           'XFP_AUX_MONITORING_LASER_WAVELENGTH', 'CAPTURE_CRC',
           'DOT1X_SUPPLICANT_DELETE', 'FR_NO_ENCAP',
           'NS_MOD_UDP_IPV6_STREAM', 'L3_HIST_V2_LATENCY_INFO',
           'INVALID_ICMP_CODE', 'tagETHEnhancedStatusInfo',
           'GIG_AFN_RESERVED11', 'GIG_AFN_RESERVED10',
           'L3_TRANSMIT_GETSTREAMCOUNT', 'tagStreamSmartBits',
           'ATM_FEATURES_PER_CONN_BURST', 'FR_LINE_SPEED_8192000L',
           'tagMPLSLSP', 'ATMVCDBListHdr', 'NS_MULTI_RX_IPV4_FRAMES',
           'FR_ETSTAT_UNI_UP', 'CT_FILTER_PROTOCOL_ID_IP',
           'FCGetNext', 'PPP_MRU', 'NS_DECISION_ABORT',
           'tagNSAlternateKeyHashConfig', 'XENPAK_NVR_VENDOR_OUI',
           'XFP_CONNECTOR_FC_STYLE_2', 'XFP_CONNECTOR_FC_STYLE_1',
           'NS_EN_RUNTIME_MIN_LATENCY_INDEX', 'FC_LOG_LEVEL_INFO',
           'NS_IPV6_CONFIG', 'GIG_STRUC_AFN_CONFIG',
           'DOT1X_SUPPLICANT_FAILURE_AUTH_PERIOD_TIMEOUT',
           'ATM_CALL_SETUPEX', 'ATTRIB_CAN_COLLIDE', 'WNPortInfo',
           'IP_DEC_SRC_IP', 'NS_DECISION_RETRY_ONCE',
           'NSPerStreamCounterInfo', 'tagFCWWNCount',
           'XENPAK_OPTICAL_PIGTAIL_TYPE', 'tagNSPMCOnePartitionInfo',
           'CAUSE_MSG_INCOMP_CALL_STATE', 'NEXT_HOP_SIMPLE_MODE',
           'NS_DEFINE_IPV6_STREAM', 'NSTCPHeader', 'tagFCGetRPN_ID',
           'L3_MOD_IP_STREAM', 'TCP_CLOSE_ONE',
           'PPP_OE_PEER_IPV6_ADDR', 'NS_IGMP_JOIN', 'L3_USB_MODE_ON',
           'MLDGroupAddressBlock', 'PORT_LINK_INITIALIZING',
           'ATM_STR_PARAM_GEN_MBS', 'tagNSWaitForEvent',
           'ATTRIB_SPEED_10GB', 'FR_ETSTAT_GROUPMEMBER',
           'tagATMDS1E1LineParams',
           'PVCAD_DEFAULT_OUTSTANDING_REQID_TIMEOUT',
           'ATM_TXD_MEMORY_FAILURE', 'ATMConnection64Info',
           'ETMF_PACKET_LENGTH',
           'DOT1X_PORT_MODE_MULTI_AUTHENTICATION', 'XENPAK_I_64_5',
           'NS_DEFINE_UDP_STREAM_VLAN', 'MII_STATUS_EXT_CAP',
           'DOT1X_SUPPLICANT_ID',
           'NS_HIST_LATENCY_PER_STREAM_INFO_32', 'PRIVATE_MODE',
           'FR_E1_75_OHM_HIRL', 'CA_SIGNALRATE_10MB',
           'NS_STREAM_BINDING_INFO', 'ATM_STREAM_PARAMS_FILL',
           'MAX_PASSIVE_SLOTS', 'PAT_0F0F', 'FR_LINE_SPEED_768000L',
           'NS_HIST_RAW_SIGNATURE', 'FR_CAPTURE_INFO',
           'NS_DEFINE_MULTI_ICMP_IPV6_STREAM', 'tagNSNTPFOMInfo',
           'GIG_STRUC_TEST_RAM', 'tagATMConnection',
           'SIG_EMUL_TEARDOWN', 'MII_CTRL_POWERDOWN',
           'ISMB_STD_RXBYTES', 'NS_MLD_STOP_LISTEN', 'CAPTURE_ALIGN',
           'tagATMIncomingSVCMethod', 'Layer3StreamJitterComboInfo',
           'PPP_MOD_SRCMAC', 'FCMultiSwitchConfig',
           'NS_EN_RUNTIME_RETRIEVE_AFTER_TEST',
           'NSTransmitPaddingMode', 'WN_DS1_D4_LINE_FRAMING',
           'PPP_NCPS_INIT', 'MLDV1_FORCE_UNSOLICITED_LISTEN_REPORTS',
           'ATTRIB_TRANSCEIVER_MULTIMODE', 'L3_MOD_UDPDHCP_STREAMS',
           'NSTCL_PARAMETER_RANGE', 'ATM_25_MAX_PORTS',
           'FC_STATS_TYPE_FSPF', 'ATM_CONN_COPY',
           'ATM_ELAN_UNAVAILABLE', 'NS_EN_RUNTIME_LATENCY_BUCKETS',
           'AT_RATE_CLASS_UBR', 'INVALID_SOURCE_LINK_LAYER_OPTION',
           'XENPAK_NVR_VENDOR_DAY_CODE',
           'NS_DISABLE_TAGS_ALL_STREAMS',
           'XENPAK_NVR_VENDOR_FIELD_ADDRESS', 'NSStreamIDTableInfo',
           'NS_MULTI_LINK_FAULT_SIGNALING_COUNTERS',
           'NS_MOD_RTP_STREAMS_VLAN', 'NSDiffServV2RateInfo',
           'L3_RECEIVE_TRACKING_START',
           'NS_MULTI_IPV4_CHECKSUM_ERROR', 'GIG_PHY_LOOP_DOWN',
           'Layer3IGMPLeave', 'ATM_25_LINE_CELL_RATE',
           'L3_ENABLE_TAG', 'STR_RATE_CLASS_ABR',
           'NS_NTP_CLIENT_ENABLE', 'SIGNATURE_IP_LENGTH_MODE',
           'ATM_DS1_CELL_FRAMING', 'POS_TRIGGER_OFF', 'tagWNCardCfg',
           'tagLayer3StreamLatencyInfo32', 'tagETHLatencyInfo',
           'L3_RNDIS_ON', 'PUBLIC_MODE', 'WN_E1_75_OHM_HIRL',
           'FR_LMP_ANNEX_A_PARM', 'tagNSHWConfig',
           'TCP_HTTP_START_VERIFICATION', 'GIG_STATUS_TX_PAUSE',
           'ATM_LOOPBACK_LOCAL_PHY', 'DOT1X_SUPPLICANT_SESSION_IDLE',
           'NS_MLD_GROUP_COUNT_INFO',
           'XFP_AUX_MONITORING_TEC_CURRENT', 'ATM_CALL_ADDR_LIST',
           'WN_PVC_AGGREGATE_CNT_MAX', 'ETBNC_20MHZ', 'FR_STRM_CTRL',
           'WN_DS1_E1_YELLOW_ALARM', 'WNTriggerDel',
           'ENABLE_NON_BLOCKING_MODE', 'tagStreamTCPVLAN',
           'tagFCFlogi', 'ATMTriggerInfo', 'GIG_PHY_LOOP_LOCAL_PCS',
           'WN_FEATURES_PER_PORT_BURST',
           'CAUSE_AAL_NOT_SUPPORTED_3_0', 'LOGFILE_SIZE_20480',
           'L3_RECEIVE_TRACKING_LATENCYPERSTREAM',
           'ETH_PHY_LINK_PARTNER_RX_NEW_PAGE', 'HTLED_MGMTLOFYELLOW',
           'LCP_CLOSE_LINK_DOWN',
           'FR_HIST_V2_LATENCY_PER_STREAM_INFO', 'FR_CARD_DCE',
           'XENPAK_PHY_MODE_POS', 'ATM_STR_PARAM_SIG_TRAFFIC_TYPE',
           'FR_ETSTAT_TRANSMITTING', 'NS_DEFINE_UDP_IPV6_STREAM',
           'FCGetCOS_ID', 'tagATMSigEmulatorInfo', 'ATMCellTime',
           'AT_CELL_SCRAMBLING_OFF', 'WN_CAPTURE_ADD_LINE',
           'ATM_CONN_MODIFY', 'NS_DEFINE_UDP_STREAM',
           'NSIGMPv3GroupMod', 'MAX_AGENT', 'tagATMDS1E1LineInfo',
           'NS_PORT_TRANSMIT_INFO', 'FR_DS1_E1_LOCD_ALARM',
           'L3MS_FIELD_DMAC_WITH_SKIP', 'FR_HIST_L3_LATENCYBYSTREAM',
           'FR_MAX_IPSUBNET_ID', 'ETH_VLAN_CFI_RIF_PRESENT',
           'ATM_DS1_N22X5_DB_BUILDOUT', 'PPP_STOP', 'CM_SE_6205',
           'tagHubSlotPort', 'FRLmiInfo', 'ATM_PVCAD_SEND_GETNEXT',
           'tagPOSCardGetSpeedInfo', 'ETH_VLAN_PRI_4',
           'tagIPSubnetDeReg', 'WN_CARD_IDENT',
           'LOSS_OF_TRANSITORY_FLAG', 'FSTCaptureInfo',
           'FR_GROUP_START_CMD', 'tagNSHistSequencePerStreamInfo',
           'IGMPJoinLeaveTimeStampInfo', 'tagStreamRTPVLAN',
           'COS2_UNSUPPORTED', 'FR_HIST_SEQUENCE',
           'L3_STREAM_BINDING_INFO', 'ATM_DS1_266_TO_399_BUILDOUT',
           'DOT1X_EAP_TYPE_MSCHAPV2', 'tagNSIGMPv2GroupID',
           'ATM_STR_PARAM_SIG_BC_CLASS',
           'NS_CAPTURE_STATUS_SIGNATURE',
           'NS_DEFINE_MULTI_UDPDHCP_STREAM', 'ETH_PHY_MDI_CROSSOVER',
           'NS_HIST_TEST_LATENCY_DIST_PER_STREAM', 'NS_OAM_CONFIG',
           'L3_DEFINE_SMART_TCP_STREAM', 'FR_DS1_E1_AIS_ALARM',
           'XENPAK_10GBASE_SR', 'XENPAK_10GBASE_SW',
           'FR_PVC_STREAM_MAP_CFG', 'ATMStreamParamsModify',
           'L3_AGGR_RAW_TAGS_INFO', 'PVCAD_STATE', 'NS_MLD_RESET',
           'FRStreamControl', 'HT_LATENCY_REPORT',
           'NS_HIST_LATENCY_DIST_PER_STREAM_INFO',
           'PVCAD_CHECKING_VCCS', 'tagWNStreamCtrl', 'QUEUE_ENABLE',
           'NS_WIS_PATH_YELLOW_ALARM', 'NSPMCVPNInfo',
           'WAN_DS1_266_TO_399_BUILDOUT', 'IP_INC_IP_AND_MAC_DST',
           'XENPAK_NVR_VENDOR_YEAR_CODE',
           'SSCOP_STATE_OUT_RECOV_PEND', 'NS_VLAN_HEADER',
           'NS_RUNTIME_ENHANCED_HIST_STATS', 'FR_E1_CRC4_ENABLE',
           'PPP_NCPS_ACKRCV', 'FRAME_LEC_ID', 'CM_XLW_3720A',
           'CT_MAX_FILENAME_LENGTH', 'RTP_PAYLOAD_G711A',
           'tagFRCardProtoCfgParmType', 'ETH_PROTOCOL_PARAMETER_INFO',
           'tagGIGCaptureInfoRequest', 'UNI_DCE', 'NSOAMConfig',
           'LISTENACK', 'NS_DOT1X_SUPPLICANT_FILL',
           'ATM_STR_ACTION_RESET', 'tagNSIPv6RouterPrefixInfo',
           'NS_UDP_STREAM_INFO', 'NS_PORT_CONFIG_INFO', 'tagETHMII',
           'StreamICMPIPv6', 'WN_CAPTURE_DEL_LINE',
           'NS_CAPTURE_DETAIL_INFO', 'ATM_STR_PARAM_SIG_FW_QOS',
           'HIST_LAT_SORT', 'ATM_B_BC_UNI40_NONE', 'LOCAL_MODE',
           'CM_LAN_6200', 'ATMStreamTriggerTimeStatus',
           'GIG_STRUC_IMAGE_DOWNLOAD', 'XAUI_PRBS_TEST_COMPLETED',
           'NS_MULTI_IPV6_PING_COUNTERS', 'CM_XFP_3730A',
           'ATM_LED_STATUS_RX', 'PET_MEM', 'tagLayer3HistActiveTest',
           'UNI_VERSION_4_0_NET', 'MAX_FFOM_LIMIT',
           'NSIPv6ExtAuthentication', 'CT_MODE_STOP_ON_REQUEST',
           'HTLED_XENPAK_MODULE_CHANGE', 'NS_SONET_PATH_BIP_ALARM',
           'WN_FEATURES_PER_CHAN_BURST', 'SERIAL_PORT_TIMEOUT',
           'FRAME_TCP_HEADER_CRC', 'ETH_PHY_TX_ERROR', 'LCP_NOT_CFGD',
           'USE_RANDOM', 'STREAM_PROTOCOL_IPV6_VLAN',
           'WN_CHAN_ATTRIB_CFG_INFO', 'tagNSHistLatencyOverTime',
           'tagLayer3StreamTransmitMode', 'CT_FILTER_MODE_PATTERN',
           'AT_INTERNAL_CLOCK', 'ATM_SAR_MEMORY_FAILURE',
           'NS_DEFINE_UDP_IPV6_STREAM_VLAN',
           'NS_DEFINE_IPV6_OVER_IPV4_TUNNELING',
           'CAPTURE_EVENTS_ABORT', 'ATM_MULTI_BURST_ENABLE',
           'ATM_OAM_F5', 'ATM_OAM_F4', 'CA_HASVFDREPEATCOUNT',
           'FCSCReg', 'SOCKET_RECONNECT_SUCCESS',
           'CA_SIGNALRATE_45MB', 'TCPInitStackMode', 'NS_IPX_HEADER',
           'GIG_STRUC_LOAD_FPGA', 'ETDP_00000000FFFFFFFF',
           'NS_WIS_INJECT_SECTION_LOS_ALARM', 'PET_SERR',
           'tagLayer3HistLatency', 'MII_STATUS_100BASE_T4',
           'SSCOP_STATE_OUT_CONN_PEND', 'UNSPECIFIED_ERROR',
           'Layer3V1StreamLatencyInfo', 'PPP_STATUS_PEER_IFACE_ID',
           'tagATMVCDBListHdr', 'SOCKET_RECONNECT_FAIL',
           'ATM2_SAR_FPGA_VERSION', 'ACTIVE_HUB_NOT_INITIALIZED',
           'WN_CHAN_ATTR_MOD_CFG', 'PORT_LOSS_OF_SIGNAL',
           'tagNSMLDv2ListenerReportConfig', 'ATM_DS1_E1_LOS_ALARM',
           'FRAME_LLC_CONTROL', 'NS_DEFINE_ICMP_STREAM',
           'L3_CAPTURE_COUNT_INFO', 'tagATMConnTriggerStatus',
           'NS_MOD_SMARTBITS_128_STREAM',
           'ROUTER_DISCOVERY_COMPLETED', 'FR_GROUP_STEP_CMD',
           'tagLayer3V2HistDistribution', 'TCP_GET_RX_LOG',
           'WN_PVC_FRM_LEN_DFLT',
           'ATM_CALL_PARAM_CALL_LENGTH_RND_DELTA', 'StreamUDPVLAN',
           'NS_WIS_SECTION_LOF_ALARM', 'tagGIGAutoFiberNegotiate',
           'L3_IGMP_JOIN_LEAVE_TIMESTAMP_INFO',
           'NS_IPV6_EXTENSION_HEADER', 'ATM_SSCOP',
           'ATM_MAX_CONNECTIONS', 'tagTCPSetupStream',
           'CA_HAS_DEBUG_MONITOR', 'XENPAK_OPTICAL_MU_TYPE',
           'USE_EUI_64', 'ETH_CARD_INFO', 'CONTROLLER_SMB1000',
           'NS_TX_IPV6_ADDRESS_INFO', 'MAX_URL', 'MAX_URI',
           'NSUpdateTxConfigInfo', 'tagFRPvcControl',
           'L3_DEFINE_IPX_STREAM', 'WN_DS3_CHANNELIZED',
           'NS_IPV6_IPV4_ADDRESS_MAP_DELETE',
           'L3_MOD_SMARTBITS_STREAM', 'FR_T1E1_LINE', 'TCP_FLAG_PSH',
           'LOGFILE_SIZE_2048', 'MAX_MOD_SUPPLICANT_ARRAY',
           'NS_IGMP_VLAN_TIMESTAMP_INFO',
           'NS_ALTERNATE_KEY_HASH_CONFIG', 'LINE_DOWN',
           'NS_MULTI_HW_TX_FRAMES', 'L3MS_FIELD_FRAMELEN',
           'POS_CARD_BASE', 'TokenRingLLCStructure',
           'STREAM_PROTOCOL_IP_VLAN', 'FR_TX_SINGLE_BURST',
           'XENPAK_LASI_TX_ALARM_ENABLE', 'tagNSStreamScheduleEntry',
           'STREAM_PROTOCOL_SMART_TCP_VLAN',
           'NS_IPV6_EXT_AUTHENTICATION_HEADER',
           'IATM_CELL_ERROR_RATIO', 'tagNSIGMPCounterInfo', 'AT_AAL5',
           'tagMPLSLSPCopyDelta', 'MPLS_RSVP_ENABLE_BUNDLE_MSG',
           'SPEED_155MHZ', 'NS_IPV4_PROTOCOL_HEADER_INFO',
           'GIG_PREAMB_LEN_12_BYTES', 'NS_WIS_LINE_STATUS_INFO',
           'PPP_STATUS_QUERY', 'HTLED_MGMTLOFGREEN',
           'L3_DEFINE_MULTI_TCP_IPV6_STREAM_VLAN',
           'tagGIGCaptureData', 'XENPAKAlarmConfig',
           'tagATMConnTriggerParams', 'L4MS_FIELD_TCP_SEQUENCE',
           'NS_MULTI_RX_OVERSIZE',
           'DOT1X_SUPPLICANT_AUTHENTICATION_ADDR', 'WNChannelPhysCfg',
           'NS_WIS_LINE_FERF_ALARM', 'L3_DEFINE_MULTI_IP_STREAM',
           'MPLS_LSP_BIND_STREAMS', 'tagFRHistogram',
           'FR_DEFINE_IPX_STREAM', 'FC_SWITCH_TOPOLOGY_RING',
           'L3_DEFINE_TCP_IPV6_STREAM_VLAN', 'L3_VFD5', 'L3_VFD4',
           'ATM_STREAM_SEARCH_INFO', 'L3_VFD1', 'L3_VFD3', 'L3_VFD2',
           'NS_MULTI_IPV4_PING_REPLIES_TX', 'VG_CFG_ETHERNET',
           'CM_POS_3550A', 'L3MS_FIELD_VFD_CHAIN',
           'NCP_CONFIG_TIMEOUT', 'ATM_ELAN_MAX_ARP_RETRY_COUNT',
           'XENPAK_RX_ALARM_PHY_XS_RECEIVE_LOCAL_FAULT_ENABLE',
           'WN_DS3_FRMR_STATUS_IDL', 'L3_HIST_JITTER_COMBO',
           'ATM_DS3_E3_YELLOW_ALARM', 'PORT_RELINK_REQUIRED',
           'AT_ERROR_COUNT_BLOCK', 'CONTROLLER_SMB6000C_NTS5000A',
           'PACKET_NOT_AVAILABLE', 'AT_HEC_ERROR_HANDLING_DISCARD',
           'FR_DEFINE_SMARTBITS_STREAM',
           'GIG_STRUC_CAPTURE_SETUP_READBACK',
           'START_NEXT_HOP_DETERMINATION', 'PPP_LOCAL_AUTH_ID',
           'XENPAK_ANY_SPECIFIC_FIELD',
           'FC_SWITCH_MULTI_LINK_CONFIG_INFO', 'NS_MOD_VFD',
           'tagNSTransmitPaddingMode', 'NS_MOD_RTP_STREAM_VLAN',
           'MII_STATUS_100BASE_T2_HALF', 'L3_RECEIVE_GETCAPTURECOUNT',
           'WN_T1E1_LINE_DEL_ALL', 'AT_RX_CT_PROTOCOL_CLIP_ARP',
           'NS_LINK_FAULT_LOCAL', 'PPP_OE_SOURCEMAC',
           'XFP_TRANSCEIVER_S_64_2b', 'XFP_TRANSCEIVER_S_64_2a',
           'INITIAL_PROCESS_ASSOCIATOR_NOT_REGISTERED',
           'XENPAK_NVR_CUSTOMER_AREA', 'SCHEDULE_MODE_ADVANCED',
           'NS_TRIGGER_DIR_RX', 'tagPPPStatusSearchInfo',
           'FR_LINE_SPEED_256000L', 'tagFCGetNext', 'TR_MASK',
           'FR_DS1_399_TO_533_BUILDOUT', 'XENPAK_MODULE_10GBASE_LR',
           'tagNSDOT1XDownloadCertificateFiles',
           'XENPAK_MODULE_10GBASE_LW', 'GIG_STRUC_TRIGGER',
           'FR_MOD_UDP_STREAM', 'tagWNChannelTxCfg', 'PAT_CUST',
           'FR_UNI_DCE', 'FRAME_HEADER_LENGTH',
           'NS_TRIGGER_OUT_L2_ERROR', 'ATMPVCADVPIVCIForGetnext',
           'NSOAMCounterInfo', 'STREAM_SOURCE_ADDRESS',
           'NSIPv6ExtDestinationHeader', 'NS_MOD_IPV6_EXT_ESP',
           'ATM_TD_AGGR_COMBO_RATES', 'WN_DS3_LINE_INFO',
           'ATM_CALL_PARAM_PCR', 'FR_CAPTURE_PACKET_INFO',
           'WN_LMI_INFO', 'NS_DEFINE_MULTI_UDP_IPV6_STREAM_VLAN',
           'FR_DEFINE_MULTI_IP_STREAM', 'PPP_REQUIRED_OPTIONS',
           'NSProtocolHeaderInfo', 'ATM_CONT_MULTI_BURST_ENABLE',
           'L3_MOD_TCP_IPV6_STREAM_VLAN', 'NSUpdateHeaderInfo',
           'tagNSModStreamArray', 'XFP_CONNECTOR_UNKNOWN',
           'tagNSTrigger', 'CT_FILTER_OPERATOR_PAT1_ONLY', 'IDLE',
           'ATM_ELAN_LECS_SVC_WAIT', 'GIG_PREAMB_LEN_32_BYTES',
           'FR_STATUS_LINK_OK', 'tagLayer3DHCPV2HostInfo',
           'ATM_ELAN_BUS_ARP_WAIT', 'MII_REGISTER_1000_STATUS',
           'HTLED_COLLGREEN', 'DOT1X_SUPPLICANT_AUTHENTICATION_TIME',
           'tagNSIPv6RouterDiscoveryInfo', 'DOT1X_EAP_TYPE_TTLS',
           'FR_STREAM_INFO', 'WN_FEATURES_PPP_FR',
           'NS_RX_SIGNATURE_STOP', 'tagPOSConfig',
           'L3_MOD_UDP_STREAMS_VLAN',
           'tagNSIPv6ExtAuthenticationHeader', 'ATMDS1E1LineInfo',
           'LOSS_OF_DELETED_FLAG', 'tagStreamICMP',
           'L4MS_FIELD_TCP_WINDOW', 'tagTCPCurveRecord',
           'FR_LINE_SPEED_1600000L', 'GROUP_HUB_SLOT_PORT_ERROR',
           'IATM_OAM_F5', 'IATM_OAM_F4', 'FR_LINE_SPEED_320000L',
           'FR_TX_MULTI_BURST', 'IATM_CELL_TRANSFER_DELAY',
           'NSNTPPeerListInfo', 'FR_ETSTAT_RXLED',
           'PMC_MAX_DISK_PARTITIONS', 'FC_FSPF_REAL_TIME_STATS_INFO',
           'PPP_LCP_IPCP_STOPPED', 'HTLED_GREEN', 'FR_HISTOGRAM',
           'ETDP_AAAA', 'NS_DEFINE_SMART_TCP_STREAM',
           'TCP_HTTP_EXTENDED_CONFIG', 'PPP_PARAMS_MODIFY',
           'ATM_STR_PARAM_CELL_HEADER', 'L3_DHCP_RENEW', 'Float',
           'FRAME_SNAP_OUI', 'MPLSObjectDelete',
           'NS_AGGR_V2_LATENCY_PER_STREAM_INFO', 'LOGICAL_ERROR',
           'tagStreamUDPDHCP', 'NS_STREAM_ARP_STATUS_INFO',
           'PPP_STATUS_OSI_STATE', 'WNPVCCfg', 'FR_CARD_CFG',
           'ETH_PHY_LINK_PARTNER_NEXT_PAGE_CAPABLE',
           'tagATMVCDBEntryParams', 'FRAME_FLAG_LENGTH_ERROR',
           'FR_STREAM_IP', 'ATM_DS1_E1_LINE_INFO', 'HIST_SEQ_TRACK',
           'WN_PVC_INFO', 'ATM_STR_STATUS_STREAM_INDEX',
           'ATMV_FIELD_BURST_GAP', 'PPP_SET_CTRL',
           'FR_LINE_SPEED_2048000L',
           'NS_ALTERNATE_KEY_INVERSE_TRIG_PREFILTER',
           'WAN_DS1_E1_YELLOW_ALARM', 'WN_DS1_ESF_LINE_FRAMING',
           'XFP_CDR_SUPPORT_FOR_10_7_GBS', 'tagFRT1E1LineCfg',
           'L3MS_FIELD_SIPA', 'WNTriggerCtrl', 'MPLSLSPCopyDelta',
           'NS_REAL_TIME_TRACKING_TX_STOP', 'NSErrorList',
           'NSIGMPv3StatsInfo', 'ETCapturePacketInfo',
           'Layer3TrackingActiveTest', 'NSUpdateVFDInfo',
           'HVFD_ENABLED', 'FC_LOG_LEVEL_FATAL', 'FRPvcStrmMapCfg',
           'L3_TX_ADDRESS_INFO', 'FRTriggerCfg',
           'PPP_IPV6_STATUS_INFO', 'STATS_MODE_EXTENDED',
           'FR_GROUP_MEMBER_CMD', 'XENPAKProfile', 'tagATMCardType',
           'tagNSGetHeaderInfo', 'MII_CTRL_ISOLATE',
           'SPEED_DUPLEX_UNTOUCHED',
           'L3_DEFINE_MULTI_IPV6_STREAM_VLAN', 'PPP_MOD_SESSID',
           'NS_STREAM_ID_TABLE_INFO', 'tagATMStartCardSetupParams',
           'NSIGMPConfig', 'NSIPOption', 'TCPHTTPExtendedConfig',
           'NS_HIST_EN_SCALE_100_NANOSECOND', 'CA_SIGNALRATE_622MB',
           'S16', 'GIG_PHY_LOOP_LOCAL_XGMII',
           'SONET_SECTION_LOF_ALARM', 'UNI_TMR_TICKS_PER_SEC',
           'MPLS_LABEL_DATA_INFO', 'tagLayer3IGMPJoin',
           'FC_LINK_COST_500', 'ETH_SET_SPEED',
           'PORT_PORT_LOGIN_ERROR', 'XENPAK_PHY_CONFIG_INFO',
           'ENCAP_ATM_SVC_LANE802_5', 'LCP_DOWN',
           'ENCAP_ATM_SVC_LANE802_3', 'NSFlashData',
           'ATM_STR_STATUS_SVC_CAUSE_CODE', 'MAX_COOKIE',
           'NS_VFD2_CONFIG', 'UNI_VERSION_NET_MASK',
           'FR_HIST_LATENCY_DISTRIBUTION_INFO',
           'WN_FEATURES_PER_CHAN_TRIGGERS', 'TRFC_PCF_EXPRESSBUFFER',
           'MPLSItem', 'Layer3V2HistDistribution',
           'IP_DEC_SRC_MAC_AND_DST_MAC', 'tagL2StatsInfo',
           'INVALID_LINK_PORT', 'L3_STREAM_ICMP',
           'FC_FSPF_STATS_CONFIG_INFO', 'ATM_BURST_DISABLE',
           'NS_ETHERNET_MODE_ON', 'NSIPv6RateInfo',
           'CONTROLLER_UNKNOWN', 'L3MS_FIELD_VFD2_CYCLE_COUNT',
           'AT_ERROR_COUNT_INDIVIDUAL', 'XFP_TRANSCEIVER_I_64_1r',
           'ATM_AAL5_INFO', 'ATM_CONN_INFO_SUMMARY', 'FR_STREAM_UDP',
           'tagLayer3HistTagInfo', 'XFP_OPTIONAL_VPS_BYPASS_REG_MODE',
           'TCP_RESET', 'MAX_SCHED_ENTRIES', 'NSHistLatencyOverTime',
           'FR_E1_HDB3_ENCODING', 'FC_LINK_COST_1000',
           'NSWaitForEvent', 'NS_DEFINE_MULTI_IP_STREAM_VLAN',
           'L3_DHCP_STATS_INFO', 'TR_CLAIMEVENTS', 'HIST_LAT_TIME',
           'CM_SX_7410', 'CAUSE_LOC_PUB_REM', 'SMB_STD_ERR_ALIGN',
           'FR_NIC_EIA_RD_DCD', 'UNI_DEFAULT_TMR_T309_3_0',
           'UNI_DEFAULT_TMR_T309_3_1', 'FR_RFC1490_BRIDGED_SNAP',
           'F32', 'TR_BEACONEVENTS', 'FR_DEFINED_STREAM_COUNT_INFO',
           'NS_DEFINE_IPV6_EXT_DESTINATION',
           'ATM_ELAN_INIT_LECS_DIRECT', 'tagNSDiffServConfig',
           'tagETHTransmit', 'NS_DHCP_ACTION',
           'FR_DEFINE_MULTI_SMARTBITS_STREAM',
           'NS_MULTI_IPV4_PING_REPLIES_RX', 'CT_DEFAULT_FILENAME',
           'MAX_USER_CONNECTIONS', 'tagTCPDataLogEventRx2',
           'PPP_LCP_IPCP_OPENED', 'NSDOT1XSupplicantStatusInfo',
           'ATM_DS3_CELL_LINE_CELL_RATE',
           'CAPTURE_LENGTH_ENTIRE_FRAME', 'NS_MFG_PROM_CONFIG',
           'WN_TRIG_NO_TRIG', 'IATM_CELLSLOST', 'FR_LED_STATUS_INFO',
           'IL3_PINGREQ_RECV', 'tagFSTAlternateTx', 'WN_START_CFG',
           'ATM_STR_PARAM_SIG_TIMING', 'NSVLANHeader',
           'AN_LINK_NOT_NEGOTIATED', 'L3_MOD_SMARTBITS_128_STREAM',
           'NSPMCFlashInfo', 'ATM_STR_STATUS_CELL_HEADER',
           'ETDP_0F0F', 'SOCKET_FAILED', 'LOGICAL_INVALID_IU_SIZE',
           'CORP_B', 'WAN_DS1_E1_OOF_ALARM',
           'WN_DEFINE_SMARTBITS_STREAM', 'NS_TRIGGER_DIR_TX',
           'FCGetGID_PN', 'tagNSCaptureCountInfo',
           'ATTRIB_SPEED_100MB', 'FR_LINE_SPEED_64000L',
           'ATM2_MAIN_FW_VERSION', 'SONET_LOCD_ALARM',
           'ATM_ILMI_DEREGISTER', 'NS_DHCP_CONFIG',
           'CAUSE_LOC_PUB_LOCAL', 'NS_PHY_DEFAULT_HALF_DUPLEX',
           'GIG_RETRY_16_RX', 'FST_CAP_LAST_64_BYTES',
           'CAPTURE_OVERSIZE', 'FC_DEVICE_LOGIN_COMPLETE_STATE',
           'tagXAUIPRBSStatusInfo', 'MII_STATUS_100BASE_T2_FULL',
           'XENPAK_LASI_LS_ALARM_ENABLE',
           'NS_DEFINE_MULTI_UDP_IPV6_STREAM', 'ETBNC_EXTCLKINV',
           'XENPAK_MAX_NVR_CUSTOMER_SIZE', 'IP_DEC_IP_AND_MAC_SRC',
           'WN_DS3_UNCHANNELIZED', 'FC_PORT_NAME_REQUEST',
           'WN_STREAM_MOD_CFG', 'CA_SIGNALRATE_100MB',
           'NS_SONET_SECTION_LOF_ALARM', 'L3_CAPTURE_STATUS_TRIGGER',
           'NS_MULTI_LFS_REMOTE_CONTINUE', 'ETH_TRIGGERS_OFF',
           'tagStreamFC', 'ATM_ELAN_DEFAULT_ARP_RESPONSE_TIME',
           'ARP_NORMAL_MODE', 'POS_CARD_LINE_CONFIG_INFO',
           'PMC_MEM_TEST_FAILURE',
           'DOT1X_SUPPLICANT_SESSION_AUTHENTICATING', 'tagFCSCReg',
           'L3_WRITE_STREAM_BG', 'L3_MOD_TCP_STREAM',
           'PPP_OE_SESSION_START', 'XFP_TRANSCEIVER_2xFC_MMF',
           'PPP_STATUS_IPCP_STATE', 'NS_DOT1X_SUPPLICANT_CONFIG',
           'ATM_LOGFILE_CONTROL', 'ATM_ELAN_DEFAULT_CONTROL_TIMEOUT',
           'FST_CAPTURE_STATUS_UNDERSIZE', 'PPP_CONFIGURE_ECHOFREQ',
           'Layer3HistActiveTest', 'SYNFIN', 'ATM_MAX_ARRAY_DIM_512',
           'VCDB_STATE_DELETED', 'NSStreamConfig',
           'NS_STREAM_SCHEDULE_INFO', 'tagFSTVLAN',
           'IP_ADDRESS_NOT_REGISTERED', 'NSDOT1XSupplicantStatsInfo',
           'tagNSPhyDefaultConfig', 'tagMPLSLSPCountInfo',
           'WN_PVC_CNT_MAX', 'L3_RNDIS_MODE_CMD',
           'tagWNChannelPhysCfg', 'CAUSE_RES_UNAVAIL', 'MPLSStart',
           'WN_STREAM_CFG_INFO', 'TCPTransRateInfo',
           'IATM_CORRECTEDHEADERS', 'WAN_DS1_ESF_LINE_FRAMING',
           'ATM_SVC', 'FC_LINK_COST_10000',
           'DOT1X_SUPPLICANT_FAILURE_AUTH_LOGOFF',
           'tagATMConnectionModify',
           'IP_OPTION_STRICT_SOURCE_RECORD_ROUTE',
           'NS_CT_START_CAPTURE', 'NS_CT_CONFIG_INFO',
           'ILMI_TMR_TICKS_PER_SEC', 'CM_SX_7205',
           'CT_FILTER_PROTOCOL_ID_ARP', 'CM_POS_3511A',
           'FR_LMP_DISABLE', 'L3_DEFINE_SMARTBITS_STREAM',
           'ETH_LINK_INIT', 'MAX_HISTOGRAM_TYPES',
           'DOT1X_SUPPLICANT_SUCCESS_EAPOL_START_NO_RESPONSE',
           'L3_ENGINE_RECEIVE', 'Layer3ModifyStreamDelta',
           'CM_AT_9622', 'CM_AT_9155', 'PET_ASSERT',
           'L3_HIST_ACTIVE_TEST_EXPRESS_INFO', 'tagETHLatency',
           'FR_DEFINE_UDP_STREAM', 'tagNSUpdateTxConfigInfo',
           'CM_LAN_3306A', 'GIG_STRUC_TRIGGER_READBACK',
           'tagStreamIPv6VLAN', 'FSTControlAux', 'FCStatus',
           'XFP_OPTIONAL_SOFT_P_DOWN', 'NS_IGMP_LEAVE_VLAN',
           'NS_IPV4_OPTION_HEADER', 'NS_CAPTURE_STATUS_VLAN',
           'NSIPv6OverIPv4Tunneling', 'L3MS_FIELD_SIPV6',
           'ATM_FEATURES_STREAM_COPY_PASTE', 'S32',
           'FR_MOD_IPX_STREAM', 'NS_SONET_COUNTER_INFO',
           'XFP_IDENTIFIER_GBIC', 'tagPPPoEStatsInfo',
           'NS_WIS_INJECT_LINE_BIP_ERRORS', 'HTLED_SYNC',
           'tagNSIPv6ExtDestinationHeader', 'PORT_FABRIC_LOGIN_ERROR',
           'tagNSMPLSList', 'tagATMSonetLineInfo',
           'NS_TRIGGER1_OR_TRIGGER2', 'NS_MULTI_RX_PAUSE',
           'tagGIGAfnConfig', 'L3_STREAM_GROUP_DEFINE',
           'ATM_STREAM_VCC_INFO', 'L3StreamExtension', 'FST_VLAN',
           'BURST_DISABLE', 'GPS_STATUS_OK',
           'OAM_PACKET_TYPE_NORMAL_OAM', 'NS_GROUP_SET_GROUP',
           'SSCOP_DEFAULT_TMR_POLL_3_1', 'SSCOP_DEFAULT_TMR_POLL_3_0',
           'ETMF_RXTRIG_RATE', 'L3_STREAM_8023',
           'XFP_AUX_MONITORING_PLUS_3_3V_SUPPLY_CURRENT',
           'L3ModifyStream', 'tagNSProtocolCounterInfo',
           'PPP_STATUS_IPXCP_STATE', 'NSPMCOnePartitionInfo',
           'SIGNATURE_NORMAL_MODE', 'FR_PORT_SETTINGS',
           'NSPortTransmit', 'ATM_B_BC_TYPE_VBR',
           'NS_STREAM_MULTI_CONFIG_MODE_COPY',
           'SSCOP_STATE_OUT_DISCONN_PEND', 'GIGCaptureData',
           'UL_SET_TO_ZERO', 'TErrorStructure',
           'WN_IP_SUBNET_DEL_ALL', 'tagATMSchedParams',
           'CAPTURE_RANGE', 'AT_RX_CT_PROTOCOL_IP',
           'FC_FABRIC_DOWN_STATE', 'CM_LAN_6311A', 'CM_WN_3442A',
           'CA_SIGNALRATE_16MB', 'VCDB_STATE_MODIFIED',
           'L3_AGGR_SEQUENCE_INFO', 'FST_ALTERNATE_TX', 'MPLSLSP',
           'ETBNC_CRCA', 'ETBNC_CRCB', 'tagF32', 'ATTRIB_CAN_ROUTE',
           'NS_IGMPV3_ALL_GROUP_INFO', 'RUNTIME_MODE_DETAIL',
           'L3_HIST_TEST_V2_LATENCY_PER_STREAM', 'FC_FLOGI',
           'FR_STATUS_GROUP_MEMBER', 'NSResolveArps',
           'NS_DEFINE_MULTI_UDP_STREAM_VLAN', 'TRIGLED_TX',
           'WNDS3LineStatus', 'CM_LAN_3201A', 'HTCountStructure',
           'CM_LAN_3101B', 'FRAME_RST_BIT', 'NS_DEFINE_IPX_STREAM',
           'PET_SIG_PROT_ERR', 'tagTCPDataLogEventRx',
           'STREAM_PROTOCOL_8023', 'NSCopyStreamInfo', 'ETRUN_STEP',
           'XFP_CONNECTOR_BNC_TNC', 'L3_MOD_STREAM_EXTENSION',
           'NS_DEFINE_MULTI_STREAM_EXTENSION',
           'tagNSPMCHifnMemTestInfo', 'PPP_PARAMS_COPY',
           'L3_RECEIVE_TRACKING_LATENCYDISTRIBUTION',
           'WN_IP_SUBNET_CFG', 'ETHLatencyInfo', 'tagUSBInfo',
           'PPP_LCP_IPCP_INIT', 'tagF64', 'NCP_NOT_CFGD',
           'ATM_FRAME_CLEAR', 'SMB_STD_RXBYTES',
           'FR_LINE_SPEED_704000L', 'tagATPortCLIPCounterInfo',
           'ATM_STR_STATE_ADDR_RES_RETRY', 'ATMGlobalTrigger',
           'tagMPLSLSPInfo', 'TCP_GET_URI_DISTRIBUTION',
           'XENPAK_NVR_STANDARDS_COMPLIANCE_CODES',
           'PPP_LCP_IPCP_ACKSENT', 'FCNameServerEventConfig',
           'FSTAlternateTx', 'ETHCounterInfo', 'ATM_B_BC_SUSC_CLIP',
           'ATM_QOS_CLASS_1', 'WN_LOOPBACK_DISABLED', 'HTLED_RXGREEN',
           'CM_AT_9045B',
           'XFP_AUX_MONITORING_PLUS_3_3V_SUPPLY_VOLTAGE',
           'NS_ENABLE_TAGS_ALL_STREAMS', 'GIG_STRUC_STOP',
           'PMC_VPN_HW_TEST_FAILURE', 'TCP_SET_CONFIG_EXT',
           'ITR_BURSTERRORS', 'RESET_PARTIAL', 'NS_STREAM_TYPE_INFO',
           'tagNSARPConfig', 'NS_CAPTURE_STATUS_OVERSIZE',
           'FRAME_LLC_DSAP', 'ATM_MAX_DELTA', 'NSIPv4Header',
           'PPP_OE_IGNORE_EOL_TAG', 'tagWNT1E1AlarmCounterInfo',
           'ETBNC_JET210', 'LCP_AUTH', 'L3_MOD_RTP_STREAM',
           'L3_DEFINE_MULTI_UDP_IPV6_STREAM', 'ATM_LED_STATUS_TX',
           'PORT_DISABLED', 'tagATMVCDBListReq',
           'MII_REGISTER_1000_CONTROL', 'WNStreamDel',
           'CA_SIGNALRATE_34MB', 'AUTONOMOUS_ADDRESS_CONFIG',
           'ATM_FEATURES_GLOBAL_TRIGGERS', 'FST_CONTROL_AUX',
           'ATMStopCardSetupParams', 'XENPAK_NVR_CONFIG',
           'ATMSAALInfo', 'NS_DEFINE_IP_STREAM', 'DOT1X_EAP_TYPE_OTP',
           'NS_HIST_V1_LATENCY_PER_STREAM_INFO',
           'NS_DHCP_STREAM_COUNT_INFO', 'CONTROLLER_SMB600B',
           'NS_CAPTURE_OFF_TYPE', 'tagATMELANInfo', 'ATM_E164_AFI',
           'NS_MFG_PROM_INFO', 'AT_SDH_FRAMING',
           'GID_PN_FAILED_DISCOVERY', 'NS_MOD_IPX_STREAMS',
           'FC_CONFIG_IN_PROGRESS', 'NS_TRIGGER_CONFIG',
           'TCPExtendedConnEventInfo',
           'FC_PRIVATE_DISCOVERY_COMPLETE_STATE',
           'ITR_MAC_LINEERRORS', 'TR_MAC_BURSTERRORS',
           'WN_DS3_LINE_CTRL', 'NS_MULTI_VLAN_PRI_0_RX',
           'NS_MULTI_LFS_REMOTE_START', 'WN_TRIG_ENABLE',
           'SONET_LINE_LOP_ALARM', 'ATTRIB_SPEED_9952MB',
           'FR_DEFINE_IP_STREAM', 'SMB_STD_ERR_CRC',
           'XFP_OPTIONAL_WAVELENGTH_TUNABILITY',
           'NS_IPV6_ROUTER_DISCOVERY_COUNT_INFO',
           'XENPAK_TX_ALARM_LASER_OUTPUT_POWER_FAULT_ENABLE',
           'NS_TRIGGER2_ONLY', 'LCP_CONFIG_TIMEOUT',
           'CAUSE_VPCI_VCI_ASSIGN_FAIL',
           'NS_HIST_V2_LATENCY_PER_STREAM', 'HT_RUN_LATENCY',
           'SLOT_RESERVED_BY_OTHER', 'DOT1X_SUPPLICANT_STATUS_COUNT',
           'ATM_STR_PARAM_SIG_FW_MBS_0',
           'WN_DEFINE_MULTI_SMARTBITS_STREAM', 'L3_CAPTURE_STOP',
           'L3_SET_MODIFYSTREAMS', 'ATM_OC3_FRAMING',
           'SSCOP_DEFAULT_TMR_KEEP_ALIVE', 'FR_LINE_SPEED_6144000L',
           'ATM_STR_STATE_CONN_ESTABLISHED',
           'L3_DEFINE_RTP_STREAM_VLAN',
           'NSDOT1XSupplicantStatusSearchInfo', 'ET_CMDLOG_NOREAD',
           'NS_MOD_RTP_STREAM', 'FR_AGGR_V2_LATENCY_PER_STREAM_INFO',
           'ETSELA', 'MAX_SLOTS_HD', 'PAT_FF00',
           'NS_HIST_V2_LATENCY_DISTRIBUTION', 'tagWNLMIDel',
           'FC_WWN_LOGIN', 'POS_FRAMING_MODE_SDH', 'tagPPPStatusInfo',
           'PPPStatusInfo', 'PPPParamsCopy',
           'FR_HIST_MULTICAST_LATENCY', 'SlotUserInfo',
           'CM_LAN_3300A', 'ATMPETReq', 'CM_AT_9155C',
           'NS_MOD_UDP_STREAM', 'STREAM_PROTOCOL_IP_PPPOAOE',
           'L3_DEFINE_MULTI_VFD', 'DOT1X_EAP_TYPE_EAPTLS',
           'AT_VC_INFO', 'WN_T1E1_LINE_FILL_CFG',
           'CAPTURE_EVENTS_ALIGNMENT_ERRORS', 'tagFCHBAConfig',
           'VLAN_PRI_HIGHEST', 'ATMSigTraceEventData',
           'NS_DEFINE_MULTI_ICMP_STREAM_VLAN', 'tagATMCardInfo',
           'DS3_AIS_ALARM',
           'DOT1X_SUPPLICANT_FAILURE_EAP_NOT_SUPPORTED',
           'MPLSRoutingDomainDeleteAll', 'tagStreamUDPVLAN',
           'Layer3StreamDistributionInfo', 'FIBER_MODE',
           'ATMV_FIELD_PCR', 'PERCENT_LOAD_TO_GAP_BITS',
           'ATM_ELAN_TYPE_802_3', 'ATM_STR_PARAM_GEN_RATE_CLASS',
           'ATM_ELAN_TYPE_802_5', 'ENCAP_ETHERNET',
           'L3_MOD_STREAMS_ARRAY', 'L3_RX_STACK', 'StreamTCPVLAN',
           'L3_MOD_RTP_STREAMS_VLAN', 'ATM_CALL_DIST_SMOOTH',
           'TCP_SET_EXTENSION_MODE', 'NSIGMPTimestampInfo', 'Double',
           'STREAM_PROTOCOL_IPX', 'FR_CLEAR_COUNTERS_CMD',
           'tagPOSSonetPayloadConfig', 'WN_PVC_RET_CONF_STATUS',
           'L3_DEFINE_MPLS', 'INVALID_COMMON_SERVICE_PARMS',
           'WN_DS3_FRMR_STATUS_CBIT', 'ETBAUD_38400', 'ETDP_0000FFFF',
           'FST_CAPTURE_STATUS_CRC', 'NS_MOD_IPV6_EXT_DESTINATION',
           'NS_HIST_EN_LAST_TIMESTAMP',
           'NS_MULTI_RX_SIGNATURE_FRAMES',
           'L3_DEFINE_MULTI_ICMP_STREAM_VLAN', 'MPLS_BASE_NUM',
           'HBA_DISCOVERY', 'NS_MOD_UDP_STREAMS_VLAN',
           'NS_MOD_ICMP_STREAM', 'L3_VFD_DECR',
           'NSHistLatencyDistPerStreamInfo', 'FRHistogram',
           'TR_STATUS_RING_ALIVE', 'tagTCPTestStatus', 'FC_LINKUP',
           'ATM_FEATURES_PER_CONN_TRIGGERS',
           'CT_MODE_START_ON_REQUEST', 'ATM_DS1_E1_PLCP_LOF_ALARM',
           'NS_MOD_UDPDHCP_STREAMS', 'CA_CONNECT_V35',
           'PPP_IP_ENABLE', 'CAUSE_BC_NOT_AVAILABLE',
           'ATM_STR_PARAM_SIG_BW_PCR_01',
           'tagLayer3DHCPPortSessionInfo',
           'L3_DEFINE_MULTI_ICMP_STREAM',
           'NS_MULTI_IPV6_PING_REPLIES_TX', 'ETRUN_STOP',
           'FR_MAX_PVC_STATUS_TYPE', 'NS_TX_CONFIG', 'TCP_START_TEST',
           'FC_LINK_COST_100', 'PAT_00FF', 'WN_FEATURES_FR',
           'NS_MOD_IP_STREAM', 'ATM_ELAN_INACTIVE',
           'WN_E1_AMI_ENCODING', 'NS_IGMP_CLEAR_COUNTERS',
           'GIG_STATUS_100MHZ', 'NS_PMC_BASE_NUM',
           'STREAM_PROTOCOL_ICMP_IPV6', 'NS_DEFINE_TCP_IPV6_STREAM',
           'STOP_ADDRESS_AUTOCONFIGURATION', 'HTLED_TXRED',
           'tagATMCardCapabilities', 'ITR_PURGEEVENTS',
           'DOT1X_SUPPLICANT_STOP', 'GIG_CAP_TRIGGER',
           'NS_HIST_ENHANCED_LATENCY_OPTION_INFO',
           'FR_DEFINE_MULTI_802_3_STREAM', 'INVALID_LS_CMD',
           'POSTrigger', 'TCPConnectionsInfo',
           'FR_DS3_CBIT_LINE_FRAMING', 'FRAME_FIN_BIT',
           'WAN_DS1_0_TO_133_BUILDOUT', 'WN_CAPTURE_CTRL',
           'PPP_OPEN_LCP', 'XENPAK_OPTICAL_SC_TYPE', 'ATM_LINE',
           'NS_STREAM_GROUP_DELETE', 'RUN_NON_BLOCKING_FLAG',
           'ETHTransmit', 'CA_SIGNALRATE_8MB',
           'NS_MOD_SMART_TCP_STREAM_VLAN', 'ETSMB6000MAXSLOT',
           'FR_TRIG_COMP1_ONLY', 'L3MS_FIELD_FLOW_LABEL',
           'ATM_SAAL_INFO', 'ETH_PHY_PAUSE_RX_ENABLED',
           'NS_HIST_TCP_CONNECTION', 'ATM_ELAN_INIT_NORMAL',
           'FR_LINE_SPEED_1408000L', 'L3MS_FIELD_DMAC',
           'TCP_FLAG_URG', 'DOT1X_USER_MODE_FORCE_FAILURE',
           'GIG_STRUC_CAP_INFO', 'GIG_CONTROL_IP_FLOW_GENERATE',
           'MEDIA_USER_EXPLICIT_MODE', 'tagTCPTimeInfoCount',
           'TCP_ADD_GENERATOR_ADDR', 'XENPAK_OPTICAL_FC_PC_TYPE',
           'NS_TRIGGER1_AND_TRIGGER2', 'L3_ETHERNET_MODE_ON',
           'ATM_E1_PLCP_FRAMING', 'NS_DEFINE_IPV6_EXT_HOP_BY_HOP',
           'CA_VFDRESETCOUNT', 'tagU32', 'NSMLDCounterInfo',
           'TCPISP_CONNECTIONDATA_TYPE_UNKNOWN', 'CA_ATM_SIGNALING',
           'ETDP_00FF', 'SMB_VG_TRANSTRAIN_PKT', 'ETCRC_NONE',
           'tagFSTControlAux', 'NS_DEFINE_ICMP_IPV6_STREAM_VLAN',
           'GIG_STRUC_RESET', 'NS_IGMPV2_JOIN', 'tagWNT1E1LineCfg',
           'FC_MOD_STREAM', 'ATMVCDBEntryParams',
           'DOT1X_SUPPLICANT_FILL_OFF',
           'DOT1X_SUPPLICANT_FAILURE_NONE', 'ACCESS_DENIED',
           'FCNodeConfig', 'MAX_NAME', 'XFP_TRANSCEIVER_S_64_1',
           'FST_PROTOCOL_GENERATE_PING', 'GIG_TRIGGER1_AND_TRIGGER2',
           'NS_MOD_ICMP_STREAM_VLAN', 'CONN_STATE_STOPPED_ON_ERROR',
           'ETH_PROTOCOL_RESPOND_ARP', 'PHY_MODE_WAN', 'ETPINGPONG',
           'ATM_STREAM_TRIGGER_TIME_INFO', 'GIG_STRUC_CAP_DATA_INFO',
           'NSICMPHeader', 'WN_DEFINE_MULTI_IP_STREAM', 'Int',
           'MPLSLSPInfo', 'FCLinkConfig', 'PET_XCTRL',
           'FC_PORT_ID_QUERY', 'ATM_INTERNAL_CLOCK', 'ETCRC_OFF',
           'SSCOP_STATE_IN_RESYNC_PEND', 'WN_CONN_FRAME_RELAY',
           'L3MS_FIELD_NEXT_HEADER', 'NS_DIFF_SERV_V2_CONFIG_INFO',
           'CM_WN_3420', 'ETHLink', 'tagETHVLAN', 'AT_VC_COPY',
           'GIGCaptureCountInfo', 'PAT_INCB', 'SONET_PATH_AIS_ALARMS',
           'tagGIGVersions', 'DISABLE_ROUTER_DISCOVERY', 'PAT_INCW',
           'XFP_TRANSCEIVER_1NT_REACH_1300_NM_FP', 'CM_LAN_3324A',
           'XENPAK_PHY_MODE_WAN', 'FR_LINE_SPEED_1984000L',
           'VG_CFG_NO_PRIO_PROMO', 'tagLayer3_Tracking_Latency',
           'MAX_GROUP_SIZE', 'tagNSIPOption', 'STREAM_PROTOCOL_RTP',
           'INVALID_DESTINATION_ADDRESS', 'FR_HIST_LATENCY_INFO',
           'ATM_STR_PARAM_SNAP_HDR', 'tagATMStreamTriggerTimeInfo',
           'L3_DEFINE_UDP_STREAM', 'RPN_ID_FAILED_LOGIN', 'FR_LMI',
           'ETBNC_INPUT', 'HALFDUPLEX_MODE', 'PPP_OE_AC_ERR',
           'XENPAK_I_64_1R', 'tagATMStopCardSetupParams',
           'POS_TRIGGER1_ONLY', 'tagFCPlogi',
           'TIMESTAMP_CLOCK_SOURCE_10_MHZ', 'WN_PVC_COPY_CFG',
           'L3_RECEIVE_TRACKING_V2_LATENCYPERSTREAM',
           'NS_HIST_V2_LATENCY', 'CAUSE_TEMP_FAILURE',
           'FAMILY_SMB2000', 'MANAGED_ADDRESS_CONFIGURATION',
           'TRIGLED_TXRX', 'PPP_NCPS_CLOSED', 'NS_UPLOAD_FILE',
           'ETH_SELECT_RECEIVE', 'L3_HIST_START', 'NS_WIS_CONFIG',
           'FR_DS1_D4_LINE_FRAMING', 'NS_PHY_DEFAULT_CONFIG',
           'TR_MODE_DEVICE', 'FR_TX_CONTINUOUS_MULTI_BURST',
           'NS_HALF_DUPLEX_COUNTER_INFO', 'FR_ETSTAT_CRCLED',
           'GPS_NOT_READY', 'ETSTORESETUP',
           'ATTRIB_HASVFDREPEATCOUNT', 'WN_PVC_RET_ACTIVE_STATUS',
           'SOURCE_ADDRESS_GLOBAL_UNICAST', 'FCFSPFStatsConfig',
           'AT_ENCAP_TYPE_LLC_BRIDGED', 'NS_DEFINE_SMARTBITS_STREAM',
           'tagATMAddress', 'SYMBOL_ON', 'FST_CAPTURE_PARAMS',
           'WN_FEATURES_PPP', 'PPP_CONFIG_INFO', 'ETRECALLSETUP',
           'CAUSE_INV_TRANS_NET', 'PPP_LCP_DOWN', 'ETBNC_1',
           'ETBNC_2', 'ETH_RESET_PORT', 'tagStreamSmartTCP',
           'CAPTURE_NOT_GOOD', 'NCP_UP', 'GIG_VFD3_OFF',
           'AT_SONET_PATH_BIP_ALARM', 'ATM_DS3_PLCP_FRAMING',
           'PORT_PRIVATE_DISCOVERY_COMPLETE', 'DS3_B3ZS_ALARM',
           'VLAN_CFI_RIF_ABSENT', 'ATM_ELAN_DEREGISTER',
           'NS_DHCP_HOST_INFO', 'L3_DHCP_RESTART_ALL',
           'NS_DOT1X_SUPPLICANT_COPY', 'MAX_ARRAY_DIM_TM',
           'L3_HIST_LATENCY_PER_STREAM', 'tagNSIPv6ExtFragmentHeader',
           'L3_DISABLE_TAGS_ALL_STREAMS', 'ATM_ELAN_MTU_UNSPEC',
           'NS_AGGR_LATENCY_PER_STREAM_INFO', 'NS_802_3_STREAM_INFO',
           'NS_HIST_LATENCY_PER_STREAM_INFO', 'RTP_PAYLOAD_G723_1',
           'NS_READ_SUBPROCESS', 'ATTRIB_CONNECT_MII',
           'XFP_TRANSCEIVER_EXT_REACH_1550_NM_FP', 'PPP_NCP_UP',
           'tagNSUpdateHeaderInfo', 'FCSwitchMultiLinkConfig',
           'MPLS_RSVP_RECORD_ROUTE', 'tagLayer3IPv6Address',
           'SYNC_INOUT_MASTER', 'GIG_STRUC_BG2_READBACK',
           'tagWNPVCInfo', 'IATM_MEAN_CELL_TRANSFER_DELAY',
           'MAX_ERROR_STRING', 'DESTINATION_IPV6', 'DESTINATION_IPV4',
           'WAN_DS1_E1_LOS_ALARM', 'ATMClassicalIP',
           'tagNSCounterInfo', 'SIG_EVENT_INCOMING_CONNECT',
           'ATMConfigureDUT', 'AT_VC_DELETE_ALL', 'VG_CFG_END_NODE',
           'SSCOP_DEFAULT_MAX_RESEQ', 'WN_PVC_CFG_INFO',
           'IATM_OUT_OF_SEQUENCE', 'tagTCPConnectionHTTPConfig',
           'L2_READ_RATES', 'MPLSLDPTest',
           'XFP_CDR_SUPPORT_FOR_10_3_GBS', 'HIST_LAT_STREAM',
           'CM_LAN_3150A', 'NS_RECEIVE_TRACKING_MC_LATENCYPERSTREAM',
           'tagFCEPortSettingConfig', 'FRAME_TYPE_SERVICE',
           'tagNSVLANHeader', 'FCSwitchConfig', 'tagWNTriggerCfg',
           'NS_ENABLE_TAG', 'MPLS_EXPLICIT_ROUTE_IPV4',
           'MPLS_EXPLICIT_ROUTE_IPV6', 'L3_TX_IPV6_PROTOCOL',
           'TCP_SEND_DATA', 'tagLayer3StreamLongLatencyInfo',
           'FR_DS1_E1_EXCESS_ZEROS_ALARM', 'OAM_PACKET_TYPE_NONE_OAM',
           'INTEROP_NORMAL', 'IP_OPTION_RECORD_ROUTE',
           'XENPAK_V_64_2A', 'XENPAK_V_64_2B', 'HTLED_RED',
           'ATM_CELL_ERROR_RATIO', 'NS_WIS_INJECT_PATH_AIS_ALARM',
           'ETDP_FULLCUSTOM', 'SOCKET_TIMEOUT', 'FR_STATUS_EIA_DSR',
           'XENPAK_S_64_1', 'tagTCPGaps', 'FR_LINE_SPEED_192000L',
           'FRAME_UDP_HEADER_CRC', 'L3_RECEIVE_CAPTURE_BADPACKETS',
           'SSCOP_STATE_OUT_RESYNC_PEND', 'ATMConnectionInfoSummary',
           'FR_MOD_802_3_STREAM', 'UNI_VERSION_3_0_NET',
           'ATM_STOP_SETUP', 'tagNSEthernetHeader', 'WNPVCInfo',
           'FR_MOD_STREAMS_DELTA', 'tagATMVCDBEntryRtvl',
           'ENCAP_ATM_SVC_CLASSICAL_IP', 'FULLDUPLEX_MODE',
           'GIG_STRUC_MAC_CONFIG_INFO', 'ETDP_FFFFFFFF00000000',
           'MULTI_USER_CAPABLE', 'ATM_ELAN_INIT_LES_DIRECT',
           'SETUP_LATENCY_TMR_TICKS_PER_SEC', 'ENCAP_ATM_PVC_SNAP',
           'ATTRIB_SPEED_155MB', 'CM_GX_1420A', 'PAT_DECB',
           'PAT_DECW', 'NS_SONET_LINE_RDI_ALARM',
           'PPP_STATUS_LOCAL_MAGICNUMBER',
           'NS_GET_MULTI_CAPTURE_DATA', 'NS_ETHERNET_HEADER',
           'FC_STREAM_COS_2', 'FC_STREAM_COS_3', 'tagU16',
           'tagATMDS3E3LineInfo', 'WN_FILL_PATTERN',
           'FC_SWITCH_MULTI_LINK_CONFIG', 'L3_RTP_COUNTER_INFO',
           'CONN_STATE_STOPPED', 'tagLayer3TrackingActiveTest',
           'tagNSPhyConfig', 'ET_CMDLOG_COMMANDS',
           'PPP_ACCEPTABLE_OPTIONS', 'ATM_STR_PARAM_SIG_FW_SCR_0',
           'tagStreamUDP', 'tagATMFrameDefinition',
           'MPLS_LSP_COUNT_INFO', 'ATM_STR_STATUS_SVC_SETUP_LATENCY',
           'ATTRIB_SPEED_16MB', 'L3_HIST_RAW_TAGS',
           'NS_MULTI_NEIGHBOR_ADVERT_TX',
           'tagNSHistLatencyOverTimeInfo',
           'L3MS_FIELD_DATA_CHECK_ENABLE', 'NS_VFD_DECR', 'FC_WWN',
           'SMARTCARD_STATUS_OK', 'ATM_STR_PARAM_GEN_SCR',
           'L3_USB_GET_USB_INFO', 'NS_HIST_SEQUENCE_PER_STREAM',
           'L3_CAPTURE_STATUS_CRC', 'ETH_PHY_AUTONEGOTIATE_COMPLETE',
           'MII_CTRL_COLLISIONTEST', 'FRLinkStatusInfo',
           'ATM_SIGNALING', 'STREAM_PROTOCOL_UDP_VLAN',
           'ATMVCDBListReq', 'FR_LINE_SPEED_448000L',
           'ATMV_FIELD_TX_ENABLE', 'NS_IGMPV2_LEAVE',
           'NSIGMPv3GroupInfo', 'CAUSE_INCOMP_DEST',
           'STOP_NEXT_HOP_DETERMINATION', 'Layer3_Tracking_Latency',
           'NSIPv6ExtDestination', 'XFP_ENCODING_NRZ',
           'IP_INC_DST_IP', 'NEXT_HOP_RFC_COMPLIANT_MODE',
           'STREAM_PROTOCOL_IPV6', 'TCP_CLOSE_ALL', 'CM_WN_3405',
           'NS_TRIGGER_OFF', 'FCNameServer', 'CHANNEL_UP',
           'PPP_MOD_DESTMAC', 'PPP_OE_RETRY', 'FRPvcControl',
           'C_ANNEX_D_PARM', 'FRCardProtocolCfg',
           'XFP_ENCODING_64B_66B', 'CM_AT_3450A',
           'NS_MULTI_LFS_LOCAL_START', 'ROUTER_DISCOVERY_QUEUED',
           'NS_DIFF_SERV', 'NS_ARP_TIMEOUT',
           'WN_DS1_0_TO_110_BUILDOUT', 'PET_SSCOP_PROT_ERR',
           'STREAM_PROTOCOL_UDPDHCP', 'tagPPPParamsModify',
           'PPP_IPX_ROUTING', 'WN_IP_SUBNET_CFG_INFO',
           'L3_DEFINE_SMART_TCP_STREAM_VLAN',
           'tagLayer3DHCPExtendedHostInfo', 'NSDiffServ',
           'tagNSIPv4Header', 'FR_MOD_IP_STREAM', 'U32',
           'SERVICE_PARM_RCV_SIZE', 'ATM_CELL_TRANSFER_DELAY',
           'tagATMConnectionInfo', 'FR_LINE_SPEED_1472000L',
           'TCP_SET_ISP_CONNECTIONDATA_CURVE',
           'XENPAK_NVR_WAVELENGTH_CHANNEL3',
           'XENPAK_NVR_WAVELENGTH_CHANNEL0',
           'XENPAK_NVR_WAVELENGTH_CHANNEL1',
           'PMC_HIFN_MEM_TEST_FAILURE', 'CLASS_OF_SERVICE_3',
           'CLASS_OF_SERVICE_2', 'FRAME_LLC_SSAP',
           'ATM_CARD_CAPABILITY', 'IATM_MISDELIVERED', 'tagFCConfig',
           'NS_WIS_LOOP_TX_CLOCK', 'L3_DHCP_STATE_RELEASING',
           'WN_NO_ENCAP', 'MAX_ERRORS', 'L3_MOD_IPV6_STREAM_VLAN',
           'HTHUBID_ALL', 'L3MS_FIELD_FC_OXID', 'NS_SPEED_OC12',
           'tagNSWISConfig', 'ATM_UNI', 'NS_MLD_GROUP_INFO',
           'FR_E1_AMI_ENCODING', 'NSCaptureCountInfo',
           'TCPConnectRequest', 'NSMLDTimestampInfo',
           'PPP_CONFIGURE_MAXTERMINATE', 'ATMDS1E1LineParams',
           'GIG_QOS_TRIGGER', 'WN_CHAN_PHYS_COPY_CFG', 'ON_LINK',
           'U8', 'NS_MULTI_TX_STACK', 'XENPAK_S_64_2A',
           'XENPAK_S_64_2B', 'tagTCPConnectRequest',
           'NS_WIS_PATH_AIS_ALARM', 'tagWNT1E1LineCtrl',
           'XFP_CONNECTOR_COPPER_PIGTAIL',
           'ATM_STR_STATE_CONN_PROCEEDING', 'L3_MOD_ICMP_IPV6_STREAM',
           'IP_DEC_SRC_IP_AND_DST_MAC', 'FR_PVC_CTRL',
           'L3_DEFINE_MULTI_SMART_TCP_STREAM', 'FR_UDP_STREAM_INFO',
           'L3_RECEIVE_CAPTURE_TRIGGERS', 'ATTRIB_CONNECT_V35',
           'ATM_STREAM_PARAMS_MODIFY', 'XAUI_PRBS_CONFIG',
           'L3_DHCP_STATE_REBINDING', 'ATM_ATM_DS3_E3_OOF_ALARM',
           'XFP_TRANSCEIVER_V_64_3', 'PROTOCOL_ENCAP_TYPE_STD_PPP',
           'SMB_STD_RXFRAMES', 'XFP_OPTIONAL_ACTIVE_FEC_CONTROLS',
           'L3_VFD_OFF', 'FRAME_TCP_SEQUENCE', 'ETMF_PREAMBLE_COUNT',
           'tagNSMultiCounterInfo', 'RealTimeCounters',
           'NS_STREAM_MULTI_CONFIG_MODE_MOD', 'PPP_LOCAL_IPADDR',
           'tagPPPDelete', 'tagPPPParamsCopy', 'tagGIGCaptureSetup',
           'POS_LOOPBACK_MODE_OFF', 'AT_PORT_ALLOW_ALL_FRAME_SIZES',
           'L3_HIST_LATENCY', 'PPPParamCfg', 'FR_HIST_DATA_TYPE_INFO',
           'tagNSL2StatCounterInfo', 'IP_INC_DST_IP_AND_SRC_MAC',
           'TR_MAC_LINEERRORS', 'NSDOT1XSupplicantFill',
           'MPLS_ATTRIBUTE_OBJECT_CREATE', 'PPP_STATUS_WEGOT_OPTIONS',
           'ATM_STR_PARAM_ELAN_INST', 'NSPMCOnePartition',
           'ETLOOPBACK_ON', 'NS_MULTI_IPV6_PING_REPLIES_RX',
           'ETBNC_EXTCLK', 'ISMB_STD_TXTRIGGER',
           'tagWNT1E1LineStatus', 'FC_PORT_CONFIG',
           'FR_LINE_SPEED_640000L', 'NS_DHCP_RESTART_ALL',
           'WRONG_HUB_CARD_TYPE', 'NSIPv6ExtHopByHopHeader',
           'TRIGLED_RX', 'ATM_CALL_DIST_RANDOM', 'TR_MAC_ABORTTX',
           'PPP_OE_PADO_SENT', 'PPP_OE_ACNAME',
           'ETH_PHY_DESCRAMBLER_LOCKED', 'NSCreateHeaderInfo',
           'StreamFC128', 'CM_FBC_3602A',
           'NS_HIST_V2_LATENCY_PER_STREAM_INFO',
           'tagL3StreamBGConfig', 'STREAM_PROTOCOL_TCP_VLAN',
           'CA_SIGNALRATE_4MB', 'FR_NIC_EIA_RD_RTS', 'ETPREAMBLE_MIN',
           'tagNSDOT1XSupplicantConfig', 'L3MS_FIELD_FC_COS',
           'IN_SVC_DONT_ADD_TO_DATABASE',
           'NS_HIST_MULTICAST_LATENCY_PER_STREAM',
           'GIG_STRUC_TX_READ_WRITE', 'NS_HIST_LATENCY_OPTION_INFO',
           'StreamUDPDHCP', 'IP_INC_SRC_MAC_DST_MAC',
           'PORT_MAPPING_NATIVE', 'ISMB_VG_PRIO_PROM_PKT',
           'tagTCPURLDistribution',
           'tagLayer3_V2_Tracking_Distribution', 'L3_VFD_INFO',
           'ATM_FRAMER_CONFIG_FAILURE', 'PET_SSCOP_STATE_CHANGE',
           'TCPURLDistribution', 'NS_HIST_LATENCY_DIST_PER_STREAM',
           'GIG_STRUC_TX', 'TCPAgentOne', 'NSMPLSLabel',
           'CA_SIGNALRATE_25MB', 'Layer3HistLatency',
           'NS_IPV6_EXT_ESP_HEADER', 'ITR_MAC_RXCONGESTED',
           'ATMConnection64Status',
           'L3_AGGR_LATENCY_DISTRIBUTION_INFO',
           'XAUI_PRBS_TEST_DISABLE', 'tagNSCustomHeader',
           'NSCTCaptureParams', 'STREAM_PROTOCOL_UDP_IPV6_VLAN',
           'AT_SPEED_OC12', 'HARD_ADDRESS_NOT_REGISTERED',
           'CM_NOT_PRESENT', 'L3_MOD_802_3_STREAM',
           'ADDRESS_AUTOCONFIG_COMPLETED',
           'CAPTURE_EVENTS_OUT_OF_SEQUENCE', 'tagPPPIPv6ParamCfg',
           'L3MS_FIELD_GATEWAYA', 'L3MS_FIELD_GATEWAYB',
           'L3MS_FIELD_GATEWAYC', 'L3MS_FIELD_GATEWAYD',
           'NS_HIST_SEQUENCE_PREP', 'WN_E1_120_OHM_NORMAL',
           'ATM_ELAN_REGISTER', 'RENUMBERED_FLAG', 'tagNSFFSInfo',
           'L3_MOD_STREAMS_DELTA', 'TR_MAC_INTERNALERRORS',
           'NS_M_GET_L3_STAT_INFO', 'NS_WIS_INJECT_PATH_BIP_ERRORS',
           'ATM_CONN_PARAMS_RESET', 'NS_MOD_V2_STREAMS_ARRAY',
           'ATMLineParams', 'ETSMB600MAXSLOT', 'DATA_BASE_EMPTY',
           'NS_WIS_SECTION_LOS_ALARM', 'L3_ARPS_NOT_RESOLVED',
           'FRAME_PROTOCOL_IP', 'NS_MULTI_RX_DROPPED_FRAMES',
           'MPLS_RSVP_ATTRIBUTE', 'L3_CAPTURE_TRIGGERS_TYPE',
           'L3MS_FIELD_DATA_INTEGRITY_ERROR_ENABLE',
           'ATMDS3E3LineParams', 'tagATMVCCInfo',
           'L3_SET_MULTIDEFINESTREAMS', 'CardFWVersionStructure',
           'ATM_INCOMING_SVC_METHOD', 'AN_REGISTERS_UNTOUCHED',
           'NS_DEFINE_STREAM_BINDING', 'CAUSE_NUMBER_CHANGED',
           'PPP_REQUESTED_OPTIONS', 'ETLNM_ON', 'FCPortConfig',
           'ATM_PER_PORT_BURST', 'NO_FAILURE', 'NS_ETH_PHY_COUNTERS',
           'PPP_STATUS_OSI_RX_ALIGNMENT', 'L3_MOD_MPLS',
           'GIG_CMD_CLEAR_STATS', 'L3_ARP_UNRESOLVED',
           'Layer3MulticastCounters', 'HIST_LAT_DISTRIBUTION',
           'NSIPv6Control', 'CM_LAN_3320A',
           'NS_DEFINE_MULTI_TCP_IPV6_STREAM', 'FR_CARD_CPE',
           'FC_SWITCH_TOPOLOGY_CORE_EDGE', 'NSIPv6ExtESPHeader',
           'AT_ENCAP_TYPE_VCMUX_MPLS', 'L3_STREAM_RTP',
           'tagLayer3StreamMulticastInfo', 'ETHMII',
           'NS_CAPTURE_PACKET_INFO', 'EXPRESS_UNLINK',
           'ETMF_GAP_TIME', 'CM_AT_3452A', 'RESET_FULL',
           'HTLED_COLLRED', 'NS_DHCP_GET_ADDRESS_ALL',
           'HTTRIGGER_OFF', 'tagNSCardHardwareInfo', 'ATM_CARD_INFO',
           'NS_PMC_VPN_INFO', 'ATStreamCounterInfo',
           'WN_DS1_E1_EXCESS_ZEROS_ALARM',
           'GIG_STRUC_AUTO_NEGO_READBACK', 'tagNSPMCDeviceInfo',
           'U16', 'ATPortCounterInfo', 'ATTRIB_SPEED_2_048MB',
           'SONET_PATH_AIS_ALARM', 'tagLayer3SequenceInfo',
           'FR_HIST_L3_LATENCYDISTRIBUTION', 'FRAME_URGENT_POINTER',
           'PAT_5555', 'NS_MOD_IPV6_EXT_AUTHENTICATION',
           'PPP_STATUS_LATENCY', 'XENPAK_NVR_VENDOR_NAME',
           'ATMExtVCCInfo', 'MFTYPERATE', 'L3_STREAM_GROUP_DELETE',
           'TR_STATUS_BADSTREAM', 'PORT_UP',
           'FR_DS1_E1_SEV_ERROR_FRAME_ALARM', 'AT_SPEED_OC3',
           'SONET_LINE_BIP96_ERRORS', 'ATM_DS1_N7X5_DB_BUILDOUT',
           'NS_MULTI_RX_IPV6_FRAMES', 'tagNSPMCFlashMemTestInfo',
           'TCPISPConnectionData', 'MPLS_SERVICE_OBJECT_CREATE',
           'CAPTURE_EVENTS_IP_CHECKSUM_ERROR',
           'FR_DS1_0_TO_133_BUILDOUT', 'FST_CAPTURE_STATUS_ALIGNMENT',
           'DOT1X_SUPPLICANT_STATUS_SUPPICANT_STATE', 'StreamIP',
           'XENPAK_TX_ALARM_PCS_TRANSMIT_LOCAL_FAULT_ENABLE',
           'MAX_ACTIVE_SLOTS', 'FR_TRIG_COMP1_AND_COMP2',
           'FR_DS1_N15_DB_BUILDOUT', 'ATM_UNI_VERSION_40',
           'NS_SONET_ALARM_COUNTER_INFO', 'TCP_REARP_ALL',
           'Layer3StreamLatencyInfo32', 'ATM_155_MAX_PORTS',
           'NS_EN_RUNTIME_TOTAL_FRAMES_INDEX',
           'SOURCE_ADDRESS_SITE_LOCAL_UNICAST',
           'tagLayer3CaptureData', 'NSHeaderStackInfo',
           'tagNSDOT1XSupplicantControl', 'tagNSUpdateVFDInfo',
           'L3_HIST_ACTIVE_TEST_PREP', 'tagETHCollision',
           'WNVersionInfo', 'AT_SONET_SECTION_BIP_ALARM',
           'CAUSE_LOC_PRIV_LOCAL', 'CALL_STATE_RELEASE_INDICATION',
           'DOT1X_SUPPLICANT_HELD', 'START_ADDRESS_AUTOCONFIGURATION',
           'tagNSStreamConfig', 'ATM_CONN_PARAMS_COMPLETE',
           'ET_CMDLOG_SHOW_IOTYPE', 'NS_CT_CONFIG_STORAGE_FILE',
           'FC_CARD_BASE', 'NS_NTP_CLIENT_DISABLE',
           'PPP_CONFIG_QUERY', 'CM_LAN_3101A',
           'L3_DEFINE_IPV6_STREAM', 'SERVICE_PARM_RECP_CTRL',
           'NS_EN_RUNTIME_TIMESTAMP_INDEX',
           'tagNSHistRawSignatureInfo', 'FC_DEST_DUT',
           'NSIPv6ExtHopByHop', 'tagNSIPv6NextHopResultInfo',
           'NS_OAM_COUNTER_INFO', 'GIG_FILL_RANDOM',
           'tagATMStreamDetailedInfo', 'tagStreamIPv6',
           'TCP_GET_CONNECTIONS_INFO', 'RUN_NON_BLOCKING_MASK',
           'HTVFDStructure', 'TCPISPConnectionDataArray',
           'WN_CHANNEL_CTRL', 'ATMStreamTriggerTimeInfo',
           'L3_DEFINE_TCP_STREAM_VLAN', 'L3MS_FIELD_DIPB',
           'ATM_B_BC_UNI40_ABR', 'NS_UDP_IPV6_STREAM_VLAN_INFO',
           'tagTCPSetup', 'AN_INVALID_MII_ADDRESS',
           'L3_SET_STREAM_STATE', 'FR_STREAM_CNT_MAX',
           'NSPMCFlashMemTestInfo', 'FR_ETSTAT_CARDCONFIG',
           'NS_DHCP_PORT_COUNTER_INFO', 'NS_TX_IPV6_ADDRESS',
           'L3MS_FIELD_IP_BITS_OFFSET', 'tagFCNameServer',
           'FR_LINE_SPEED_1856000L', 'ATMConnectionStatus',
           'ATM_DS1_PLCP_FRAMING', 'ISMB_STD_ERR_UNDERSIZE',
           'NEXT_HOP_RUNNING', 'WN_CAPTURE_DETAIL_INFO',
           'ATTRIB_DUPLEX_HALF', 'ATMSigRestartAckInfo',
           'tagATMVCDBInfo', 'L3_READ_STREAM_BG',
           'L3_ENABLE_TAGS_ALL_STREAMS', 'PROTOCOL_ERROR',
           'tagNSMPLSHeader', 'PPP_ECHO_START', 'L3_STOP_ARPS',
           'CT_DEFAULT_SLICE_COUNT', 'XFP_CDR_SUPPORT_FOR_9_95_GBS',
           'L3_DEFINE_SMARTBITS_128_STREAM', 'HTTRANSMIT_OFF',
           'MII_STATUS_100BASE_X_HALF', 'WN_LOOP_TIMED_CLOCK',
           'ATM_ELAN_MTU_9234', 'NS_DEFINE_ARP_STREAM',
           'ITR_MAC_FRAMECOPIED', 'NS_MULTI_IPV4_ARP_REQUESTS_TX',
           'NS_MAX_STREAM_CONFIG_OBJECTS', 'NS_TX_IPV6_PROTOCOL',
           'L3MS_FIELD_SMAC_BYTE01', 'PPP_NCPS_STOPPING',
           'FR_HIST_START', 'TRANSMIT_ENGINE_MODE',
           'NS_IPV6_EXT_HOP_BY_HOP_HEADER', 'MAX_10GIG_DATA_BUFFER',
           'XENPAK_ALARM_CONFIG_INFO', 'tagATMLayerInfo',
           'WN_T1E1_LINE_CFG_INFO', 'SCHEDULE_MODE_FRAME_RATE',
           'NSPMCVPNHardwareTestInfo', 'ATM_DS1_E1_AIS_ALARM',
           'UL_UNMODIFIED', 'L3_HIST_SUMMARY_INFO', 'tagATMTrigger',
           'ETHExtendedCardInfo', 'FRAME_PAD',
           'ATM_DS3_LONG_BUILDOUT', 'ETHTrigger',
           'FR_LINE_SPEED_1728000L', 'MII_STATUS10_1000BASE_FULL',
           'FR_HIST_LATENCY_DISTRIBUTION',
           'DOT1X_SUPPLICANT_SESSION_DISCONNECTED',
           'PORT_DEVICE_LOGIN_COMPLETE', 'FR_PVC_STATUS_INFO',
           'tagL3StatsInfo', 'PMC_DISK_ERROR', 'StreamIPX',
           'WN_CHAN_PHYS_MOD_CFG', 'tagGIGCaptureDataInfo',
           'tagMPLSOpaqueObject', 'CALL_STATE_INCOMING_CALL_PRES',
           'IL3_ARP_SEND', 'ATM_CALL_LENGTH_FOREVER_FREE',
           'WN_CHANNEL_DEL_ALL', 'NSHistLatencyOption',
           'NSIPv6StatusInfo', 'NS_V2_STREAM_INFO',
           'NSFileTransferStructure', 'NS_CAPTURE_DATA_INFO',
           'NS_PHY_DEFAULT_SPEED_10MHZ', 'NS_MOD_UDP_STREAMS',
           'tagFCLinkConfig', 'ATTRIB_SPEED_34MB',
           'FC_SWITCH_TOPOLOGY_CUSTOM', 'XFP_TRANSCEIVER_I_64_5',
           'XFP_TRANSCEIVER_I_64_1', 'XFP_TRANSCEIVER_I_64_3',
           'XFP_TRANSCEIVER_I_64_2', 'GIG_STRUC_CAPTURE_SETUP',
           'NSWISLineStatusInfo', 'COMMAND_MODE_LOG_ONLY',
           'L3_DEFINE_MULTI_UDP_STREAM_VLAN',
           'OAM_PACKET_TYPE_IDLE_OAM', 'GIG_AFN_PAUSE2',
           'GIG_AFN_PAUSE1', 'tagIPSubnetReg',
           'tagNSPMCVPNHardwareTestInfo', 'PORT_NAME_NOT_REGISTERED',
           'ATM_STR_PARAM_SIG_FW_MBS_01', 'WN_PVC_DEL', 'MFPORT_A',
           'MFPORT_B', 'GIG_TRANSMIT', 'NS_PHY_DEFAULT_FULL_DUPLEX',
           'TCPSetup', 'NSIPv6RouterPrefixInfo', 'CORP_A',
           'WN_E1_75_OHM_NORMAL', 'L3MS_FIELD_FC_SOF',
           'GET_IPV6_FROM_IPV4', 'SYMBOL_OFF',
           'ATM_DS3_E3_PLCP_LOF_ALARM', 'L3MS_FIELD_DIPC',
           'ATM_CELL_DELAY_VARIATION', 'L3MS_FIELD_DIPA',
           'tagATMPerConnBurstCount', 'L3MS_FIELD_DIPD',
           'tagFRIPSubnetRegister', 'MLDV2_IGNORE_V1_MESSAGE',
           'SONET_LINE_FERF_ALARM', 'SwitchStructure',
           'TCP_CONN_REQUEST_TRIGGER', 'AN_LINK_PARTNER_INCAPABLE',
           'ETRUN', 'SONET_FRAMING_A1A2_ERRORS', 'WN_STREAM_CFG',
           'Layer3DHCPV2HostInfo', 'tagATMPETReadReq',
           'DOT1X_EAP_TYPE_SIM', 'PORT_B', 'PORT_A',
           'NS_MOD_STREAM_BINDING', 'tagNSIPv6Control',
           'HTLED_TXGREEN', 'NS_MULTI_IPV6_PING_REQUESTS_RX',
           'XENPAK_NVR_VENDOR_SERIAL_NUMBER', 'SERVER_CLOSE_RST',
           'StreamRTP', 'HVFD_DECR', 'STREAM_PROTOCOL_ICMP_VLAN',
           'ATM_B_BC_END_TO_END_TIMING', 'PORTS_PER_PASSIVE_CARD',
           'NS_SONET_CELL_HEC_ALARM', 'NS_PHY_CONFIG']
